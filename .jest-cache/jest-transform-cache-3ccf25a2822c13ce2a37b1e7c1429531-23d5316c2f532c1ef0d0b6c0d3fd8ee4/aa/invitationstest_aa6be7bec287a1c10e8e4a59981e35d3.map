{"file":"C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\__tests__\\api\\invitations.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\__tests__\\api\\invitations.test.ts"],"sourcesContent":["/**\r\n * Tests para la API de invitaciones masivas de cortesía\r\n * @file /api/events/[id]/invitations\r\n */\r\n\r\nimport { NextRequest } from 'next/server';\r\n\r\n// Mock Next.js Response\r\njest.mock('next/server', () => {\r\n  class NextResponse {\r\n    status: number;\r\n    body: any;\r\n    headers: any;\r\n    constructor(body?: any, opts?: any) {\r\n      this.status = opts?.status || 200;\r\n      this.body = body;\r\n      this.headers = opts?.headers || {};\r\n    }\r\n    static json(body: any, opts?: any) {\r\n      return { status: opts?.status || 200, body };\r\n    }\r\n  }\r\n  return { NextResponse };\r\n});\r\n\r\n// Mock Prisma\r\nconst mockPrisma = {\r\n  event: {\r\n    findUnique: jest.fn(),\r\n  },\r\n  courtesyInvitation: {\r\n    findMany: jest.fn(),\r\n    create: jest.fn(),\r\n  },\r\n  $transaction: jest.fn(),\r\n};\r\n\r\njest.mock('@/lib/prisma', () => ({ prisma: mockPrisma }));\r\n\r\n// Mock Auth\r\nconst mockGetCurrentUser = jest.fn();\r\njest.mock('@/lib/auth', () => ({\r\n  getCurrentUser: mockGetCurrentUser,\r\n}));\r\n\r\ndescribe('API /api/events/[id]/invitations', () => {\r\n  const mockEventId = 'event-123';\r\n  const mockUser = {\r\n    id: 'user-123',\r\n    email: 'organizer@test.com',\r\n    role: 'ORGANIZER',\r\n  };\r\n  const mockEvent = {\r\n    id: mockEventId,\r\n    title: 'Test Event',\r\n    organizerId: mockUser.id,\r\n    organizer: { id: mockUser.id },\r\n  };\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    mockGetCurrentUser.mockResolvedValue(mockUser);\r\n    mockPrisma.event.findUnique.mockResolvedValue(mockEvent);\r\n  });\r\n\r\n  describe('GET - Listar invitaciones', () => {\r\n    it('debería retornar lista de invitaciones exitosamente', async () => {\r\n      const mockInvitations = [\r\n        {\r\n          id: 'inv-1',\r\n          invitedEmail: 'test1@example.com',\r\n          invitedName: 'Test User 1',\r\n          status: 'PENDING',\r\n          createdAt: new Date(),\r\n          ticket: null,\r\n          creator: {\r\n            firstName: 'John',\r\n            lastName: 'Doe',\r\n            email: 'john@test.com',\r\n          },\r\n        },\r\n        {\r\n          id: 'inv-2',\r\n          invitedEmail: 'test2@example.com',\r\n          invitedName: 'Test User 2',\r\n          status: 'SENT',\r\n          createdAt: new Date(),\r\n          ticket: null,\r\n          creator: {\r\n            firstName: 'John',\r\n            lastName: 'Doe',\r\n            email: 'john@test.com',\r\n          },\r\n        },\r\n      ];\r\n\r\n      mockPrisma.courtesyInvitation.findMany.mockResolvedValue(mockInvitations);\r\n\r\n      const { GET } = await import('@/app/api/events/[id]/invitations/route');\r\n      const res = await GET(\r\n        {} as NextRequest,\r\n        { params: Promise.resolve({ id: mockEventId }) } as any\r\n      );\r\n\r\n      expect(res.status).toBe(200);\r\n      expect(res.body.invitations).toHaveLength(2);\r\n      expect(res.body.event.title).toBe('Test Event');\r\n      expect(mockPrisma.courtesyInvitation.findMany).toHaveBeenCalledWith({\r\n        where: { eventId: mockEventId },\r\n        include: {\r\n          ticket: {\r\n            select: {\r\n              id: true,\r\n              qrCode: true,\r\n              isUsed: true,\r\n              usedAt: true,\r\n            },\r\n          },\r\n          creator: {\r\n            select: {\r\n              firstName: true,\r\n              lastName: true,\r\n              email: true,\r\n            },\r\n          },\r\n        },\r\n        orderBy: { createdAt: 'desc' },\r\n      });\r\n    });\r\n\r\n    it('debería retornar 401 si no hay usuario autenticado', async () => {\r\n      mockGetCurrentUser.mockResolvedValue(null);\r\n\r\n      const { GET } = await import('@/app/api/events/[id]/invitations/route');\r\n      const res = await GET(\r\n        {} as NextRequest,\r\n        { params: Promise.resolve({ id: mockEventId }) } as any\r\n      );\r\n\r\n      expect(res.status).toBe(401);\r\n      expect(res.body.error).toBe('No autorizado');\r\n    });\r\n\r\n    it('debería retornar 404 si el evento no existe', async () => {\r\n      mockPrisma.event.findUnique.mockResolvedValue(null);\r\n\r\n      const { GET } = await import('@/app/api/events/[id]/invitations/route');\r\n      const res = await GET(\r\n        {} as NextRequest,\r\n        { params: Promise.resolve({ id: mockEventId }) } as any\r\n      );\r\n\r\n      expect(res.status).toBe(404);\r\n      expect(res.body.error).toBe('Evento no encontrado');\r\n    });\r\n\r\n    it('debería retornar 403 si el usuario no es propietario ni admin', async () => {\r\n      const unauthorizedUser = { ...mockUser, id: 'other-user', role: 'CLIENT' };\r\n      mockGetCurrentUser.mockResolvedValue(unauthorizedUser);\r\n\r\n      const { GET } = await import('@/app/api/events/[id]/invitations/route');\r\n      const res = await GET(\r\n        {} as NextRequest,\r\n        { params: Promise.resolve({ id: mockEventId }) } as any\r\n      );\r\n\r\n      expect(res.status).toBe(403);\r\n      expect(res.body.error).toBe('No autorizado');\r\n    });\r\n  });\r\n\r\n  describe('POST - Crear invitaciones', () => {\r\n    const mockRequest = (body: any) => ({\r\n      json: jest.fn().mockResolvedValue(body),\r\n    }) as any as NextRequest;\r\n\r\n    it('debería crear una invitación individual exitosamente', async () => {\r\n      const singleInvitation = {\r\n        invitedEmail: 'test@example.com',\r\n        invitedName: 'Test User',\r\n        message: 'Ven a mi evento!',\r\n      };\r\n\r\n      const createdInvitation = {\r\n        id: 'inv-123',\r\n        ...singleInvitation,\r\n        invitedEmail: singleInvitation.invitedEmail.toLowerCase(),\r\n        eventId: mockEventId,\r\n        createdBy: mockUser.id,\r\n        invitationCode: 'abc123def456',\r\n        expiresAt: expect.any(Date),\r\n        creator: {\r\n          firstName: 'John',\r\n          lastName: 'Doe',\r\n          email: 'john@test.com',\r\n        },\r\n      };\r\n\r\n      // Mock que no hay invitaciones existentes\r\n      mockPrisma.courtesyInvitation.findMany.mockResolvedValue([]);\r\n      \r\n      // Mock creación exitosa\r\n      mockPrisma.$transaction.mockResolvedValue([createdInvitation]);\r\n\r\n      const { POST } = await import('@/app/api/events/[id]/invitations/route');\r\n      const res = await POST(\r\n        mockRequest(singleInvitation),\r\n        { params: Promise.resolve({ id: mockEventId }) } as any\r\n      );\r\n\r\n      expect(res.status).toBe(201);\r\n      expect(res.body.message).toContain('1 invitación(es) creada(s) exitosamente');\r\n      expect(res.body.invitations).toHaveLength(1);\r\n      expect(mockPrisma.$transaction).toHaveBeenCalled();\r\n    });\r\n\r\n    it('debería crear múltiples invitaciones masivas exitosamente', async () => {\r\n      const bulkInvitations = {\r\n        invitations: [\r\n          {\r\n            invitedEmail: 'test1@example.com',\r\n            invitedName: 'Test User 1',\r\n          },\r\n          {\r\n            invitedEmail: 'test2@example.com',\r\n            invitedName: 'Test User 2',\r\n          },\r\n          {\r\n            invitedEmail: 'test3@example.com',\r\n            invitedName: 'Test User 3',\r\n          },\r\n        ],\r\n      };\r\n\r\n      const createdInvitations = bulkInvitations.invitations.map((inv, index) => ({\r\n        id: `inv-${index + 1}`,\r\n        ...inv,\r\n        invitedEmail: inv.invitedEmail.toLowerCase(),\r\n        eventId: mockEventId,\r\n        createdBy: mockUser.id,\r\n        invitationCode: `code${index + 1}`,\r\n        expiresAt: expect.any(Date),\r\n        creator: {\r\n          firstName: 'John',\r\n          lastName: 'Doe',\r\n          email: 'john@test.com',\r\n        },\r\n      }));\r\n\r\n      // Mock que no hay invitaciones existentes\r\n      mockPrisma.courtesyInvitation.findMany.mockResolvedValue([]);\r\n      \r\n      // Mock creación exitosa\r\n      mockPrisma.$transaction.mockResolvedValue(createdInvitations);\r\n\r\n      const { POST } = await import('@/app/api/events/[id]/invitations/route');\r\n      const res = await POST(\r\n        mockRequest(bulkInvitations),\r\n        { params: Promise.resolve({ id: mockEventId }) } as any\r\n      );\r\n\r\n      expect(res.status).toBe(201);\r\n      expect(res.body.message).toContain('3 invitación(es) creada(s) exitosamente');\r\n      expect(res.body.invitations).toHaveLength(3);\r\n      expect(mockPrisma.$transaction).toHaveBeenCalled();\r\n    });\r\n\r\n    it('debería rechazar más de 50 invitaciones masivas', async () => {\r\n      const tooManyInvitations = {\r\n        invitations: Array.from({ length: 51 }, (_, i) => ({\r\n          invitedEmail: `test${i + 1}@example.com`,\r\n          invitedName: `Test User ${i + 1}`,\r\n        })),\r\n      };\r\n\r\n      const { POST } = await import('@/app/api/events/[id]/invitations/route');\r\n      const res = await POST(\r\n        mockRequest(tooManyInvitations),\r\n        { params: Promise.resolve({ id: mockEventId }) } as any\r\n      );\r\n\r\n      expect(res.status).toBe(400);\r\n      expect(res.body.error).toBe('Datos inválidos');\r\n      expect(res.body.details).toBeDefined();\r\n    });\r\n\r\n    it('debería rechazar emails duplicados existentes', async () => {\r\n      const duplicateInvitation = {\r\n        invitedEmail: 'existing@example.com',\r\n        invitedName: 'Existing User',\r\n      };\r\n\r\n      // Mock que ya existe una invitación con este email\r\n      mockPrisma.courtesyInvitation.findMany.mockResolvedValue([\r\n        { invitedEmail: 'existing@example.com' },\r\n      ]);\r\n\r\n      const { POST } = await import('@/app/api/events/[id]/invitations/route');\r\n      const res = await POST(\r\n        mockRequest(duplicateInvitation),\r\n        { params: Promise.resolve({ id: mockEventId }) } as any\r\n      );\r\n\r\n      expect(res.status).toBe(400);\r\n      expect(res.body.error).toBe('Algunos emails ya están invitados a este evento');\r\n      expect(res.body.duplicateEmails).toContain('existing@example.com');\r\n    });\r\n\r\n    it('debería validar formato de email inválido', async () => {\r\n      const invalidEmailInvitation = {\r\n        invitedEmail: 'invalid-email',\r\n        invitedName: 'Test User',\r\n      };\r\n\r\n      const { POST } = await import('@/app/api/events/[id]/invitations/route');\r\n      const res = await POST(\r\n        mockRequest(invalidEmailInvitation),\r\n        { params: Promise.resolve({ id: mockEventId }) } as any\r\n      );\r\n\r\n      expect(res.status).toBe(400);\r\n      expect(res.body.error).toBe('Datos inválidos');\r\n    });\r\n\r\n    it('debería rechazar lista vacía de invitaciones', async () => {\r\n      const emptyInvitations = {\r\n        invitations: [],\r\n      };\r\n\r\n      const { POST } = await import('@/app/api/events/[id]/invitations/route');\r\n      const res = await POST(\r\n        mockRequest(emptyInvitations),\r\n        { params: Promise.resolve({ id: mockEventId }) } as any\r\n      );\r\n\r\n      expect(res.status).toBe(400);\r\n      expect(res.body.error).toBe('Datos inválidos');\r\n    });\r\n\r\n    it('debería manejar errores de base de datos', async () => {\r\n      const validInvitation = {\r\n        invitedEmail: 'test@example.com',\r\n        invitedName: 'Test User',\r\n      };\r\n\r\n      // Mock que no hay invitaciones existentes\r\n      mockPrisma.courtesyInvitation.findMany.mockResolvedValue([]);\r\n      \r\n      // Mock error en transacción\r\n      mockPrisma.$transaction.mockRejectedValue(new Error('Database error'));\r\n\r\n      const { POST } = await import('@/app/api/events/[id]/invitations/route');\r\n      const res = await POST(\r\n        mockRequest(validInvitation),\r\n        { params: Promise.resolve({ id: mockEventId }) } as any\r\n      );\r\n\r\n      expect(res.status).toBe(500);\r\n      expect(res.body.error).toBe('Error interno del servidor');\r\n    });\r\n  });\r\n\r\n  describe('Validaciones de esquema', () => {\r\n    const mockRequest = (body: any) => ({\r\n      json: jest.fn().mockResolvedValue(body),\r\n    }) as any as NextRequest;\r\n\r\n    it('debería validar campos requeridos para invitación individual', async () => {\r\n      const incompleteInvitation = {\r\n        invitedName: 'Test User', // Falta email\r\n      };\r\n\r\n      const { POST } = await import('@/app/api/events/[id]/invitations/route');\r\n      const res = await POST(\r\n        mockRequest(incompleteInvitation),\r\n        { params: Promise.resolve({ id: mockEventId }) } as any\r\n      );\r\n\r\n      expect(res.status).toBe(400);\r\n      expect(res.body.error).toBe('Datos inválidos');\r\n    });\r\n\r\n    it('debería validar tipos de datos correctos', async () => {\r\n      const invalidDataTypes = {\r\n        invitedEmail: 123, // Debería ser string\r\n        invitedName: ['array'], // Debería ser string\r\n      };\r\n\r\n      const { POST } = await import('@/app/api/events/[id]/invitations/route');\r\n      const res = await POST(\r\n        mockRequest(invalidDataTypes),\r\n        { params: Promise.resolve({ id: mockEventId }) } as any\r\n      );\r\n\r\n      expect(res.status).toBe(400);\r\n      expect(res.body.error).toBe('Datos inválidos');\r\n    });\r\n  });\r\n});\r\n"],"version":3}