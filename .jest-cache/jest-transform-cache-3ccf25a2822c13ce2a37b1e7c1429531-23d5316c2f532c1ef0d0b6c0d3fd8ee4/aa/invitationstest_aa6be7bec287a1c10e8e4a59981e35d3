d21892de96c279d0608ce812340f4001
"use strict";
/**
 * Tests para la API de invitaciones masivas de cortesía
 * @file /api/events/[id]/invitations
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Mock Next.js Response
jest.mock('next/server', () => {
    class NextResponse {
        constructor(body, opts) {
            this.status = (opts === null || opts === void 0 ? void 0 : opts.status) || 200;
            this.body = body;
            this.headers = (opts === null || opts === void 0 ? void 0 : opts.headers) || {};
        }
        static json(body, opts) {
            return { status: (opts === null || opts === void 0 ? void 0 : opts.status) || 200, body };
        }
    }
    return { NextResponse };
});
jest.mock('@/lib/prisma', () => ({ prisma: mockPrisma }));
jest.mock('@/lib/auth', () => ({
    getCurrentUser: mockGetCurrentUser,
}));
// Mock Prisma
const mockPrisma = {
    event: {
        findUnique: jest.fn(),
    },
    courtesyInvitation: {
        findMany: jest.fn(),
        create: jest.fn(),
    },
    $transaction: jest.fn(),
};
// Mock Auth
const mockGetCurrentUser = jest.fn();
describe('API /api/events/[id]/invitations', () => {
    const mockEventId = 'event-123';
    const mockUser = {
        id: 'user-123',
        email: 'organizer@test.com',
        role: 'ORGANIZER',
    };
    const mockEvent = {
        id: mockEventId,
        title: 'Test Event',
        organizerId: mockUser.id,
        organizer: { id: mockUser.id },
    };
    beforeEach(() => {
        jest.clearAllMocks();
        mockGetCurrentUser.mockResolvedValue(mockUser);
        mockPrisma.event.findUnique.mockResolvedValue(mockEvent);
    });
    describe('GET - Listar invitaciones', () => {
        it('debería retornar lista de invitaciones exitosamente', async () => {
            const mockInvitations = [
                {
                    id: 'inv-1',
                    invitedEmail: 'test1@example.com',
                    invitedName: 'Test User 1',
                    status: 'PENDING',
                    createdAt: new Date(),
                    ticket: null,
                    creator: {
                        firstName: 'John',
                        lastName: 'Doe',
                        email: 'john@test.com',
                    },
                },
                {
                    id: 'inv-2',
                    invitedEmail: 'test2@example.com',
                    invitedName: 'Test User 2',
                    status: 'SENT',
                    createdAt: new Date(),
                    ticket: null,
                    creator: {
                        firstName: 'John',
                        lastName: 'Doe',
                        email: 'john@test.com',
                    },
                },
            ];
            mockPrisma.courtesyInvitation.findMany.mockResolvedValue(mockInvitations);
            const { GET } = await Promise.resolve().then(() => __importStar(require('@/app/api/events/[id]/invitations/route')));
            const res = await GET({}, { params: Promise.resolve({ id: mockEventId }) });
            expect(res.status).toBe(200);
            expect(res.body.invitations).toHaveLength(2);
            expect(res.body.event.title).toBe('Test Event');
            expect(mockPrisma.courtesyInvitation.findMany).toHaveBeenCalledWith({
                where: { eventId: mockEventId },
                include: {
                    ticket: {
                        select: {
                            id: true,
                            qrCode: true,
                            isUsed: true,
                            usedAt: true,
                        },
                    },
                    creator: {
                        select: {
                            firstName: true,
                            lastName: true,
                            email: true,
                        },
                    },
                },
                orderBy: { createdAt: 'desc' },
            });
        });
        it('debería retornar 401 si no hay usuario autenticado', async () => {
            mockGetCurrentUser.mockResolvedValue(null);
            const { GET } = await Promise.resolve().then(() => __importStar(require('@/app/api/events/[id]/invitations/route')));
            const res = await GET({}, { params: Promise.resolve({ id: mockEventId }) });
            expect(res.status).toBe(401);
            expect(res.body.error).toBe('No autorizado');
        });
        it('debería retornar 404 si el evento no existe', async () => {
            mockPrisma.event.findUnique.mockResolvedValue(null);
            const { GET } = await Promise.resolve().then(() => __importStar(require('@/app/api/events/[id]/invitations/route')));
            const res = await GET({}, { params: Promise.resolve({ id: mockEventId }) });
            expect(res.status).toBe(404);
            expect(res.body.error).toBe('Evento no encontrado');
        });
        it('debería retornar 403 si el usuario no es propietario ni admin', async () => {
            const unauthorizedUser = Object.assign(Object.assign({}, mockUser), { id: 'other-user', role: 'CLIENT' });
            mockGetCurrentUser.mockResolvedValue(unauthorizedUser);
            const { GET } = await Promise.resolve().then(() => __importStar(require('@/app/api/events/[id]/invitations/route')));
            const res = await GET({}, { params: Promise.resolve({ id: mockEventId }) });
            expect(res.status).toBe(403);
            expect(res.body.error).toBe('No autorizado');
        });
    });
    describe('POST - Crear invitaciones', () => {
        const mockRequest = (body) => ({
            json: jest.fn().mockResolvedValue(body),
        });
        it('debería crear una invitación individual exitosamente', async () => {
            const singleInvitation = {
                invitedEmail: 'test@example.com',
                invitedName: 'Test User',
                message: 'Ven a mi evento!',
            };
            const createdInvitation = Object.assign(Object.assign({ id: 'inv-123' }, singleInvitation), { invitedEmail: singleInvitation.invitedEmail.toLowerCase(), eventId: mockEventId, createdBy: mockUser.id, invitationCode: 'abc123def456', expiresAt: expect.any(Date), creator: {
                    firstName: 'John',
                    lastName: 'Doe',
                    email: 'john@test.com',
                } });
            // Mock que no hay invitaciones existentes
            mockPrisma.courtesyInvitation.findMany.mockResolvedValue([]);
            // Mock creación exitosa
            mockPrisma.$transaction.mockResolvedValue([createdInvitation]);
            const { POST } = await Promise.resolve().then(() => __importStar(require('@/app/api/events/[id]/invitations/route')));
            const res = await POST(mockRequest(singleInvitation), { params: Promise.resolve({ id: mockEventId }) });
            expect(res.status).toBe(201);
            expect(res.body.message).toContain('1 invitación(es) creada(s) exitosamente');
            expect(res.body.invitations).toHaveLength(1);
            expect(mockPrisma.$transaction).toHaveBeenCalled();
        });
        it('debería crear múltiples invitaciones masivas exitosamente', async () => {
            const bulkInvitations = {
                invitations: [
                    {
                        invitedEmail: 'test1@example.com',
                        invitedName: 'Test User 1',
                    },
                    {
                        invitedEmail: 'test2@example.com',
                        invitedName: 'Test User 2',
                    },
                    {
                        invitedEmail: 'test3@example.com',
                        invitedName: 'Test User 3',
                    },
                ],
            };
            const createdInvitations = bulkInvitations.invitations.map((inv, index) => (Object.assign(Object.assign({ id: `inv-${index + 1}` }, inv), { invitedEmail: inv.invitedEmail.toLowerCase(), eventId: mockEventId, createdBy: mockUser.id, invitationCode: `code${index + 1}`, expiresAt: expect.any(Date), creator: {
                    firstName: 'John',
                    lastName: 'Doe',
                    email: 'john@test.com',
                } })));
            // Mock que no hay invitaciones existentes
            mockPrisma.courtesyInvitation.findMany.mockResolvedValue([]);
            // Mock creación exitosa
            mockPrisma.$transaction.mockResolvedValue(createdInvitations);
            const { POST } = await Promise.resolve().then(() => __importStar(require('@/app/api/events/[id]/invitations/route')));
            const res = await POST(mockRequest(bulkInvitations), { params: Promise.resolve({ id: mockEventId }) });
            expect(res.status).toBe(201);
            expect(res.body.message).toContain('3 invitación(es) creada(s) exitosamente');
            expect(res.body.invitations).toHaveLength(3);
            expect(mockPrisma.$transaction).toHaveBeenCalled();
        });
        it('debería rechazar más de 50 invitaciones masivas', async () => {
            const tooManyInvitations = {
                invitations: Array.from({ length: 51 }, (_, i) => ({
                    invitedEmail: `test${i + 1}@example.com`,
                    invitedName: `Test User ${i + 1}`,
                })),
            };
            const { POST } = await Promise.resolve().then(() => __importStar(require('@/app/api/events/[id]/invitations/route')));
            const res = await POST(mockRequest(tooManyInvitations), { params: Promise.resolve({ id: mockEventId }) });
            expect(res.status).toBe(400);
            expect(res.body.error).toBe('Datos inválidos');
            expect(res.body.details).toBeDefined();
        });
        it('debería rechazar emails duplicados existentes', async () => {
            const duplicateInvitation = {
                invitedEmail: 'existing@example.com',
                invitedName: 'Existing User',
            };
            // Mock que ya existe una invitación con este email
            mockPrisma.courtesyInvitation.findMany.mockResolvedValue([
                { invitedEmail: 'existing@example.com' },
            ]);
            const { POST } = await Promise.resolve().then(() => __importStar(require('@/app/api/events/[id]/invitations/route')));
            const res = await POST(mockRequest(duplicateInvitation), { params: Promise.resolve({ id: mockEventId }) });
            expect(res.status).toBe(400);
            expect(res.body.error).toBe('Algunos emails ya están invitados a este evento');
            expect(res.body.duplicateEmails).toContain('existing@example.com');
        });
        it('debería validar formato de email inválido', async () => {
            const invalidEmailInvitation = {
                invitedEmail: 'invalid-email',
                invitedName: 'Test User',
            };
            const { POST } = await Promise.resolve().then(() => __importStar(require('@/app/api/events/[id]/invitations/route')));
            const res = await POST(mockRequest(invalidEmailInvitation), { params: Promise.resolve({ id: mockEventId }) });
            expect(res.status).toBe(400);
            expect(res.body.error).toBe('Datos inválidos');
        });
        it('debería rechazar lista vacía de invitaciones', async () => {
            const emptyInvitations = {
                invitations: [],
            };
            const { POST } = await Promise.resolve().then(() => __importStar(require('@/app/api/events/[id]/invitations/route')));
            const res = await POST(mockRequest(emptyInvitations), { params: Promise.resolve({ id: mockEventId }) });
            expect(res.status).toBe(400);
            expect(res.body.error).toBe('Datos inválidos');
        });
        it('debería manejar errores de base de datos', async () => {
            const validInvitation = {
                invitedEmail: 'test@example.com',
                invitedName: 'Test User',
            };
            // Mock que no hay invitaciones existentes
            mockPrisma.courtesyInvitation.findMany.mockResolvedValue([]);
            // Mock error en transacción
            mockPrisma.$transaction.mockRejectedValue(new Error('Database error'));
            const { POST } = await Promise.resolve().then(() => __importStar(require('@/app/api/events/[id]/invitations/route')));
            const res = await POST(mockRequest(validInvitation), { params: Promise.resolve({ id: mockEventId }) });
            expect(res.status).toBe(500);
            expect(res.body.error).toBe('Error interno del servidor');
        });
    });
    describe('Validaciones de esquema', () => {
        const mockRequest = (body) => ({
            json: jest.fn().mockResolvedValue(body),
        });
        it('debería validar campos requeridos para invitación individual', async () => {
            const incompleteInvitation = {
                invitedName: 'Test User', // Falta email
            };
            const { POST } = await Promise.resolve().then(() => __importStar(require('@/app/api/events/[id]/invitations/route')));
            const res = await POST(mockRequest(incompleteInvitation), { params: Promise.resolve({ id: mockEventId }) });
            expect(res.status).toBe(400);
            expect(res.body.error).toBe('Datos inválidos');
        });
        it('debería validar tipos de datos correctos', async () => {
            const invalidDataTypes = {
                invitedEmail: 123, // Debería ser string
                invitedName: ['array'], // Debería ser string
            };
            const { POST } = await Promise.resolve().then(() => __importStar(require('@/app/api/events/[id]/invitations/route')));
            const res = await POST(mockRequest(invalidDataTypes), { params: Promise.resolve({ id: mockEventId }) });
            expect(res.status).toBe(400);
            expect(res.body.error).toBe('Datos inválidos');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,