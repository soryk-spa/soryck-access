7ae4546942b61b592f9b67a07e91832d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GET = GET;
exports.POST = POST;
const server_1 = require("next/server");
const prisma_1 = require("@/lib/prisma");
const auth_1 = require("@/lib/auth");
const zod_1 = require("zod");
const createInvitationSchema = zod_1.z.object({
    invitedEmail: zod_1.z.string().email("Email inválido"),
    invitedName: zod_1.z.string().min(1, "Nombre requerido").optional(),
    message: zod_1.z.string().optional(),
});
const bulkCreateInvitationSchema = zod_1.z.object({
    invitations: zod_1.z.array(createInvitationSchema).min(1, "Al menos una invitación es requerida").max(50, "Máximo 50 invitaciones por lote"),
});
async function GET(request, { params }) {
    try {
        const { id: eventId } = await params;
        const user = await (0, auth_1.getCurrentUser)();
        if (!user) {
            return server_1.NextResponse.json({ error: 'No autorizado' }, { status: 401 });
        }
        const event = await prisma_1.prisma.event.findUnique({
            where: { id: eventId },
            include: {
                organizer: true,
            },
        });
        if (!event) {
            return server_1.NextResponse.json({ error: 'Evento no encontrado' }, { status: 404 });
        }
        const isOwner = event.organizerId === user.id;
        const isAdmin = user.role === 'ADMIN';
        if (!isOwner && !isAdmin) {
            return server_1.NextResponse.json({ error: 'No autorizado' }, { status: 403 });
        }
        const invitations = await prisma_1.prisma.courtesyInvitation.findMany({
            where: { eventId },
            include: {
                ticket: {
                    select: {
                        id: true,
                        qrCode: true,
                        isUsed: true,
                        usedAt: true,
                    },
                },
                creator: {
                    select: {
                        firstName: true,
                        lastName: true,
                        email: true,
                    },
                },
            },
            orderBy: { createdAt: 'desc' },
        });
        console.log('Invitations fetched:', invitations.length);
        if (invitations.length > 0) {
            console.log('Sample invitation:', JSON.stringify(invitations[0], null, 2));
        }
        return server_1.NextResponse.json({
            event: {
                id: event.id,
                title: event.title,
            },
            invitations,
        });
    }
    catch (error) {
        console.error("Error fetching courtesy invitations:", error);
        return server_1.NextResponse.json({ error: "Error interno del servidor" }, { status: 500 });
    }
}
async function POST(request, { params }) {
    try {
        const { id: eventId } = await params;
        const user = await (0, auth_1.getCurrentUser)();
        if (!user) {
            return server_1.NextResponse.json({ error: 'No autorizado' }, { status: 401 });
        }
        const event = await prisma_1.prisma.event.findUnique({
            where: { id: eventId },
            include: {
                organizer: true,
            },
        });
        if (!event) {
            return server_1.NextResponse.json({ error: 'Evento no encontrado' }, { status: 404 });
        }
        const isOwner = event.organizerId === user.id;
        const isAdmin = user.role === 'ADMIN';
        if (!isOwner && !isAdmin) {
            return server_1.NextResponse.json({ error: 'No autorizado' }, { status: 403 });
        }
        const body = await request.json();
        let invitationsToCreate = [];
        if (body.invitations) {
            const validation = bulkCreateInvitationSchema.parse(body);
            invitationsToCreate = validation.invitations;
        }
        else {
            const validation = createInvitationSchema.parse(body);
            invitationsToCreate = [validation];
        }
        const existingEmails = await prisma_1.prisma.courtesyInvitation.findMany({
            where: {
                eventId,
                invitedEmail: {
                    in: invitationsToCreate.map(inv => inv.invitedEmail.toLowerCase()),
                },
            },
            select: { invitedEmail: true },
        });
        if (existingEmails.length > 0) {
            const duplicateEmails = existingEmails.map(e => e.invitedEmail);
            return server_1.NextResponse.json({
                error: "Algunos emails ya están invitados a este evento",
                duplicateEmails
            }, { status: 400 });
        }
        const createdInvitations = await prisma_1.prisma.$transaction(invitationsToCreate.map((invitation) => prisma_1.prisma.courtesyInvitation.create({
            data: {
                eventId,
                invitedEmail: invitation.invitedEmail.toLowerCase(),
                invitedName: invitation.invitedName,
                message: invitation.message,
                createdBy: user.id,
                invitationCode: generateInvitationCode(),
                expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
            },
            include: {
                creator: {
                    select: {
                        firstName: true,
                        lastName: true,
                        email: true,
                    },
                },
            },
        })));
        return server_1.NextResponse.json({
            message: `${createdInvitations.length} invitación(es) creada(s) exitosamente`,
            invitations: createdInvitations,
        }, { status: 201 });
    }
    catch (error) {
        if (error instanceof zod_1.z.ZodError) {
            return server_1.NextResponse.json({ error: "Datos inválidos", details: error.issues }, { status: 400 });
        }
        console.error("Error creating courtesy invitations:", error);
        return server_1.NextResponse.json({ error: "Error interno del servidor" }, { status: 500 });
    }
}
function generateInvitationCode() {
    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,