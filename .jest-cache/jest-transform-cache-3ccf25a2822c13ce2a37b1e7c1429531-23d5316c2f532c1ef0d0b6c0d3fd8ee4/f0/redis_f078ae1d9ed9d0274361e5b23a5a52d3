d098ddbba018a7bb3948f653e079ecc3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cache = exports.CacheService = void 0;
const ioredis_1 = require("ioredis");
const logger_1 = require("./logger");
const getRedisConfig = () => {
    if (process.env.REDIS_URL) {
        return {
            connectionName: 'vercel-redis',
            lazyConnect: true,
            retryDelayOnFailover: 100,
            enableReadyCheck: false,
            maxRetriesPerRequest: 3,
            connectTimeout: 60000,
            commandTimeout: 5000,
            keepAlive: 30000,
            family: 4,
            enableAutoPipelining: true,
            compression: 'gzip',
        };
    }
    return {
        host: process.env.REDIS_HOST || 'localhost',
        port: parseInt(process.env.REDIS_PORT || '6379'),
        password: process.env.REDIS_PASSWORD,
        db: parseInt(process.env.REDIS_DB || '0'),
        retryDelayOnFailover: 100,
        enableReadyCheck: false,
        maxRetriesPerRequest: 3,
        lazyConnect: true,
        connectTimeout: 60000,
        commandTimeout: 5000,
        keepAlive: 30000,
        family: 4,
        enableAutoPipelining: true,
    };
};
const redis = process.env.REDIS_URL
    ? new ioredis_1.Redis(process.env.REDIS_URL, getRedisConfig())
    : new ioredis_1.Redis(getRedisConfig());
redis.on('connect', () => {
    logger_1.logger.info('✅ Redis connected successfully');
});
redis.on('error', (error) => {
    logger_1.logger.error('❌ Redis connection error', error);
});
redis.on('close', () => {
    logger_1.logger.info('🔌 Redis connection closed');
});
class CacheService {
    constructor() {
        this.redis = redis;
    }
    static getInstance() {
        if (!CacheService.instance) {
            CacheService.instance = new CacheService();
        }
        return CacheService.instance;
    }
    async get(key) {
        try {
            const cached = await this.redis.get(key);
            return cached ? JSON.parse(cached) : null;
        }
        catch (error) {
            logger_1.logger.error(`Error getting cache key ${key}`, error);
            return null;
        }
    }
    async set(key, value, ttlSeconds) {
        try {
            const serialized = JSON.stringify(value);
            if (ttlSeconds) {
                await this.redis.setex(key, ttlSeconds, serialized);
            }
            else {
                await this.redis.set(key, serialized);
            }
        }
        catch (error) {
            logger_1.logger.error(`Error setting cache key ${key}`, error);
        }
    }
    async del(key) {
        try {
            await this.redis.del(key);
        }
        catch (error) {
            logger_1.logger.error(`Error deleting cache key ${key}`, error);
        }
    }
    async invalidatePattern(pattern) {
        try {
            const keys = await this.redis.keys(pattern);
            if (keys.length > 0) {
                await this.redis.del(...keys);
            }
        }
        catch (error) {
            logger_1.logger.error(`Error invalidating pattern ${pattern}`, error);
        }
    }
    async getUserRole(clerkId) {
        return this.get(`user:role:${clerkId}`);
    }
    async setUserRole(clerkId, role, ttl = 3600) {
        await this.set(`user:role:${clerkId}`, role, ttl);
    }
    async getUserProfile(clerkId) {
        return this.get(`user:profile:${clerkId}`);
    }
    async setUserProfile(clerkId, profile, ttl = 1800) {
        await this.set(`user:profile:${clerkId}`, profile, ttl);
    }
    async getUserFullData(clerkId) {
        return this.get(`user:full:${clerkId}`);
    }
    async setUserFullData(clerkId, userData, ttl = 3600) {
        await this.set(`user:full:${clerkId}`, userData, ttl);
    }
    async getUserPermissions(clerkId) {
        return this.get(`user:permissions:${clerkId}`);
    }
    async setUserPermissions(clerkId, permissions, ttl = 3600) {
        await this.set(`user:permissions:${clerkId}`, permissions, ttl);
    }
    async setUserBatch(clerkId, userData, ttl = 3600) {
        const pipeline = this.redis.pipeline();
        pipeline.setex(`user:full:${clerkId}`, ttl, JSON.stringify(userData));
        pipeline.setex(`user:role:${clerkId}`, ttl, userData.role);
        pipeline.setex(`user:profile:${clerkId}`, ttl, JSON.stringify(userData));
        await pipeline.exec();
    }
    async invalidateUserCache(clerkId) {
        await this.invalidatePattern(`user:*:${clerkId}`);
    }
    async getEvents(query) {
        return this.get(`events:${query}`);
    }
    async setEvents(query, events, ttl = 600) {
        await this.set(`events:${query}`, events, ttl);
    }
    async invalidateEventsCache() {
        await this.invalidatePattern('events:*');
    }
    async getDashboardStats(userId) {
        return this.get(`dashboard:stats:${userId}`);
    }
    async setDashboardStats(userId, stats, ttl = 300) {
        await this.set(`dashboard:stats:${userId}`, stats, ttl);
    }
    async invalidateDashboardStats(userId) {
        if (userId) {
            await this.del(`dashboard:stats:${userId}`);
        }
        else {
            await this.invalidatePattern('dashboard:stats:*');
        }
    }
    async incrementRateLimit(key, windowSeconds, limit) {
        try {
            const current = await this.redis.incr(key);
            if (current === 1) {
                await this.redis.expire(key, windowSeconds);
            }
            return {
                allowed: current <= limit,
                remaining: Math.max(0, limit - current)
            };
        }
        catch (error) {
            logger_1.logger.error(`Error checking rate limit for ${key}`, error);
            return { allowed: true, remaining: limit };
        }
    }
    async setSession(sessionId, data, ttl = 86400) {
        await this.set(`session:${sessionId}`, data, ttl);
    }
    async getSession(sessionId) {
        return this.get(`session:${sessionId}`);
    }
    async deleteSession(sessionId) {
        await this.del(`session:${sessionId}`);
    }
    async ping() {
        try {
            const response = await this.redis.ping();
            return response === 'PONG';
        }
        catch (error) {
            logger_1.logger.error('Redis ping failed', error);
            return false;
        }
    }
    async disconnect() {
        try {
            await this.redis.quit();
        }
        catch (error) {
            logger_1.logger.error('Error disconnecting from Redis:', error);
        }
    }
}
exports.CacheService = CacheService;
exports.cache = CacheService.getInstance();
exports.default = redis;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,