{"version":3,"names":["describe","it","expect","beforeEach","jest","require","global","fetch","fn","clearAllMocks","mockClear","mockInvitations","id","invitedEmail","invitedName","status","invitationCode","expiresAt","createdAt","mockResolvedValueOnce","ok","json","event","title","invitations","response","data","toBe","toHaveLength","mockRejectedValueOnce","Error","error","message","newInvitation","mockResponse","method","headers","body","JSON","stringify","toContain","invalidData","bulkInvitations","email","name","created","errors","tooManyInvitations","Array","from","length","_","i","validEmails","invalidEmails","forEach","isValid","test","textInput","lines","split","filter","line","trim","emailMatch","match","replace","undefined","push","toEqual","formats","format","toBeTruthy","toMatch","validStatuses","now","Date","futureDate","getTime","pastDate","activInvitation","toISOString","expiredInvitation","generateCode","Math","random","toString","substring","toUpperCase","codes","Set","code","add","size","toBeGreaterThan"],"sources":["invitations-simple.test.js"],"sourcesContent":["/**\r\n * Tests simples para el sistema de invitaciones de cortesía\r\n * Tests básicos sin sintaxis TypeScript avanzada\r\n */\r\n\r\nconst { describe, it, expect, beforeEach, jest } = require('@jest/globals');\r\n\r\n// Mock básico de fetch\r\nglobal.fetch = jest.fn();\r\n\r\ndescribe('Sistema de Invitaciones de Cortesía', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    fetch.mockClear();\r\n  });\r\n\r\n  describe('API de Invitaciones - GET', () => {\r\n    it('debería obtener lista de invitaciones exitosamente', async () => {\r\n      const mockInvitations = [\r\n        {\r\n          id: 'inv-1',\r\n          invitedEmail: 'test@example.com',\r\n          invitedName: 'Test User',\r\n          status: 'PENDING',\r\n          invitationCode: 'ABC123',\r\n          expiresAt: '2025-12-31T23:59:59Z',\r\n          createdAt: '2025-09-01T10:00:00Z',\r\n        }\r\n      ];\r\n\r\n      fetch.mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => ({\r\n          event: { id: 'event-1', title: 'Test Event' },\r\n          invitations: mockInvitations,\r\n        }),\r\n      });\r\n\r\n      const response = await fetch('/api/events/event-1/invitations');\r\n      const data = await response.json();\r\n\r\n      expect(response.ok).toBe(true);\r\n      expect(data.invitations).toHaveLength(1);\r\n      expect(data.invitations[0].invitedEmail).toBe('test@example.com');\r\n      expect(data.invitations[0].status).toBe('PENDING');\r\n    });\r\n\r\n    it('debería manejar errores al obtener invitaciones', async () => {\r\n      fetch.mockRejectedValueOnce(new Error('Network error'));\r\n\r\n      try {\r\n        await fetch('/api/events/event-1/invitations');\r\n      } catch (error) {\r\n        expect(error.message).toBe('Network error');\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('API de Invitaciones - POST Individual', () => {\r\n    it('debería crear una invitación individual exitosamente', async () => {\r\n      const newInvitation = {\r\n        invitedEmail: 'new@example.com',\r\n        invitedName: 'New User',\r\n      };\r\n\r\n      const mockResponse = {\r\n        message: '1 invitación(es) creada(s) exitosamente',\r\n        invitations: [{\r\n          id: 'inv-new',\r\n          ...newInvitation,\r\n          status: 'PENDING',\r\n          invitationCode: 'XYZ789',\r\n        }],\r\n      };\r\n\r\n      fetch.mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockResponse,\r\n      });\r\n\r\n      const response = await fetch('/api/events/event-1/invitations', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(newInvitation),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      expect(response.ok).toBe(true);\r\n      expect(data.message).toContain('1 invitación(es) creada(s)');\r\n      expect(data.invitations[0].invitedEmail).toBe('new@example.com');\r\n    });\r\n\r\n    it('debería validar email requerido', async () => {\r\n      const invalidData = { invitedName: 'User Without Email' };\r\n\r\n      fetch.mockResolvedValueOnce({\r\n        ok: false,\r\n        status: 400,\r\n        json: async () => ({ error: 'Email es requerido' }),\r\n      });\r\n\r\n      const response = await fetch('/api/events/event-1/invitations', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(invalidData),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      expect(response.ok).toBe(false);\r\n      expect(response.status).toBe(400);\r\n      expect(data.error).toContain('Email es requerido');\r\n    });\r\n  });\r\n\r\n  describe('API de Invitaciones - POST Masivo', () => {\r\n    it('debería crear múltiples invitaciones exitosamente', async () => {\r\n      const bulkInvitations = {\r\n        invitations: [\r\n          { email: 'user1@test.com', name: 'User 1' },\r\n          { email: 'user2@test.com', name: 'User 2' },\r\n          { email: 'user3@test.com', name: 'User 3' },\r\n        ],\r\n      };\r\n\r\n      const mockResponse = {\r\n        created: [\r\n          { id: 'inv-1', invitedEmail: 'user1@test.com', status: 'PENDING' },\r\n          { id: 'inv-2', invitedEmail: 'user2@test.com', status: 'PENDING' },\r\n          { id: 'inv-3', invitedEmail: 'user3@test.com', status: 'PENDING' },\r\n        ],\r\n        errors: [],\r\n      };\r\n\r\n      fetch.mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockResponse,\r\n      });\r\n\r\n      const response = await fetch('/api/events/event-1/invitations', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(bulkInvitations),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      expect(response.ok).toBe(true);\r\n      expect(data.created).toHaveLength(3);\r\n      expect(data.errors).toHaveLength(0);\r\n      expect(data.created[0].invitedEmail).toBe('user1@test.com');\r\n    });\r\n\r\n    it('debería manejar errores parciales en invitaciones masivas', async () => {\r\n      const bulkInvitations = {\r\n        invitations: [\r\n          { email: 'valid@test.com', name: 'Valid User' },\r\n          { email: 'duplicate@test.com', name: 'Duplicate User' },\r\n        ],\r\n      };\r\n\r\n      const mockResponse = {\r\n        created: [\r\n          { id: 'inv-1', invitedEmail: 'valid@test.com', status: 'PENDING' },\r\n        ],\r\n        errors: ['Email duplicate@test.com ya existe'],\r\n      };\r\n\r\n      fetch.mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockResponse,\r\n      });\r\n\r\n      const response = await fetch('/api/events/event-1/invitations', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(bulkInvitations),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      expect(response.ok).toBe(true);\r\n      expect(data.created).toHaveLength(1);\r\n      expect(data.errors).toHaveLength(1);\r\n      expect(data.errors[0]).toContain('duplicate@test.com ya existe');\r\n    });\r\n\r\n    it('debería validar límite de 50 invitaciones', async () => {\r\n      const tooManyInvitations = {\r\n        invitations: Array.from({ length: 51 }, (_, i) => ({\r\n          email: `user${i + 1}@test.com`,\r\n          name: `User ${i + 1}`,\r\n        })),\r\n      };\r\n\r\n      fetch.mockResolvedValueOnce({\r\n        ok: false,\r\n        status: 400,\r\n        json: async () => ({ error: 'Máximo 50 invitaciones por lote' }),\r\n      });\r\n\r\n      const response = await fetch('/api/events/event-1/invitations', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(tooManyInvitations),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      expect(response.ok).toBe(false);\r\n      expect(response.status).toBe(400);\r\n      expect(data.error).toContain('Máximo 50 invitaciones');\r\n    });\r\n  });\r\n\r\n  describe('Validaciones de Email', () => {\r\n    it('debería validar formato de email', () => {\r\n      const validEmails = [\r\n        'test@example.com',\r\n        'user.name@domain.co.uk',\r\n        'user+tag@example.org',\r\n      ];\r\n\r\n      const invalidEmails = [\r\n        'not-an-email',\r\n        '@example.com',\r\n        'user@',\r\n        'user space@example.com',\r\n      ];\r\n\r\n      validEmails.forEach(email => {\r\n        const isValid = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\r\n        expect(isValid).toBe(true);\r\n      });\r\n\r\n      invalidEmails.forEach(email => {\r\n        const isValid = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\r\n        expect(isValid).toBe(false);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Procesamiento de Texto para Invitaciones Masivas', () => {\r\n    it('debería extraer emails de texto', () => {\r\n      const textInput = `\r\n        user1@test.com, User One\r\n        user2@test.com, User Two\r\n        user3@test.com\r\n        invalid-email-here\r\n        user4@example.org, User Four\r\n      `;\r\n\r\n      // Simulamos el procesamiento que haría el componente\r\n      const lines = textInput.split('\\n').filter(line => line.trim());\r\n      const validEmails = [];\r\n\r\n      lines.forEach(line => {\r\n        const emailMatch = line.match(/([^\\s@]+@[^\\s@]+\\.[^\\s@]+)/);\r\n        if (emailMatch) {\r\n          const email = emailMatch[1];\r\n          const name = line.replace(email, '').replace(',', '').trim() || undefined;\r\n          validEmails.push({ email, name });\r\n        }\r\n      });\r\n\r\n      expect(validEmails).toHaveLength(4);\r\n      expect(validEmails[0]).toEqual({ email: 'user1@test.com', name: 'User One' });\r\n      expect(validEmails[1]).toEqual({ email: 'user2@test.com', name: 'User Two' });\r\n      expect(validEmails[2]).toEqual({ email: 'user3@test.com', name: undefined });\r\n      expect(validEmails[3]).toEqual({ email: 'user4@example.org', name: 'User Four' });\r\n    });\r\n\r\n    it('debería manejar diferentes formatos de entrada', () => {\r\n      const formats = [\r\n        'user1@test.com',\r\n        'user2@test.com, User Two',\r\n        'User Three <user3@test.com>',\r\n        'user4@test.com; User Four',\r\n      ];\r\n\r\n      formats.forEach(format => {\r\n        const emailMatch = format.match(/([^\\s@]+@[^\\s@]+\\.[^\\s@]+)/);\r\n        expect(emailMatch).toBeTruthy();\r\n        expect(emailMatch[1]).toMatch(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Estados de Invitación', () => {\r\n    it('debería manejar diferentes estados de invitación', () => {\r\n      const validStatuses = ['PENDING', 'SENT', 'ACCEPTED', 'EXPIRED'];\r\n      \r\n      validStatuses.forEach(status => {\r\n        expect(['PENDING', 'SENT', 'ACCEPTED', 'EXPIRED']).toContain(status);\r\n      });\r\n    });\r\n\r\n    it('debería calcular si una invitación está expirada', () => {\r\n      const now = new Date();\r\n      const futureDate = new Date(now.getTime() + 24 * 60 * 60 * 1000); // +1 día\r\n      const pastDate = new Date(now.getTime() - 24 * 60 * 60 * 1000); // -1 día\r\n\r\n      const activInvitation = {\r\n        expiresAt: futureDate.toISOString(),\r\n        status: 'PENDING',\r\n      };\r\n\r\n      const expiredInvitation = {\r\n        expiresAt: pastDate.toISOString(),\r\n        status: 'PENDING',\r\n      };\r\n\r\n      expect(new Date(activInvitation.expiresAt) > now).toBe(true);\r\n      expect(new Date(expiredInvitation.expiresAt) < now).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Generación de Códigos de Invitación', () => {\r\n    it('debería generar códigos únicos', () => {\r\n      // Simulamos la generación de códigos como lo haría el backend\r\n      const generateCode = () => {\r\n        return Math.random().toString(36).substring(2, 10).toUpperCase();\r\n      };\r\n\r\n      const codes = new Set();\r\n      for (let i = 0; i < 100; i++) {\r\n        const code = generateCode();\r\n        expect(code).toMatch(/^[A-Z0-9]{8}$/);\r\n        codes.add(code);\r\n      }\r\n\r\n      // La mayoría deberían ser únicos (permite algunas colisiones raras)\r\n      expect(codes.size).toBeGreaterThan(90);\r\n    });\r\n  });\r\n});\r\n"],"mappings":"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","ignoreList":[]}