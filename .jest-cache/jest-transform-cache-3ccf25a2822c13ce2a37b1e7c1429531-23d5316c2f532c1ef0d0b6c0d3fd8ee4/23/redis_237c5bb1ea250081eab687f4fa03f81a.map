{"file":"C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\lib\\redis.ts","mappings":"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","names":[],"sources":["C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\lib\\redis.ts"],"sourcesContent":["import { Redis } from 'ioredis';\r\nimport { logger } from './logger';\r\n\r\n\r\nexport interface UserProfile {\r\n  id: string;\r\n  clerkId: string;\r\n  email: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  bio?: string;\r\n  producerName?: string;\r\n  websiteUrl?: string;\r\n  twitterUrl?: string;\r\n  instagramUrl?: string;\r\n  role: string;\r\n}\r\n\r\nexport interface UserPermissions {\r\n  canCreateEvents: boolean;\r\n  canAccessAdmin: boolean;\r\n  canScanTickets: boolean;\r\n  canManageUsers: boolean;\r\n}\r\n\r\nexport interface MonthlyStats {\r\n  name: string;\r\n  ingresos: number;\r\n  eventos: number;\r\n  tickets: number;\r\n}\r\n\r\nexport type DashboardStats = MonthlyStats[];\r\n\r\nexport interface EventData {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  startDate: Date;\r\n  endDate: Date;\r\n  categoryId: string;\r\n  organizerId: string;\r\n}\r\n\r\n\r\nconst getRedisConfig = () => {\r\n  \r\n  if (process.env.REDIS_URL) {\r\n    return {\r\n      connectionName: 'vercel-redis',\r\n      lazyConnect: true,\r\n      retryDelayOnFailover: 100,\r\n      enableReadyCheck: false,\r\n      maxRetriesPerRequest: 3,\r\n      \r\n      connectTimeout: 60000,\r\n      commandTimeout: 5000,\r\n      keepAlive: 30000,\r\n      \r\n      family: 4,\r\n      \r\n      enableAutoPipelining: true,\r\n      \r\n      compression: 'gzip',\r\n    };\r\n  }\r\n  \r\n  \r\n  return {\r\n    host: process.env.REDIS_HOST || 'localhost',\r\n    port: parseInt(process.env.REDIS_PORT || '6379'),\r\n    password: process.env.REDIS_PASSWORD,\r\n    db: parseInt(process.env.REDIS_DB || '0'),\r\n    retryDelayOnFailover: 100,\r\n    enableReadyCheck: false,\r\n    maxRetriesPerRequest: 3,\r\n    lazyConnect: true,\r\n    \r\n    connectTimeout: 60000,\r\n    commandTimeout: 5000,\r\n    keepAlive: 30000,\r\n    \r\n    family: 4,\r\n    \r\n    enableAutoPipelining: true,\r\n  };\r\n};\r\n\r\n\r\nconst redis = process.env.REDIS_URL \r\n  ? new Redis(process.env.REDIS_URL, getRedisConfig())\r\n  : new Redis(getRedisConfig());\r\n\r\n\r\nredis.on('connect', () => {\r\n  logger.info('✅ Redis connected successfully');\r\n});\r\n\r\nredis.on('error', (error) => {\r\n  logger.error('❌ Redis connection error', error);\r\n});\r\n\r\nredis.on('close', () => {\r\n  logger.info('🔌 Redis connection closed');\r\n});\r\n\r\n\r\nexport class CacheService {\r\n  private static instance: CacheService;\r\n  private redis: Redis;\r\n\r\n  private constructor() {\r\n    this.redis = redis;\r\n  }\r\n\r\n  public static getInstance(): CacheService {\r\n    if (!CacheService.instance) {\r\n      CacheService.instance = new CacheService();\r\n    }\r\n    return CacheService.instance;\r\n  }\r\n\r\n  \r\n  async get<T>(key: string): Promise<T | null> {\r\n    try {\r\n      const cached = await this.redis.get(key);\r\n      if (!cached) return null;\r\n      \r\n      // Try to parse as JSON, if it fails, return the string directly\r\n      try {\r\n        return JSON.parse(cached);\r\n      } catch {\r\n        // If it's not valid JSON, return the value directly\r\n        return cached as T;\r\n      }\r\n    } catch (error) {\r\n      logger.error(`Error getting cache key ${key}`, error as Error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async set(key: string, value: unknown, ttlSeconds?: number): Promise<void> {\r\n    try {\r\n      const serialized = JSON.stringify(value);\r\n      if (ttlSeconds) {\r\n        await this.redis.setex(key, ttlSeconds, serialized);\r\n      } else {\r\n        await this.redis.set(key, serialized);\r\n      }\r\n    } catch (error) {\r\n  logger.error(`Error setting cache key ${key}`, error as Error);\r\n    }\r\n  }\r\n\r\n  async del(key: string): Promise<void> {\r\n    try {\r\n      await this.redis.del(key);\r\n    } catch (error) {\r\n  logger.error(`Error deleting cache key ${key}`, error as Error);\r\n    }\r\n  }\r\n\r\n  async invalidatePattern(pattern: string): Promise<void> {\r\n    try {\r\n      const keys = await this.redis.keys(pattern);\r\n      if (keys.length > 0) {\r\n        await this.redis.del(...keys);\r\n      }\r\n    } catch (error) {\r\n  logger.error(`Error invalidating pattern ${pattern}`, error as Error);\r\n    }\r\n  }\r\n\r\n  \r\n  async getUserRole(clerkId: string): Promise<string | null> {\r\n    return this.get(`user:role:${clerkId}`);\r\n  }\r\n\r\n  async setUserRole(clerkId: string, role: string, ttl = 3600): Promise<void> {\r\n    await this.set(`user:role:${clerkId}`, role, ttl);\r\n  }\r\n\r\n  async getUserProfile(clerkId: string): Promise<UserProfile | null> {\r\n    return this.get(`user:profile:${clerkId}`);\r\n  }\r\n\r\n  async setUserProfile(clerkId: string, profile: UserProfile, ttl = 1800): Promise<void> {\r\n    await this.set(`user:profile:${clerkId}`, profile, ttl);\r\n  }\r\n\r\n  \r\n  async getUserFullData(clerkId: string): Promise<UserProfile | null> {\r\n    return this.get(`user:full:${clerkId}`);\r\n  }\r\n\r\n  async setUserFullData(clerkId: string, userData: UserProfile, ttl = 3600): Promise<void> {\r\n    await this.set(`user:full:${clerkId}`, userData, ttl);\r\n  }\r\n\r\n  async getUserPermissions(clerkId: string): Promise<UserPermissions | null> {\r\n    return this.get(`user:permissions:${clerkId}`);\r\n  }\r\n\r\n  async setUserPermissions(clerkId: string, permissions: UserPermissions, ttl = 3600): Promise<void> {\r\n    await this.set(`user:permissions:${clerkId}`, permissions, ttl);\r\n  }\r\n\r\n  \r\n  async setUserBatch(clerkId: string, userData: UserProfile, ttl = 3600): Promise<void> {\r\n    const pipeline = this.redis.pipeline();\r\n    pipeline.setex(`user:full:${clerkId}`, ttl, JSON.stringify(userData));\r\n    pipeline.setex(`user:role:${clerkId}`, ttl, userData.role);\r\n    pipeline.setex(`user:profile:${clerkId}`, ttl, JSON.stringify(userData));\r\n    await pipeline.exec();\r\n  }\r\n\r\n  async invalidateUserCache(clerkId: string): Promise<void> {\r\n    await this.invalidatePattern(`user:*:${clerkId}`);\r\n  }\r\n\r\n  async getEvents(query: string): Promise<EventData[] | null> {\r\n    return this.get(`events:${query}`);\r\n  }\r\n\r\n  async setEvents(query: string, events: EventData[], ttl = 600): Promise<void> {\r\n    await this.set(`events:${query}`, events, ttl);\r\n  }\r\n\r\n  async invalidateEventsCache(): Promise<void> {\r\n    await this.invalidatePattern('events:*');\r\n  }\r\n\r\n  async getDashboardStats(userId: string): Promise<DashboardStats | null> {\r\n    return this.get(`dashboard:stats:${userId}`);\r\n  }\r\n\r\n  async setDashboardStats(userId: string, stats: DashboardStats, ttl = 300): Promise<void> {\r\n    await this.set(`dashboard:stats:${userId}`, stats, ttl);\r\n  }\r\n\r\n  async invalidateDashboardStats(userId?: string): Promise<void> {\r\n    if (userId) {\r\n      await this.del(`dashboard:stats:${userId}`);\r\n    } else {\r\n      await this.invalidatePattern('dashboard:stats:*');\r\n    }\r\n  }\r\n\r\n  \r\n  async incrementRateLimit(key: string, windowSeconds: number, limit: number): Promise<{ allowed: boolean; remaining: number }> {\r\n    try {\r\n      const current = await this.redis.incr(key);\r\n      if (current === 1) {\r\n        await this.redis.expire(key, windowSeconds);\r\n      }\r\n      \r\n      return {\r\n        allowed: current <= limit,\r\n        remaining: Math.max(0, limit - current)\r\n      };\r\n    } catch (error) {\r\n  logger.error(`Error checking rate limit for ${key}`, error as Error);\r\n      return { allowed: true, remaining: limit };\r\n    }\r\n  }\r\n\r\n  \r\n  async setSession(sessionId: string, data: Record<string, unknown>, ttl = 86400): Promise<void> {\r\n    await this.set(`session:${sessionId}`, data, ttl);\r\n  }\r\n\r\n  async getSession(sessionId: string): Promise<Record<string, unknown> | null> {\r\n    return this.get(`session:${sessionId}`);\r\n  }\r\n\r\n  async deleteSession(sessionId: string): Promise<void> {\r\n    await this.del(`session:${sessionId}`);\r\n  }\r\n\r\n  \r\n  async ping(): Promise<boolean> {\r\n    try {\r\n      const response = await this.redis.ping();\r\n      return response === 'PONG';\r\n    } catch (error) {\r\n  logger.error('Redis ping failed', error as Error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  \r\n  async disconnect(): Promise<void> {\r\n    try {\r\n      await this.redis.quit();\r\n    } catch (error) {\r\n  logger.error('Error disconnecting from Redis:', error as Error);\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport const cache = CacheService.getInstance();\r\nexport default redis;\r\n"],"version":3}