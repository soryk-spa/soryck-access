2e5ec89f883f993dcb32c6b76d0a0cf1
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('@clerk/nextjs/server', () => ({ auth: jest.fn() }));
jest.mock('../../lib/prisma', () => ({ prisma: { user: { findUnique: jest.fn() } } }));
jest.mock('../../lib/redis', () => ({
    CacheService: {
        getInstance: () => ({
            getUserRole: jest.fn(),
            setUserRole: jest.fn(),
        })
    }
}));
const auth_1 = require("../../lib/auth");
const server_1 = require("@clerk/nextjs/server");
const prisma_1 = require("../../lib/prisma");
describe('auth.getCurrentUserRole', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('returns role from cache when present', async () => {
        ;
        server_1.auth.mockResolvedValue({ userId: 'clerk_1' });
        const cache = (await Promise.resolve().then(() => __importStar(require('../../lib/redis')))).CacheService.getInstance();
        cache.getUserRole.mockResolvedValue('ADMIN');
        const role = await (0, auth_1.getCurrentUserRole)();
        expect(role).toBe('ADMIN');
    });
    it('falls back to db when cache missing', async () => {
        ;
        server_1.auth.mockResolvedValue({ userId: 'clerk_2' });
        const cache = (await Promise.resolve().then(() => __importStar(require('../../lib/redis')))).CacheService.getInstance();
        cache.getUserRole.mockResolvedValue(null);
        prisma_1.prisma.user.findUnique.mockResolvedValue({ role: 'ORGANIZER', id: 'u1' });
        const role = await (0, auth_1.getCurrentUserRole)();
        expect(role).toBe('ORGANIZER');
        expect(cache.setUserRole).toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxCaWx1clxcRG9jdW1lbnRzXFxEZXZlbG9wbWVudFxcTmV4dFxcc29yeWNrLWFjY2Vzc1xcc3JjXFxfX3Rlc3RzX19cXGxpYlxcYXV0aC50ZXN0LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUM5RCxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUN0RixJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDbEMsWUFBWSxFQUFFO1FBQ1osV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDbEIsV0FBVyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDdEIsV0FBVyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7U0FDdkIsQ0FBQztLQUNIO0NBQ0YsQ0FBQyxDQUFDLENBQUE7QUFFSCx5Q0FBbUQ7QUFDbkQsaURBQTJDO0FBQzNDLDZDQUF5QztBQUV6QyxRQUFRLENBQUMseUJBQXlCLEVBQUUsR0FBRyxFQUFFO0lBQ3ZDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUE7SUFDdEIsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsc0NBQXNDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDcEQsQ0FBQztRQUFDLGFBQWtCLENBQUMsaUJBQWlCLENBQUMsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQTtRQUM3RCxNQUFNLEtBQUssR0FBRyxDQUFDLHdEQUFhLGlCQUFpQixHQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQ3pFO1FBQUMsS0FBSyxDQUFDLFdBQXlCLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUE7UUFFNUQsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFBLHlCQUFrQixHQUFFLENBQUE7UUFDdkMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUM1QixDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNuRCxDQUFDO1FBQUMsYUFBa0IsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFBO1FBQzdELE1BQU0sS0FBSyxHQUFHLENBQUMsd0RBQWEsaUJBQWlCLEdBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FDekU7UUFBQyxLQUFLLENBQUMsV0FBeUIsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FDeEQ7UUFBQyxlQUFNLENBQUMsSUFBSSxDQUFDLFVBQXdCLENBQUMsaUJBQWlCLENBQUMsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO1FBRXpGLE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBQSx5QkFBa0IsR0FBRSxDQUFBO1FBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDOUIsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFBO0lBQzlDLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxCaWx1clxcRG9jdW1lbnRzXFxEZXZlbG9wbWVudFxcTmV4dFxcc29yeWNrLWFjY2Vzc1xcc3JjXFxfX3Rlc3RzX19cXGxpYlxcYXV0aC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImplc3QubW9jaygnQGNsZXJrL25leHRqcy9zZXJ2ZXInLCAoKSA9PiAoeyBhdXRoOiBqZXN0LmZuKCkgfSkpXHJcbmplc3QubW9jaygnLi4vLi4vbGliL3ByaXNtYScsICgpID0+ICh7IHByaXNtYTogeyB1c2VyOiB7IGZpbmRVbmlxdWU6IGplc3QuZm4oKSB9IH0gfSkpXHJcbmplc3QubW9jaygnLi4vLi4vbGliL3JlZGlzJywgKCkgPT4gKHtcclxuICBDYWNoZVNlcnZpY2U6IHtcclxuICAgIGdldEluc3RhbmNlOiAoKSA9PiAoe1xyXG4gICAgICBnZXRVc2VyUm9sZTogamVzdC5mbigpLFxyXG4gICAgICBzZXRVc2VyUm9sZTogamVzdC5mbigpLFxyXG4gICAgfSlcclxuICB9XHJcbn0pKVxyXG5cclxuaW1wb3J0IHsgZ2V0Q3VycmVudFVzZXJSb2xlIH0gZnJvbSAnLi4vLi4vbGliL2F1dGgnXHJcbmltcG9ydCB7IGF1dGggfSBmcm9tICdAY2xlcmsvbmV4dGpzL3NlcnZlcidcclxuaW1wb3J0IHsgcHJpc21hIH0gZnJvbSAnLi4vLi4vbGliL3ByaXNtYSdcclxuXHJcbmRlc2NyaWJlKCdhdXRoLmdldEN1cnJlbnRVc2VyUm9sZScsICgpID0+IHtcclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpXHJcbiAgfSlcclxuXHJcbiAgaXQoJ3JldHVybnMgcm9sZSBmcm9tIGNhY2hlIHdoZW4gcHJlc2VudCcsIGFzeW5jICgpID0+IHtcclxuICAgIDsoYXV0aCBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHsgdXNlcklkOiAnY2xlcmtfMScgfSlcclxuICAgIGNvbnN0IGNhY2hlID0gKGF3YWl0IGltcG9ydCgnLi4vLi4vbGliL3JlZGlzJykpLkNhY2hlU2VydmljZS5nZXRJbnN0YW5jZSgpXHJcbiAgICA7KGNhY2hlLmdldFVzZXJSb2xlIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoJ0FETUlOJylcclxuXHJcbiAgICBjb25zdCByb2xlID0gYXdhaXQgZ2V0Q3VycmVudFVzZXJSb2xlKClcclxuICAgIGV4cGVjdChyb2xlKS50b0JlKCdBRE1JTicpXHJcbiAgfSlcclxuXHJcbiAgaXQoJ2ZhbGxzIGJhY2sgdG8gZGIgd2hlbiBjYWNoZSBtaXNzaW5nJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgOyhhdXRoIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoeyB1c2VySWQ6ICdjbGVya18yJyB9KVxyXG4gICAgY29uc3QgY2FjaGUgPSAoYXdhaXQgaW1wb3J0KCcuLi8uLi9saWIvcmVkaXMnKSkuQ2FjaGVTZXJ2aWNlLmdldEluc3RhbmNlKClcclxuICAgIDsoY2FjaGUuZ2V0VXNlclJvbGUgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZShudWxsKVxyXG4gICAgOyhwcmlzbWEudXNlci5maW5kVW5pcXVlIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoeyByb2xlOiAnT1JHQU5JWkVSJywgaWQ6ICd1MScgfSlcclxuXHJcbiAgICBjb25zdCByb2xlID0gYXdhaXQgZ2V0Q3VycmVudFVzZXJSb2xlKClcclxuICAgIGV4cGVjdChyb2xlKS50b0JlKCdPUkdBTklaRVInKVxyXG4gICAgZXhwZWN0KGNhY2hlLnNldFVzZXJSb2xlKS50b0hhdmVCZWVuQ2FsbGVkKClcclxuICB9KVxyXG59KVxyXG4iXSwidmVyc2lvbiI6M30=