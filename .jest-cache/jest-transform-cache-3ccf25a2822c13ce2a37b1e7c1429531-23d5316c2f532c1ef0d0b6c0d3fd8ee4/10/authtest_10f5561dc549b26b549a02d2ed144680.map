{"file":"C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\__tests__\\lib\\auth.test.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAA;AAC9D,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAA;AACtF,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,GAAG,EAAE,CAAC,CAAC;IAClC,YAAY,EAAE;QACZ,WAAW,EAAE,GAAG,EAAE,CAAC,CAAC;YAClB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;YACtB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;SACvB,CAAC;KACH;CACF,CAAC,CAAC,CAAA;AAEH,yCAAmD;AACnD,iDAA2C;AAC3C,6CAAyC;AAEzC,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACvC,UAAU,CAAC,GAAG,EAAE;QACd,IAAI,CAAC,aAAa,EAAE,CAAA;IACtB,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;QACpD,CAAC;QAAC,aAAkB,CAAC,iBAAiB,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,CAAA;QAC7D,MAAM,KAAK,GAAG,CAAC,wDAAa,iBAAiB,GAAC,CAAC,CAAC,YAAY,CAAC,WAAW,EAAE,CACzE;QAAC,KAAK,CAAC,WAAyB,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAA;QAE5D,MAAM,IAAI,GAAG,MAAM,IAAA,yBAAkB,GAAE,CAAA;QACvC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IAC5B,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;QACnD,CAAC;QAAC,aAAkB,CAAC,iBAAiB,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,CAAA;QAC7D,MAAM,KAAK,GAAG,CAAC,wDAAa,iBAAiB,GAAC,CAAC,CAAC,YAAY,CAAC,WAAW,EAAE,CACzE;QAAC,KAAK,CAAC,WAAyB,CAAC,iBAAiB,CAAC,IAAI,CAAC,CACxD;QAAC,eAAM,CAAC,IAAI,CAAC,UAAwB,CAAC,iBAAiB,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAA;QAEzF,MAAM,IAAI,GAAG,MAAM,IAAA,yBAAkB,GAAE,CAAA;QACvC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QAC9B,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,gBAAgB,EAAE,CAAA;IAC9C,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","names":[],"sources":["C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\__tests__\\lib\\auth.test.ts"],"sourcesContent":["jest.mock('@clerk/nextjs/server', () => ({ auth: jest.fn() }))\r\njest.mock('../../lib/prisma', () => ({ prisma: { user: { findUnique: jest.fn() } } }))\r\njest.mock('../../lib/redis', () => ({\r\n  CacheService: {\r\n    getInstance: () => ({\r\n      getUserRole: jest.fn(),\r\n      setUserRole: jest.fn(),\r\n    })\r\n  }\r\n}))\r\n\r\nimport { getCurrentUserRole } from '../../lib/auth'\r\nimport { auth } from '@clerk/nextjs/server'\r\nimport { prisma } from '../../lib/prisma'\r\n\r\ndescribe('auth.getCurrentUserRole', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  it('returns role from cache when present', async () => {\r\n    ;(auth as jest.Mock).mockResolvedValue({ userId: 'clerk_1' })\r\n    const cache = (await import('../../lib/redis')).CacheService.getInstance()\r\n    ;(cache.getUserRole as jest.Mock).mockResolvedValue('ADMIN')\r\n\r\n    const role = await getCurrentUserRole()\r\n    expect(role).toBe('ADMIN')\r\n  })\r\n\r\n  it('falls back to db when cache missing', async () => {\r\n    ;(auth as jest.Mock).mockResolvedValue({ userId: 'clerk_2' })\r\n    const cache = (await import('../../lib/redis')).CacheService.getInstance()\r\n    ;(cache.getUserRole as jest.Mock).mockResolvedValue(null)\r\n    ;(prisma.user.findUnique as jest.Mock).mockResolvedValue({ role: 'ORGANIZER', id: 'u1' })\r\n\r\n    const role = await getCurrentUserRole()\r\n    expect(role).toBe('ORGANIZER')\r\n    expect(cache.setUserRole).toHaveBeenCalled()\r\n  })\r\n})\r\n"],"version":3}