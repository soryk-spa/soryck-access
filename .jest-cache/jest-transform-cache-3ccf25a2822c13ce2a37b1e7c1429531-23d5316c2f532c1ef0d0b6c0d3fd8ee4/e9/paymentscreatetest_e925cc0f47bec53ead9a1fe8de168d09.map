{"file":"C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\__tests__\\api\\payments.create.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\__tests__\\api\\payments.create.test.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\njest.mock('next/server', () => ({ NextResponse: { json: (body: any, opts?: any) => ({ status: opts?.status || 200, body }) } }))\r\n\r\n// Mocks\r\nconst mockUser = { id: 'user_1', email: 'u@u.com', firstName: 'U' }\r\njest.mock('@/lib/auth', () => ({ requireAuth: jest.fn().mockResolvedValue(mockUser) }))\r\n\r\nconst mockWebpay = { create: jest.fn() }\r\njest.mock('@/lib/transbank', () => ({ webpayPlus: mockWebpay }))\r\n\r\nconst mockCalculate = {\r\n  calculatePriceBreakdown: jest.fn(),\r\n  calculatePriceBreakdownWithDiscount: jest.fn()\r\n}\r\njest.mock('@/lib/commission', () => mockCalculate)\r\n\r\nconst mockDiscount = {\r\n  DiscountCodeService: {\r\n    validateDiscountCode: jest.fn(),\r\n    applyCodeUsage: jest.fn()\r\n  }\r\n}\r\njest.mock('@/lib/discount-codes', () => mockDiscount)\r\n\r\nconst mockPrisma = {\r\n  ticketType: { findUnique: jest.fn() },\r\n  ticket: { count: jest.fn(), createMany: jest.fn() },\r\n  event: { findUnique: jest.fn() },\r\n  order: { create: jest.fn(), update: jest.fn(), findUnique: jest.fn() },\r\n  payment: { create: jest.fn() },\r\n  $transaction: jest.fn()\r\n}\r\njest.mock('@/lib/prisma', () => ({ prisma: mockPrisma }))\r\n\r\njest.mock('@/lib/qr', () => ({ generateUniqueQRCode: jest.fn().mockReturnValue('QR123') }))\r\njest.mock('@/lib/email', () => ({ sendTicketEmail: jest.fn() }))\r\n\r\nimport { requireAuth } from '@/lib/auth'\r\nimport type { NextRequest } from 'next/server'\r\n\r\n// Minimal response shape used by the mocked NextResponse in tests\r\ntype ResponseLike = { status: number; body: any }\r\n\r\ndescribe('POST /api/payments/create', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  it('returns 400 when body is invalid', async () => {\r\n    // requireAuth will resolve to mockUser\r\n    const req = { json: async () => ({ quantity: 2 }) }\r\n  const { POST } = await import('../../../src/app/api/payments/create/route')\r\n  const res = (await POST(req as unknown as NextRequest)) as unknown as ResponseLike\r\n  expect(res.status).toBe(400)\r\n  expect(res.body.error).toBeDefined()\r\n  })\r\n\r\n  it('creates a payment and returns transbank url and token for paid order', async () => {\r\n    // Setup ticket type and event\r\n    const ticketType = {\r\n      id: 'tt1',\r\n      price: 5000,\r\n      ticketsGenerated: 1,\r\n      capacity: 100,\r\n      event: { id: 'e1', isPublished: true, currency: 'CLP' }\r\n    }\r\n    mockPrisma.ticketType.findUnique.mockResolvedValue(ticketType)\r\n    mockPrisma.ticket.count.mockResolvedValue(0)\r\n\r\n    // Price breakdown\r\n    mockCalculate.calculatePriceBreakdown.mockReturnValue({ basePrice: 5000, commission: 0, totalPrice: 5000, originalAmount: 5000, discountAmount: 0 })\r\n\r\n    // Order creation\r\n    const createdOrder = { id: 'order_1', orderNumber: 'SP123', quantity: 1 }\r\n    mockPrisma.order.create.mockResolvedValue(createdOrder)\r\n\r\n    // Webpay responds\r\n    mockWebpay.create.mockResolvedValue({ url: 'https://webpay.test/checkout', token: 'tok_123' })\r\n\r\n    // Payment create\r\n    mockPrisma.payment.create.mockResolvedValue({ id: 'pay_1' })\r\n\r\n    const reqBody = { ticketTypeId: 'tt1', quantity: 1 }\r\n    const req = { json: async () => reqBody }\r\n\r\n    const { POST } = await import('../../../src/app/api/payments/create/route')\r\n  const res = (await POST(req as unknown as NextRequest)) as unknown as ResponseLike\r\n\r\n  expect(res.status).toBe(200)\r\n  expect(res.body.success).toBe(true)\r\n  expect(res.body.paymentUrl).toBe('https://webpay.test/checkout')\r\n  expect(res.body.token).toBe('tok_123')\r\n  expect(mockWebpay.create).toHaveBeenCalled()\r\n  expect(mockPrisma.payment.create).toHaveBeenCalled()\r\n  })\r\n\r\n  it('applies promo code for a discounted paid order', async () => {\r\n    const ticketType = {\r\n      id: 'tt1',\r\n      price: 5000,\r\n      ticketsGenerated: 1,\r\n      capacity: 100,\r\n      event: { id: 'e1', isPublished: true, currency: 'CLP' }\r\n    }\r\n    mockPrisma.ticketType.findUnique.mockResolvedValueOnce(ticketType)\r\n    mockPrisma.ticket.count.mockResolvedValueOnce(0)\r\n\r\n    // promo gives 1000 CLP off\r\n    const discountAmount = 1000\r\n    mockDiscount.DiscountCodeService.validateDiscountCode.mockResolvedValueOnce({ isValid: true, discountAmount, code: 'PROMO1', type: 'FIXED' })\r\n    mockCalculate.calculatePriceBreakdownWithDiscount.mockReturnValueOnce({ basePrice: 4000, commission: 0, totalPrice: 4000, originalAmount: 5000, discountAmount })\r\n\r\n    const createdOrder = { id: 'order_2', orderNumber: 'SP124', quantity: 1 }\r\n    mockPrisma.order.create.mockResolvedValueOnce(createdOrder)\r\n\r\n    mockWebpay.create.mockResolvedValueOnce({ url: 'https://webpay.test/checkout2', token: 'tok_456' })\r\n    mockPrisma.payment.create.mockResolvedValueOnce({ id: 'pay_2' })\r\n\r\n    const reqBody = { ticketTypeId: 'tt1', quantity: 1, promoCode: 'PROMO1' }\r\n    const req = { json: async () => reqBody }\r\n\r\n    const { POST } = await import('../../../src/app/api/payments/create/route')\r\n  const res = (await POST(req as unknown as NextRequest)) as unknown as ResponseLike\r\n\r\n  expect(res.status).toBe(200)\r\n  expect(res.body.success).toBe(true)\r\n  expect(res.body.priceBreakdown.promoCode).toBe('PROMO1')\r\n  expect(mockDiscount.DiscountCodeService.validateDiscountCode).toHaveBeenCalled()\r\n  expect(mockWebpay.create).toHaveBeenCalled()\r\n  })\r\n\r\n  it('processes free-ticket flow (final total 0) and generates tickets', async () => {\r\n    const ticketType = {\r\n      id: 'tt_free',\r\n      price: 5000,\r\n      ticketsGenerated: 1,\r\n      capacity: 100,\r\n      event: { id: 'e_free', isPublished: true, currency: 'CLP' }\r\n    }\r\n    mockPrisma.ticketType.findUnique.mockResolvedValueOnce(ticketType)\r\n    mockPrisma.ticket.count.mockResolvedValueOnce(0)\r\n\r\n    const baseTotal = 5000\r\n    // promo gives full discount so final total 0\r\n    mockDiscount.DiscountCodeService.validateDiscountCode.mockResolvedValueOnce({ isValid: true, discountAmount: baseTotal, code: 'FREE100', type: 'FIXED' })\r\n    mockCalculate.calculatePriceBreakdownWithDiscount.mockReturnValueOnce({ basePrice: 0, commission: 0, totalPrice: 0, originalAmount: baseTotal, discountAmount: baseTotal })\r\n\r\n    const createdOrder = { id: 'order_free', orderNumber: 'SPFREE', quantity: 1 }\r\n    mockPrisma.order.create.mockResolvedValueOnce(createdOrder)\r\n\r\n    // $transaction returns [resultOfCreateMany, updatedOrder]\r\n    const updatedOrder = { id: createdOrder.id, tickets: [{ qrCode: 'QR1' }] }\r\n    mockPrisma.$transaction.mockResolvedValueOnce([null, updatedOrder])\r\n\r\n    const reqBody = { ticketTypeId: 'tt_free', quantity: 1, promoCode: 'FREE100' }\r\n    const req = { json: async () => reqBody }\r\n\r\n    const { POST } = await import('../../../src/app/api/payments/create/route')\r\n  const res = (await POST(req as unknown as NextRequest)) as unknown as ResponseLike\r\n\r\n    // Mock event lookup used in handleAndGenerateTickets\r\n    const eventWithOrganizer = {\r\n      id: ticketType.event.id,\r\n      title: 'Free Event',\r\n      startDate: new Date(),\r\n      location: 'Online',\r\n      organizer: { id: 'org1', name: 'Org' }\r\n    }\r\n    // ensure prisma.event.findUnique exists on the mock\r\n    mockPrisma.event = { findUnique: jest.fn().mockResolvedValueOnce(eventWithOrganizer) }\r\n\r\n    expect(res.status).toBe(200)\r\n  expect(res.body.isFree).toBe(true)\r\n  expect(res.body.ticketsGenerated).toBeGreaterThan(0)\r\n  expect(mockDiscount.DiscountCodeService.applyCodeUsage).toHaveBeenCalled()\r\n  expect(mockPrisma.$transaction).toHaveBeenCalled()\r\n  })\r\n})\r\n"],"version":3}