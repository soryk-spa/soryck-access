2606629d80e0761ef96fdf39d867f025
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = void 0;
exports.createLogger = createLogger;
class Logger {
    constructor() {
        this.isDevelopment = process.env.NODE_ENV === 'development';
        this.minLevel = this.isDevelopment ? 'debug' : 'info';
        this.email = {
            sent: (type, recipient, subject, context) => {
                this.info(`Email sent: ${type}`, Object.assign({ type,
                    recipient,
                    subject, service: 'email' }, context));
            },
            failed: (type, recipient, error, context) => {
                this.error(`Email failed: ${type}`, error, Object.assign({ type,
                    recipient, service: 'email' }, context));
            },
            processing: (type, recipient, context) => {
                this.info(`Email processing: ${type}`, Object.assign({ type,
                    recipient, service: 'email' }, context));
            }
        };
        this.api = {
            request: (method, path, context) => {
                this.debug(`API Request: ${method} ${path}`, Object.assign({ method,
                    path, service: 'api' }, context));
            },
            response: (method, path, status, duration, context) => {
                const level = status >= 400 ? 'warn' : 'info';
                this.formatMessage(level, `API Response: ${method} ${path} - ${status}`, Object.assign({ method,
                    path,
                    status,
                    duration, service: 'api' }, context));
            },
            error: (method, path, error, context) => {
                this.error(`API Error: ${method} ${path}`, error, Object.assign({ method,
                    path, service: 'api' }, context));
            }
        };
        this.event = {
            created: (eventId, title, organizerId, context) => {
                this.info(`Event created: ${title}`, Object.assign({ eventId,
                    title,
                    organizerId, service: 'events' }, context));
            },
            updated: (eventId, title, changes, context) => {
                this.info(`Event updated: ${title}`, Object.assign({ eventId,
                    title,
                    changes, service: 'events' }, context));
            },
            deleted: (eventId, title, context) => {
                this.warn(`Event deleted: ${title}`, Object.assign({ eventId,
                    title, service: 'events' }, context));
            }
        };
        this.payment = {
            initiated: (orderId, amount, currency, context) => {
                this.info(`Payment initiated`, Object.assign({ orderId,
                    amount,
                    currency, service: 'payment' }, context));
            },
            completed: (orderId, amount, currency, context) => {
                this.info(`Payment completed`, Object.assign({ orderId,
                    amount,
                    currency, service: 'payment' }, context));
            },
            failed: (orderId, error, context) => {
                this.error(`Payment failed`, error, Object.assign({ orderId, service: 'payment' }, context));
            }
        };
    }
    levelToNumber(level) {
        const levels = { debug: 0, info: 1, warn: 2, error: 3 };
        return levels[level];
    }
    shouldLog(level) {
        return this.levelToNumber(level) >= this.levelToNumber(this.minLevel);
    }
    formatMessage(level, message, context, error) {
        if (!this.shouldLog(level))
            return;
        const timestamp = new Date().toISOString();
        const logEntry = {
            timestamp,
            level,
            message,
            context,
            error
        };
        if (this.isDevelopment) {
            const emoji = { debug: '🔍', info: 'ℹ️', warn: '⚠️', error: '❌' }[level];
            const color = { debug: '\x1b[36m', info: '\x1b[32m', warn: '\x1b[33m', error: '\x1b[31m' }[level];
            const reset = '\x1b[0m';
            console.log(`${color}${emoji} [${level.toUpperCase()}]${reset} ${message}`);
            if (context && Object.keys(context).length > 0) {
                console.log(`${color}   Context:${reset}`, context);
            }
            if (error) {
                console.error(`${color}   Error:${reset}`, error);
            }
        }
        else {
            console.log(JSON.stringify(logEntry));
        }
    }
    debug(message, context) {
        this.formatMessage('debug', message, context);
    }
    info(message, context) {
        this.formatMessage('info', message, context);
    }
    warn(message, context) {
        this.formatMessage('warn', message, context);
    }
    error(message, error, context) {
        this.formatMessage('error', message, context, error);
    }
}
exports.logger = new Logger();
function createLogger(defaultContext) {
    return {
        debug: (message, context) => exports.logger.debug(message, Object.assign(Object.assign({}, defaultContext), context)),
        info: (message, context) => exports.logger.info(message, Object.assign(Object.assign({}, defaultContext), context)),
        warn: (message, context) => exports.logger.warn(message, Object.assign(Object.assign({}, defaultContext), context)),
        error: (message, error, context) => exports.logger.error(message, error, Object.assign(Object.assign({}, defaultContext), context)),
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,