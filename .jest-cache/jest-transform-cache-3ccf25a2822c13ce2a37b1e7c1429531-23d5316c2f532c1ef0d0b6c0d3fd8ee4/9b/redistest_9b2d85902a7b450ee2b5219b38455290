17e36e527ad792e118b047d9169f96a4
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('ioredis', () => {
    return {
        default: jest.fn().mockImplementation(() => ({
            pipeline: () => ({ setex: jest.fn(), exec: jest.fn() }),
            setex: jest.fn(),
            get: jest.fn(),
            del: jest.fn(),
            keys: jest.fn().mockResolvedValue([]),
            ping: jest.fn().mockResolvedValue('PONG'),
            quit: jest.fn().mockResolvedValue(undefined),
        })),
    };
});
const redis_1 = require("../../lib/redis");
describe('CacheService basic operations', () => {
    it('setUserBatch uses pipeline and exec', async () => {
        const cache = redis_1.CacheService.getInstance();
        // Should not throw
        const user = { id: '1', clerkId: 'clerk_1', email: 'a@a.com', role: 'USER' };
        await expect(cache.setUserBatch('clerk_1', user)).resolves.toBeUndefined();
    });
    it('ping returns true when redis PONG', async () => {
        const cache = redis_1.CacheService.getInstance();
        const ok = await cache.ping();
        expect(ok).toBe(true);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxCaWx1clxcRG9jdW1lbnRzXFxEZXZlbG9wbWVudFxcTmV4dFxcc29yeWNrLWFjY2Vzc1xcc3JjXFxfX3Rlc3RzX19cXGxpYlxccmVkaXMudGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQUVBLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtJQUN4QixPQUFPO1FBQ0wsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQzNDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDdkQsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDaEIsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDZCxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNkLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDO1lBQ3JDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDO1lBQ3pDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDO1NBQzdDLENBQUMsQ0FBQztLQUNKLENBQUE7QUFDSCxDQUFDLENBQUMsQ0FBQTtBQWRGLDJDQUEyRDtBQWdCM0QsUUFBUSxDQUFDLCtCQUErQixFQUFFLEdBQUcsRUFBRTtJQUM3QyxFQUFFLENBQUMscUNBQXFDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDbkQsTUFBTSxLQUFLLEdBQUcsb0JBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtRQUV4QyxtQkFBbUI7UUFDckIsTUFBTSxJQUFJLEdBQXlCLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFBO1FBQ2xHLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLElBQW1CLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsQ0FBQTtJQUN6RixDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyxtQ0FBbUMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNqRCxNQUFNLEtBQUssR0FBRyxvQkFBWSxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBQ3hDLE1BQU0sRUFBRSxHQUFHLE1BQU0sS0FBSyxDQUFDLElBQUksRUFBRSxDQUFBO1FBQzdCLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDdkIsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXEJpbHVyXFxEb2N1bWVudHNcXERldmVsb3BtZW50XFxOZXh0XFxzb3J5Y2stYWNjZXNzXFxzcmNcXF9fdGVzdHNfX1xcbGliXFxyZWRpcy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENhY2hlU2VydmljZSwgVXNlclByb2ZpbGUgfSBmcm9tICcuLi8uLi9saWIvcmVkaXMnXHJcblxyXG5qZXN0Lm1vY2soJ2lvcmVkaXMnLCAoKSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIGRlZmF1bHQ6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcclxuICAgICAgcGlwZWxpbmU6ICgpID0+ICh7IHNldGV4OiBqZXN0LmZuKCksIGV4ZWM6IGplc3QuZm4oKSB9KSxcclxuICAgICAgc2V0ZXg6IGplc3QuZm4oKSxcclxuICAgICAgZ2V0OiBqZXN0LmZuKCksXHJcbiAgICAgIGRlbDogamVzdC5mbigpLFxyXG4gICAgICBrZXlzOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoW10pLFxyXG4gICAgICBwaW5nOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoJ1BPTkcnKSxcclxuICAgICAgcXVpdDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCksXHJcbiAgICB9KSksXHJcbiAgfVxyXG59KVxyXG5cclxuZGVzY3JpYmUoJ0NhY2hlU2VydmljZSBiYXNpYyBvcGVyYXRpb25zJywgKCkgPT4ge1xyXG4gIGl0KCdzZXRVc2VyQmF0Y2ggdXNlcyBwaXBlbGluZSBhbmQgZXhlYycsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IGNhY2hlID0gQ2FjaGVTZXJ2aWNlLmdldEluc3RhbmNlKClcclxuXHJcbiAgICAvLyBTaG91bGQgbm90IHRocm93XHJcbiAgY29uc3QgdXNlcjogUGFydGlhbDxVc2VyUHJvZmlsZT4gPSB7IGlkOiAnMScsIGNsZXJrSWQ6ICdjbGVya18xJywgZW1haWw6ICdhQGEuY29tJywgcm9sZTogJ1VTRVInIH1cclxuICBhd2FpdCBleHBlY3QoY2FjaGUuc2V0VXNlckJhdGNoKCdjbGVya18xJywgdXNlciBhcyBVc2VyUHJvZmlsZSkpLnJlc29sdmVzLnRvQmVVbmRlZmluZWQoKVxyXG4gIH0pXHJcblxyXG4gIGl0KCdwaW5nIHJldHVybnMgdHJ1ZSB3aGVuIHJlZGlzIFBPTkcnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBjYWNoZSA9IENhY2hlU2VydmljZS5nZXRJbnN0YW5jZSgpXHJcbiAgICBjb25zdCBvayA9IGF3YWl0IGNhY2hlLnBpbmcoKVxyXG4gICAgZXhwZWN0KG9rKS50b0JlKHRydWUpXHJcbiAgfSlcclxufSlcclxuIl0sInZlcnNpb24iOjN9