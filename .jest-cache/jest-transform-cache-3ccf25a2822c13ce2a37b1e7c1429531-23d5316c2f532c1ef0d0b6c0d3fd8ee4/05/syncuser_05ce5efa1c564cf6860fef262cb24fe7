db2775d903526a0323605c753b543144
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.syncUserFromClerk = syncUserFromClerk;
const server_1 = require("@clerk/nextjs/server");
const prisma_1 = require("@/lib/prisma");
const client_1 = require("@prisma/client");
async function syncUserFromClerk(clerkId) {
    var _a, _b, _c;
    try {
        const client = await (0, server_1.clerkClient)();
        const clerkUser = await client.users.getUser(clerkId);
        if (!clerkUser) {
            throw new Error('Usuario no encontrado en Clerk');
        }
        // Verificar si el usuario ya existe por clerkId
        const existingUser = await prisma_1.prisma.user.findUnique({
            where: { clerkId }
        });
        if (existingUser) {
            return existingUser;
        }
        // Obtener el email del usuario desde Clerk
        const userEmail = ((_a = clerkUser.emailAddresses[0]) === null || _a === void 0 ? void 0 : _a.emailAddress) || '';
        // Tambi√©n verificar si existe un usuario con el mismo email
        const existingUserByEmail = await prisma_1.prisma.user.findUnique({
            where: { email: userEmail }
        });
        // Si existe un usuario con el mismo email pero diferente clerkId, actualizar el clerkId
        if (existingUserByEmail && existingUserByEmail.clerkId !== clerkId) {
            console.log(`Actualizando clerkId para usuario existente: ${userEmail}`);
            const updatedUser = await prisma_1.prisma.user.update({
                where: { email: userEmail },
                data: {
                    clerkId,
                    firstName: clerkUser.firstName || existingUserByEmail.firstName,
                    lastName: clerkUser.lastName || existingUserByEmail.lastName,
                    imageUrl: clerkUser.imageUrl || existingUserByEmail.imageUrl,
                }
            });
            return updatedUser;
        }
        let userRole = client_1.UserRole.CLIENT;
        if (clerkUser.publicMetadata && typeof clerkUser.publicMetadata === 'object' && 'role' in clerkUser.publicMetadata) {
            const metadataRole = clerkUser.publicMetadata.role;
            if (Object.values(client_1.UserRole).includes(metadataRole)) {
                userRole = metadataRole;
            }
        }
        const userCount = await prisma_1.prisma.user.count();
        if (userCount === 0) {
            userRole = client_1.UserRole.ADMIN;
        }
        const organizerEmails = ((_b = process.env.ORGANIZER_EMAILS) === null || _b === void 0 ? void 0 : _b.split(',')) || [];
        const adminEmails = ((_c = process.env.ADMIN_EMAILS) === null || _c === void 0 ? void 0 : _c.split(',')) || [];
        if (adminEmails.includes(userEmail)) {
            userRole = client_1.UserRole.ADMIN;
        }
        else if (organizerEmails.includes(userEmail)) {
            userRole = client_1.UserRole.ORGANIZER;
        }
        // Crear el nuevo usuario (ya no hay conflictos posibles)
        const newUser = await prisma_1.prisma.user.create({
            data: {
                clerkId,
                email: userEmail,
                firstName: clerkUser.firstName || '',
                lastName: clerkUser.lastName || '',
                imageUrl: clerkUser.imageUrl || '',
                role: userRole,
            },
        });
        console.log(`Usuario sincronizado: ${clerkId} con rol: ${userRole}`);
        return newUser;
    }
    catch (error) {
        console.error('Error sincronizando usuario:', error);
        throw error;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxCaWx1clxcRG9jdW1lbnRzXFxEZXZlbG9wbWVudFxcTmV4dFxcc29yeWNrLWFjY2Vzc1xcc3JjXFxsaWJcXHN5bmMtdXNlci50cyIsIm1hcHBpbmdzIjoiOztBQUlBLDhDQW1GQztBQXZGRCxpREFBa0Q7QUFDbEQseUNBQXFDO0FBQ3JDLDJDQUF5QztBQUVsQyxLQUFLLFVBQVUsaUJBQWlCLENBQUMsT0FBZTs7SUFDckQsSUFBSSxDQUFDO1FBQ0gsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFBLG9CQUFXLEdBQUUsQ0FBQTtRQUNsQyxNQUFNLFNBQVMsR0FBRyxNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRXJELElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQTtRQUNuRCxDQUFDO1FBRUQsZ0RBQWdEO1FBQ2hELE1BQU0sWUFBWSxHQUFHLE1BQU0sZUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7WUFDaEQsS0FBSyxFQUFFLEVBQUUsT0FBTyxFQUFFO1NBQ25CLENBQUMsQ0FBQTtRQUVGLElBQUksWUFBWSxFQUFFLENBQUM7WUFDakIsT0FBTyxZQUFZLENBQUE7UUFDckIsQ0FBQztRQUVELDJDQUEyQztRQUMzQyxNQUFNLFNBQVMsR0FBRyxDQUFBLE1BQUEsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsMENBQUUsWUFBWSxLQUFJLEVBQUUsQ0FBQTtRQUVqRSw0REFBNEQ7UUFDNUQsTUFBTSxtQkFBbUIsR0FBRyxNQUFNLGVBQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQ3ZELEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUU7U0FDNUIsQ0FBQyxDQUFBO1FBRUYsd0ZBQXdGO1FBQ3hGLElBQUksbUJBQW1CLElBQUksbUJBQW1CLENBQUMsT0FBTyxLQUFLLE9BQU8sRUFBRSxDQUFDO1lBQ25FLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0RBQWdELFNBQVMsRUFBRSxDQUFDLENBQUE7WUFDeEUsTUFBTSxXQUFXLEdBQUcsTUFBTSxlQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztnQkFDM0MsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRTtnQkFDM0IsSUFBSSxFQUFFO29CQUNKLE9BQU87b0JBQ1AsU0FBUyxFQUFFLFNBQVMsQ0FBQyxTQUFTLElBQUksbUJBQW1CLENBQUMsU0FBUztvQkFDL0QsUUFBUSxFQUFFLFNBQVMsQ0FBQyxRQUFRLElBQUksbUJBQW1CLENBQUMsUUFBUTtvQkFDNUQsUUFBUSxFQUFFLFNBQVMsQ0FBQyxRQUFRLElBQUksbUJBQW1CLENBQUMsUUFBUTtpQkFDN0Q7YUFDRixDQUFDLENBQUE7WUFDRixPQUFPLFdBQVcsQ0FBQTtRQUNwQixDQUFDO1FBRUQsSUFBSSxRQUFRLEdBQWEsaUJBQVEsQ0FBQyxNQUFNLENBQUE7UUFFeEMsSUFBSSxTQUFTLENBQUMsY0FBYyxJQUFJLE9BQU8sU0FBUyxDQUFDLGNBQWMsS0FBSyxRQUFRLElBQUksTUFBTSxJQUFJLFNBQVMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUNuSCxNQUFNLFlBQVksR0FBRyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQWMsQ0FBQTtZQUM1RCxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsaUJBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxZQUF3QixDQUFDLEVBQUUsQ0FBQztnQkFDL0QsUUFBUSxHQUFHLFlBQXdCLENBQUE7WUFDckMsQ0FBQztRQUNILENBQUM7UUFFRCxNQUFNLFNBQVMsR0FBRyxNQUFNLGVBQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUE7UUFDM0MsSUFBSSxTQUFTLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDcEIsUUFBUSxHQUFHLGlCQUFRLENBQUMsS0FBSyxDQUFBO1FBQzNCLENBQUM7UUFFRCxNQUFNLGVBQWUsR0FBRyxDQUFBLE1BQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsMENBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFJLEVBQUUsQ0FBQTtRQUN0RSxNQUFNLFdBQVcsR0FBRyxDQUFBLE1BQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLDBDQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSSxFQUFFLENBQUE7UUFFOUQsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUM7WUFDcEMsUUFBUSxHQUFHLGlCQUFRLENBQUMsS0FBSyxDQUFBO1FBQzNCLENBQUM7YUFBTSxJQUFJLGVBQWUsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztZQUMvQyxRQUFRLEdBQUcsaUJBQVEsQ0FBQyxTQUFTLENBQUE7UUFDL0IsQ0FBQztRQUVELHlEQUF5RDtRQUN6RCxNQUFNLE9BQU8sR0FBRyxNQUFNLGVBQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQ3ZDLElBQUksRUFBRTtnQkFDSixPQUFPO2dCQUNQLEtBQUssRUFBRSxTQUFTO2dCQUNoQixTQUFTLEVBQUUsU0FBUyxDQUFDLFNBQVMsSUFBSSxFQUFFO2dCQUNwQyxRQUFRLEVBQUUsU0FBUyxDQUFDLFFBQVEsSUFBSSxFQUFFO2dCQUNsQyxRQUFRLEVBQUUsU0FBUyxDQUFDLFFBQVEsSUFBSSxFQUFFO2dCQUNsQyxJQUFJLEVBQUUsUUFBUTthQUNmO1NBQ0YsQ0FBQyxDQUFBO1FBRUYsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsT0FBTyxhQUFhLFFBQVEsRUFBRSxDQUFDLENBQUE7UUFDcEUsT0FBTyxPQUFPLENBQUE7SUFFaEIsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLDhCQUE4QixFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQ3BELE1BQU0sS0FBSyxDQUFBO0lBQ2IsQ0FBQztBQUNILENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxCaWx1clxcRG9jdW1lbnRzXFxEZXZlbG9wbWVudFxcTmV4dFxcc29yeWNrLWFjY2Vzc1xcc3JjXFxsaWJcXHN5bmMtdXNlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjbGVya0NsaWVudCB9IGZyb20gJ0BjbGVyay9uZXh0anMvc2VydmVyJ1xyXG5pbXBvcnQgeyBwcmlzbWEgfSBmcm9tICdAL2xpYi9wcmlzbWEnXHJcbmltcG9ydCB7IFVzZXJSb2xlIH0gZnJvbSAnQHByaXNtYS9jbGllbnQnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3luY1VzZXJGcm9tQ2xlcmsoY2xlcmtJZDogc3RyaW5nKSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGNsaWVudCA9IGF3YWl0IGNsZXJrQ2xpZW50KClcclxuICAgIGNvbnN0IGNsZXJrVXNlciA9IGF3YWl0IGNsaWVudC51c2Vycy5nZXRVc2VyKGNsZXJrSWQpXHJcbiAgICBcclxuICAgIGlmICghY2xlcmtVc2VyKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignVXN1YXJpbyBubyBlbmNvbnRyYWRvIGVuIENsZXJrJylcclxuICAgIH1cclxuXHJcbiAgICAvLyBWZXJpZmljYXIgc2kgZWwgdXN1YXJpbyB5YSBleGlzdGUgcG9yIGNsZXJrSWRcclxuICAgIGNvbnN0IGV4aXN0aW5nVXNlciA9IGF3YWl0IHByaXNtYS51c2VyLmZpbmRVbmlxdWUoe1xyXG4gICAgICB3aGVyZTogeyBjbGVya0lkIH1cclxuICAgIH0pXHJcblxyXG4gICAgaWYgKGV4aXN0aW5nVXNlcikge1xyXG4gICAgICByZXR1cm4gZXhpc3RpbmdVc2VyXHJcbiAgICB9XHJcblxyXG4gICAgLy8gT2J0ZW5lciBlbCBlbWFpbCBkZWwgdXN1YXJpbyBkZXNkZSBDbGVya1xyXG4gICAgY29uc3QgdXNlckVtYWlsID0gY2xlcmtVc2VyLmVtYWlsQWRkcmVzc2VzWzBdPy5lbWFpbEFkZHJlc3MgfHwgJydcclxuICAgIFxyXG4gICAgLy8gVGFtYmnDqW4gdmVyaWZpY2FyIHNpIGV4aXN0ZSB1biB1c3VhcmlvIGNvbiBlbCBtaXNtbyBlbWFpbFxyXG4gICAgY29uc3QgZXhpc3RpbmdVc2VyQnlFbWFpbCA9IGF3YWl0IHByaXNtYS51c2VyLmZpbmRVbmlxdWUoe1xyXG4gICAgICB3aGVyZTogeyBlbWFpbDogdXNlckVtYWlsIH1cclxuICAgIH0pXHJcblxyXG4gICAgLy8gU2kgZXhpc3RlIHVuIHVzdWFyaW8gY29uIGVsIG1pc21vIGVtYWlsIHBlcm8gZGlmZXJlbnRlIGNsZXJrSWQsIGFjdHVhbGl6YXIgZWwgY2xlcmtJZFxyXG4gICAgaWYgKGV4aXN0aW5nVXNlckJ5RW1haWwgJiYgZXhpc3RpbmdVc2VyQnlFbWFpbC5jbGVya0lkICE9PSBjbGVya0lkKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBBY3R1YWxpemFuZG8gY2xlcmtJZCBwYXJhIHVzdWFyaW8gZXhpc3RlbnRlOiAke3VzZXJFbWFpbH1gKVxyXG4gICAgICBjb25zdCB1cGRhdGVkVXNlciA9IGF3YWl0IHByaXNtYS51c2VyLnVwZGF0ZSh7XHJcbiAgICAgICAgd2hlcmU6IHsgZW1haWw6IHVzZXJFbWFpbCB9LFxyXG4gICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgIGNsZXJrSWQsXHJcbiAgICAgICAgICBmaXJzdE5hbWU6IGNsZXJrVXNlci5maXJzdE5hbWUgfHwgZXhpc3RpbmdVc2VyQnlFbWFpbC5maXJzdE5hbWUsXHJcbiAgICAgICAgICBsYXN0TmFtZTogY2xlcmtVc2VyLmxhc3ROYW1lIHx8IGV4aXN0aW5nVXNlckJ5RW1haWwubGFzdE5hbWUsXHJcbiAgICAgICAgICBpbWFnZVVybDogY2xlcmtVc2VyLmltYWdlVXJsIHx8IGV4aXN0aW5nVXNlckJ5RW1haWwuaW1hZ2VVcmwsXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgICByZXR1cm4gdXBkYXRlZFVzZXJcclxuICAgIH1cclxuXHJcbiAgICBsZXQgdXNlclJvbGU6IFVzZXJSb2xlID0gVXNlclJvbGUuQ0xJRU5UXHJcbiAgICBcclxuICAgIGlmIChjbGVya1VzZXIucHVibGljTWV0YWRhdGEgJiYgdHlwZW9mIGNsZXJrVXNlci5wdWJsaWNNZXRhZGF0YSA9PT0gJ29iamVjdCcgJiYgJ3JvbGUnIGluIGNsZXJrVXNlci5wdWJsaWNNZXRhZGF0YSkge1xyXG4gICAgICBjb25zdCBtZXRhZGF0YVJvbGUgPSBjbGVya1VzZXIucHVibGljTWV0YWRhdGEucm9sZSBhcyBzdHJpbmdcclxuICAgICAgaWYgKE9iamVjdC52YWx1ZXMoVXNlclJvbGUpLmluY2x1ZGVzKG1ldGFkYXRhUm9sZSBhcyBVc2VyUm9sZSkpIHtcclxuICAgICAgICB1c2VyUm9sZSA9IG1ldGFkYXRhUm9sZSBhcyBVc2VyUm9sZVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdXNlckNvdW50ID0gYXdhaXQgcHJpc21hLnVzZXIuY291bnQoKVxyXG4gICAgaWYgKHVzZXJDb3VudCA9PT0gMCkge1xyXG4gICAgICB1c2VyUm9sZSA9IFVzZXJSb2xlLkFETUlOXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgb3JnYW5pemVyRW1haWxzID0gcHJvY2Vzcy5lbnYuT1JHQU5JWkVSX0VNQUlMUz8uc3BsaXQoJywnKSB8fCBbXVxyXG4gICAgY29uc3QgYWRtaW5FbWFpbHMgPSBwcm9jZXNzLmVudi5BRE1JTl9FTUFJTFM/LnNwbGl0KCcsJykgfHwgW11cclxuICAgIFxyXG4gICAgaWYgKGFkbWluRW1haWxzLmluY2x1ZGVzKHVzZXJFbWFpbCkpIHtcclxuICAgICAgdXNlclJvbGUgPSBVc2VyUm9sZS5BRE1JTlxyXG4gICAgfSBlbHNlIGlmIChvcmdhbml6ZXJFbWFpbHMuaW5jbHVkZXModXNlckVtYWlsKSkge1xyXG4gICAgICB1c2VyUm9sZSA9IFVzZXJSb2xlLk9SR0FOSVpFUlxyXG4gICAgfVxyXG5cclxuICAgIC8vIENyZWFyIGVsIG51ZXZvIHVzdWFyaW8gKHlhIG5vIGhheSBjb25mbGljdG9zIHBvc2libGVzKVxyXG4gICAgY29uc3QgbmV3VXNlciA9IGF3YWl0IHByaXNtYS51c2VyLmNyZWF0ZSh7XHJcbiAgICAgIGRhdGE6IHtcclxuICAgICAgICBjbGVya0lkLFxyXG4gICAgICAgIGVtYWlsOiB1c2VyRW1haWwsXHJcbiAgICAgICAgZmlyc3ROYW1lOiBjbGVya1VzZXIuZmlyc3ROYW1lIHx8ICcnLFxyXG4gICAgICAgIGxhc3ROYW1lOiBjbGVya1VzZXIubGFzdE5hbWUgfHwgJycsXHJcbiAgICAgICAgaW1hZ2VVcmw6IGNsZXJrVXNlci5pbWFnZVVybCB8fCAnJyxcclxuICAgICAgICByb2xlOiB1c2VyUm9sZSxcclxuICAgICAgfSxcclxuICAgIH0pXHJcblxyXG4gICAgY29uc29sZS5sb2coYFVzdWFyaW8gc2luY3Jvbml6YWRvOiAke2NsZXJrSWR9IGNvbiByb2w6ICR7dXNlclJvbGV9YClcclxuICAgIHJldHVybiBuZXdVc2VyXHJcblxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzaW5jcm9uaXphbmRvIHVzdWFyaW86JywgZXJyb3IpXHJcbiAgICB0aHJvdyBlcnJvclxyXG4gIH1cclxufSJdLCJ2ZXJzaW9uIjozfQ==