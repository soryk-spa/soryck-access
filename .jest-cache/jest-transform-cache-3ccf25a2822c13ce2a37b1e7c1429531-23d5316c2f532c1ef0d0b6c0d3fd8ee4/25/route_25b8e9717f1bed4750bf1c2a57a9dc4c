bb0ff71d2ac1acbaba719497176bd78d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GET = GET;
exports.POST = POST;
const server_1 = require("next/server");
const auth_1 = require("@/lib/auth");
const prisma_1 = require("@/lib/prisma");
const qr_1 = require("@/lib/qr");
const roles_1 = require("@/lib/roles");
async function GET(request, { params }) {
    var _a, _b;
    try {
        const { qrCode } = await params;
        // Validar formato del código QR
        if (!(0, qr_1.validateQRCode)(qrCode)) {
            return server_1.NextResponse.json({ error: "Código QR inválido" }, { status: 400 });
        }
        const ticket = await prisma_1.prisma.ticket.findUnique({
            where: { qrCode },
            include: {
                event: {
                    select: {
                        id: true,
                        title: true,
                        startDate: true,
                        endDate: true,
                        location: true,
                        organizer: {
                            select: {
                                id: true,
                                firstName: true,
                                lastName: true,
                                email: true,
                            },
                        },
                    },
                },
                user: {
                    select: {
                        firstName: true,
                        lastName: true,
                        email: true,
                    },
                },
                order: {
                    select: {
                        orderNumber: true,
                        totalAmount: true,
                        currency: true,
                    },
                },
            },
        });
        if (!ticket) {
            return server_1.NextResponse.json({ error: "Ticket no encontrado" }, { status: 404 });
        }
        const attendeeName = ticket.user.firstName
            ? `${ticket.user.firstName} ${ticket.user.lastName || ""}`.trim()
            : ticket.user.email;
        return server_1.NextResponse.json({
            ticket: {
                id: ticket.id,
                qrCode: ticket.qrCode,
                isUsed: ticket.isUsed,
                usedAt: ((_a = ticket.usedAt) === null || _a === void 0 ? void 0 : _a.toISOString()) || null,
                status: ticket.status,
                attendeeName,
                attendeeEmail: ticket.user.email,
                event: Object.assign(Object.assign({}, ticket.event), { startDate: ticket.event.startDate.toISOString(), endDate: ((_b = ticket.event.endDate) === null || _b === void 0 ? void 0 : _b.toISOString()) || null }),
                order: ticket.order,
                createdAt: ticket.createdAt.toISOString(),
            },
            canUse: ticket.status === "ACTIVE" && !ticket.isUsed,
            isEventDay: new Date().toDateString() ===
                new Date(ticket.event.startDate).toDateString(),
        });
    }
    catch (error) {
        console.error("Error verifying ticket:", error);
        return server_1.NextResponse.json({ error: "Error interno del servidor" }, { status: 500 });
    }
}
async function POST(request, { params }) {
    var _a, _b;
    try {
        const { qrCode } = await params;
        const user = await (0, auth_1.requireAuth)();
        if (!(0, qr_1.validateQRCode)(qrCode)) {
            return server_1.NextResponse.json({ error: "Código QR inválido" }, { status: 400 });
        }
        if (!(0, roles_1.canScanTickets)(user.role)) {
            return server_1.NextResponse.json({ error: "No tienes permisos para validar tickets" }, { status: 403 });
        }
        const ticket = await prisma_1.prisma.ticket.findUnique({
            where: { qrCode },
            include: {
                event: {
                    select: {
                        id: true,
                        title: true,
                        organizerId: true,
                        startDate: true,
                    },
                },
            },
        });
        if (!ticket) {
            return server_1.NextResponse.json({ error: "Ticket no encontrado" }, { status: 404 });
        }
        const hasPermission = await checkScanPermission(user.id, user.role, ticket.event.id, ticket.event.organizerId);
        if (!hasPermission) {
            return server_1.NextResponse.json({ error: "No tienes permisos para validar tickets de este evento" }, { status: 403 });
        }
        if (ticket.isUsed) {
            return server_1.NextResponse.json({
                error: "Este ticket ya fue usado",
                usedAt: (_a = ticket.usedAt) === null || _a === void 0 ? void 0 : _a.toISOString(),
            }, { status: 400 });
        }
        if (ticket.status !== "ACTIVE") {
            return server_1.NextResponse.json({ error: `Ticket ${ticket.status.toLowerCase()}` }, { status: 400 });
        }
        const updatedTicket = await prisma_1.prisma.ticket.update({
            where: { id: ticket.id },
            data: {
                isUsed: true,
                usedAt: new Date(),
            },
            include: {
                user: {
                    select: {
                        firstName: true,
                        lastName: true,
                        email: true,
                    },
                },
            },
        });
        const attendeeName = updatedTicket.user.firstName
            ? `${updatedTicket.user.firstName} ${updatedTicket.user.lastName || ""}`.trim()
            : updatedTicket.user.email;
        return server_1.NextResponse.json({
            message: "Ticket validado exitosamente",
            ticket: {
                id: updatedTicket.id,
                qrCode: updatedTicket.qrCode,
                isUsed: updatedTicket.isUsed,
                usedAt: (_b = updatedTicket.usedAt) === null || _b === void 0 ? void 0 : _b.toISOString(),
                attendeeName,
                attendeeEmail: updatedTicket.user.email,
                eventTitle: ticket.event.title,
            },
        });
    }
    catch (error) {
        console.error("Error using ticket:", error);
        return server_1.NextResponse.json({ error: "Error interno del servidor" }, { status: 500 });
    }
}
async function checkScanPermission(userId, userRole, eventId, eventOrganizerId) {
    if (userRole === "ADMIN") {
        return true;
    }
    if (userRole === "ORGANIZER" && eventOrganizerId === userId) {
        return true;
    }
    if (userRole === "SCANNER") {
        const assignment = await prisma_1.prisma.eventScanner.findFirst({
            where: {
                eventId: eventId,
                scannerId: userId,
                isActive: true,
            },
        });
        return !!assignment;
    }
    return false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,