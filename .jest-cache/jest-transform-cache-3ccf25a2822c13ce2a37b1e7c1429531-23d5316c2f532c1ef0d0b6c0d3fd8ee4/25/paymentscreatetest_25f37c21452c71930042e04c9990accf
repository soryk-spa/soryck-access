969b3a1c3b47f2780b2c2354f28e6445
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('next/server', () => ({ NextResponse: { json: (body, opts) => ({ status: (opts === null || opts === void 0 ? void 0 : opts.status) || 200, body }) } }));
jest.mock('@/lib/auth', () => ({ requireAuth: jest.fn().mockResolvedValue(mockUser) }));
jest.mock('@/lib/transbank', () => ({ webpayPlus: mockWebpay }));
jest.mock('@/lib/commission', () => mockCalculate);
jest.mock('@/lib/discount-codes', () => mockDiscount);
jest.mock('@/lib/prisma', () => ({ prisma: mockPrisma }));
jest.mock('@/lib/qr', () => ({ generateUniqueQRCode: jest.fn().mockReturnValue('QR123') }));
jest.mock('@/lib/email', () => ({ sendTicketEmail: jest.fn() }));
// Mocks
const mockUser = { id: 'user_1', email: 'u@u.com', firstName: 'U' };
const mockWebpay = { create: jest.fn() };
const mockCalculate = {
    calculatePriceBreakdown: jest.fn(),
    calculatePriceBreakdownWithDiscount: jest.fn()
};
const mockDiscount = {
    DiscountCodeService: {
        validateDiscountCode: jest.fn(),
        applyCodeUsage: jest.fn()
    }
};
const mockPrisma = {
    ticketType: { findUnique: jest.fn() },
    ticket: { count: jest.fn() },
    order: { create: jest.fn(), update: jest.fn(), findUnique: jest.fn() },
    payment: { create: jest.fn() },
    $transaction: jest.fn()
};
describe('POST /api/payments/create', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('returns 400 when body is invalid', async () => {
        // requireAuth will resolve to mockUser
        const req = { json: async () => ({ quantity: 2 }) };
        const { POST } = await Promise.resolve().then(() => __importStar(require('../../../src/app/api/payments/create/route')));
        const res = await POST(req);
        expect(res.status).toBe(400);
        expect(res.body.error).toBeDefined();
    });
    it('creates a payment and returns transbank url and token for paid order', async () => {
        // Setup ticket type and event
        const ticketType = {
            id: 'tt1',
            price: 5000,
            ticketsGenerated: 1,
            capacity: 100,
            event: { id: 'e1', isPublished: true, currency: 'CLP' }
        };
        mockPrisma.ticketType.findUnique.mockResolvedValue(ticketType);
        mockPrisma.ticket.count.mockResolvedValue(0);
        // Price breakdown
        mockCalculate.calculatePriceBreakdown.mockReturnValue({ basePrice: 5000, commission: 0, totalPrice: 5000, originalAmount: 5000, discountAmount: 0 });
        // Order creation
        const createdOrder = { id: 'order_1', orderNumber: 'SP123', quantity: 1 };
        mockPrisma.order.create.mockResolvedValue(createdOrder);
        // Webpay responds
        mockWebpay.create.mockResolvedValue({ url: 'https://webpay.test/checkout', token: 'tok_123' });
        // Payment create
        mockPrisma.payment.create.mockResolvedValue({ id: 'pay_1' });
        const reqBody = { ticketTypeId: 'tt1', quantity: 1 };
        const req = { json: async () => reqBody };
        const { POST } = await Promise.resolve().then(() => __importStar(require('../../../src/app/api/payments/create/route')));
        const res = await POST(req);
        expect(res.status).toBe(200);
        expect(res.body.success).toBe(true);
        expect(res.body.paymentUrl).toBe('https://webpay.test/checkout');
        expect(res.body.token).toBe('tok_123');
        expect(mockWebpay.create).toHaveBeenCalled();
        expect(mockPrisma.payment.create).toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,