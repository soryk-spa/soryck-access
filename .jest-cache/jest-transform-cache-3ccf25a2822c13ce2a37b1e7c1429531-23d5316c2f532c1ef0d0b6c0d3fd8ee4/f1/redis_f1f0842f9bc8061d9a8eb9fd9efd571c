5599d920f2d418e594d4bef9a5ba0fe1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cache = exports.CacheService = void 0;
const ioredis_1 = require("ioredis");
const logger_1 = require("./logger");
// Redis configuration - supports both REDIS_URL (Vercel/Upstash) and individual env vars
const getRedisConfig = () => {
    // If REDIS_URL is provided (Vercel/Upstash format)
    if (process.env.REDIS_URL) {
        return {
            connectionName: 'vercel-redis',
            lazyConnect: true,
            retryDelayOnFailover: 100,
            enableReadyCheck: false,
            maxRetriesPerRequest: 3,
            // Optimizaciones de rendimiento
            connectTimeout: 60000,
            commandTimeout: 5000,
            keepAlive: 30000,
            // Pool de conexiones
            family: 4,
            // Configuraci√≥n de pipeline
            enableAutoPipelining: true,
            // Configuraci√≥n de compresi√≥n
            compression: 'gzip',
        };
    }
    // Fallback to individual environment variables
    return {
        host: process.env.REDIS_HOST || 'localhost',
        port: parseInt(process.env.REDIS_PORT || '6379'),
        password: process.env.REDIS_PASSWORD,
        db: parseInt(process.env.REDIS_DB || '0'),
        retryDelayOnFailover: 100,
        enableReadyCheck: false,
        maxRetriesPerRequest: 3,
        lazyConnect: true,
        // Optimizaciones de rendimiento
        connectTimeout: 60000,
        commandTimeout: 5000,
        keepAlive: 30000,
        // Pool de conexiones
        family: 4,
        // Configuraci√≥n de pipeline
        enableAutoPipelining: true,
    };
};
// Configuraci√≥n de Redis
const redis = process.env.REDIS_URL
    ? new ioredis_1.Redis(process.env.REDIS_URL, getRedisConfig())
    : new ioredis_1.Redis(getRedisConfig());
// Event listeners para logging
redis.on('connect', () => {
    logger_1.logger.info('‚úÖ Redis connected successfully');
});
redis.on('error', (error) => {
    logger_1.logger.error('‚ùå Redis connection error', error);
});
redis.on('close', () => {
    logger_1.logger.info('üîå Redis connection closed');
});
// Cache utilities
class CacheService {
    constructor() {
        this.redis = redis;
    }
    static getInstance() {
        if (!CacheService.instance) {
            CacheService.instance = new CacheService();
        }
        return CacheService.instance;
    }
    // M√©todos b√°sicos de cach√©
    async get(key) {
        try {
            const cached = await this.redis.get(key);
            return cached ? JSON.parse(cached) : null;
        }
        catch (error) {
            logger_1.logger.error(`Error getting cache key ${key}`, error);
            return null;
        }
    }
    async set(key, value, ttlSeconds) {
        try {
            const serialized = JSON.stringify(value);
            if (ttlSeconds) {
                await this.redis.setex(key, ttlSeconds, serialized);
            }
            else {
                await this.redis.set(key, serialized);
            }
        }
        catch (error) {
            logger_1.logger.error(`Error setting cache key ${key}`, error);
        }
    }
    async del(key) {
        try {
            await this.redis.del(key);
        }
        catch (error) {
            logger_1.logger.error(`Error deleting cache key ${key}`, error);
        }
    }
    async invalidatePattern(pattern) {
        try {
            const keys = await this.redis.keys(pattern);
            if (keys.length > 0) {
                await this.redis.del(...keys);
            }
        }
        catch (error) {
            logger_1.logger.error(`Error invalidating pattern ${pattern}`, error);
        }
    }
    // M√©todos espec√≠ficos para la aplicaci√≥n
    async getUserRole(clerkId) {
        return this.get(`user:role:${clerkId}`);
    }
    async setUserRole(clerkId, role, ttl = 3600) {
        await this.set(`user:role:${clerkId}`, role, ttl);
    }
    async getUserProfile(clerkId) {
        return this.get(`user:profile:${clerkId}`);
    }
    async setUserProfile(clerkId, profile, ttl = 1800) {
        await this.set(`user:profile:${clerkId}`, profile, ttl);
    }
    // Nuevos m√©todos optimizados para roles y permisos
    async getUserFullData(clerkId) {
        return this.get(`user:full:${clerkId}`);
    }
    async setUserFullData(clerkId, userData, ttl = 3600) {
        await this.set(`user:full:${clerkId}`, userData, ttl);
    }
    async getUserPermissions(clerkId) {
        return this.get(`user:permissions:${clerkId}`);
    }
    async setUserPermissions(clerkId, permissions, ttl = 3600) {
        await this.set(`user:permissions:${clerkId}`, permissions, ttl);
    }
    // Batch operations para mejorar rendimiento
    async setUserBatch(clerkId, userData, ttl = 3600) {
        const pipeline = this.redis.pipeline();
        pipeline.setex(`user:full:${clerkId}`, ttl, JSON.stringify(userData));
        pipeline.setex(`user:role:${clerkId}`, ttl, userData.role);
        pipeline.setex(`user:profile:${clerkId}`, ttl, JSON.stringify(userData));
        await pipeline.exec();
    }
    async invalidateUserCache(clerkId) {
        await this.invalidatePattern(`user:*:${clerkId}`);
    }
    async getEvents(query) {
        return this.get(`events:${query}`);
    }
    async setEvents(query, events, ttl = 600) {
        await this.set(`events:${query}`, events, ttl);
    }
    async invalidateEventsCache() {
        await this.invalidatePattern('events:*');
    }
    async getDashboardStats(userId) {
        return this.get(`dashboard:stats:${userId}`);
    }
    async setDashboardStats(userId, stats, ttl = 300) {
        await this.set(`dashboard:stats:${userId}`, stats, ttl);
    }
    async invalidateDashboardStats(userId) {
        if (userId) {
            await this.del(`dashboard:stats:${userId}`);
        }
        else {
            await this.invalidatePattern('dashboard:stats:*');
        }
    }
    // Contador de rate limiting
    async incrementRateLimit(key, windowSeconds, limit) {
        try {
            const current = await this.redis.incr(key);
            if (current === 1) {
                await this.redis.expire(key, windowSeconds);
            }
            return {
                allowed: current <= limit,
                remaining: Math.max(0, limit - current)
            };
        }
        catch (error) {
            logger_1.logger.error(`Error checking rate limit for ${key}`, error);
            return { allowed: true, remaining: limit };
        }
    }
    // Session cache (para datos temporales de sesi√≥n)
    async setSession(sessionId, data, ttl = 86400) {
        await this.set(`session:${sessionId}`, data, ttl);
    }
    async getSession(sessionId) {
        return this.get(`session:${sessionId}`);
    }
    async deleteSession(sessionId) {
        await this.del(`session:${sessionId}`);
    }
    // Health check
    async ping() {
        try {
            const response = await this.redis.ping();
            return response === 'PONG';
        }
        catch (error) {
            logger_1.logger.error('Redis ping failed', error);
            return false;
        }
    }
    // Graceful shutdown
    async disconnect() {
        try {
            await this.redis.quit();
        }
        catch (error) {
            logger_1.logger.error('Error disconnecting from Redis:', error);
        }
    }
}
exports.CacheService = CacheService;
// Export singleton instance
exports.cache = CacheService.getInstance();
exports.default = redis;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,