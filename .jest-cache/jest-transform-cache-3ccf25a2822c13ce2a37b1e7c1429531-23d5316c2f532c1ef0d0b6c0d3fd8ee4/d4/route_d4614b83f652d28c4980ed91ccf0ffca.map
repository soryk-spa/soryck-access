{"file":"C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\app\\api\\qr\\[code]\\route.ts","mappings":";;;;;AAIA,kBA0DC;AA9DD,wCAAuD;AACvD,iCAAyC;AACzC,oDAA2B;AAEpB,KAAK,UAAU,GAAG,CACvB,OAAoB,EACpB,EAAE,MAAM,EAAyC;IAEjD,IAAI,CAAC;QACH,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,MAAM,CAAA;QAE7B,OAAO,CAAC,GAAG,CAAC,mCAAmC,IAAI,EAAE,CAAC,CAAA;QAGtD,IAAI,CAAC,IAAA,mBAAc,EAAC,IAAI,CAAC,EAAE,CAAC;YAC1B,OAAO,CAAC,KAAK,CAAC,yCAAyC,EAAE,IAAI,CAAC,CAAA;YAC9D,OAAO,IAAI,qBAAY,CAAC,wBAAwB,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAA;QACpE,CAAC;QAGD,MAAM,eAAe,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,mBAAmB,WAAW,IAAI,EAAE,CAAA;QAE3E,OAAO,CAAC,GAAG,CAAC,+BAA+B,eAAe,EAAE,CAAC,CAAA;QAG7D,MAAM,QAAQ,GAAG,MAAM,gBAAM,CAAC,QAAQ,CAAC,eAAe,EAAE;YACtD,oBAAoB,EAAE,GAAG;YACzB,IAAI,EAAE,KAAK;YACX,MAAM,EAAE,CAAC;YACT,KAAK,EAAE;gBACL,IAAI,EAAE,SAAS;gBACf,KAAK,EAAE,SAAS;aACjB;YACD,KAAK,EAAE,GAAG;YACV,KAAK,EAAE,CAAC;SACT,CAAC,CAAA;QAEF,OAAO,CAAC,GAAG,CAAC,gDAAgD,QAAQ,CAAC,MAAM,QAAQ,CAAC,CAAA;QAEpF,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAA;QAE3C,OAAO,IAAI,qBAAY,CAAC,UAAU,EAAE;YAClC,MAAM,EAAE,GAAG;YACX,OAAO,EAAE;gBACP,cAAc,EAAE,WAAW;gBAC3B,eAAe,EAAE,qCAAqC;gBACtD,6BAA6B,EAAE,GAAG;gBAClC,8BAA8B,EAAE,KAAK;gBACrC,8BAA8B,EAAE,cAAc;gBAC9C,gBAAgB,EAAE,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE;gBAC5C,wBAAwB,EAAE,SAAS;aACpC;SACF,CAAC,CAAA;IACJ,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,uCAAuC,EAAE,KAAK,CAAC,CAAA;QAC7D,OAAO,IAAI,qBAAY,CAAC,0BAA0B,EAAE;YAClD,MAAM,EAAE,GAAG;YACX,OAAO,EAAE;gBACP,cAAc,EAAE,YAAY;aAC7B;SACF,CAAC,CAAA;IACJ,CAAC;AACH,CAAC","names":[],"sources":["C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\app\\api\\qr\\[code]\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\r\nimport { validateQRCode } from '@/lib/qr'\r\nimport QRCode from 'qrcode'\r\n\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: Promise<{ code: string }> }\r\n) {\r\n  try {\r\n    const { code } = await params\r\n    \r\n    console.log(`[QR API] Solicitud para código: ${code}`)\r\n    \r\n    \n    if (!validateQRCode(code)) {\r\n      console.error('[QR API] Formato de código QR inválido:', code)\r\n      return new NextResponse('Invalid QR code format', { status: 400 })\r\n    }\r\n\r\n    \n    const verificationUrl = `${process.env.NEXT_PUBLIC_APP_URL}/verify/${code}`\r\n    \r\n    console.log(`[QR API] Generando QR para: ${verificationUrl}`)\r\n    \r\n    \n    const qrBuffer = await QRCode.toBuffer(verificationUrl, {\r\n      errorCorrectionLevel: 'H', \n      type: 'png',\r\n      margin: 1, \n      color: {\r\n        dark: '#000000',\r\n        light: '#FFFFFF'\r\n      },\r\n      width: 200, \n      scale: 8 \n    })\r\n    \r\n    console.log(`[QR API] ✅ QR generado exitosamente, tamaño: ${qrBuffer.length} bytes`)\r\n    \r\n    const uint8Array = new Uint8Array(qrBuffer)\r\n    \r\n    return new NextResponse(uint8Array, {\r\n      status: 200,\r\n      headers: {\r\n        'Content-Type': 'image/png',\r\n        'Cache-Control': 'public, max-age=31536000, immutable', \n        'Access-Control-Allow-Origin': '*',\r\n        'Access-Control-Allow-Methods': 'GET',\r\n        'Access-Control-Allow-Headers': 'Content-Type',\r\n        'Content-Length': qrBuffer.length.toString(),\r\n        'X-Content-Type-Options': 'nosniff',\r\n      },\r\n    })\r\n  } catch (error) {\r\n    console.error('[QR API] ❌ Error generando código QR:', error)\r\n    return new NextResponse('Error generating QR code', { \r\n      status: 500,\r\n      headers: {\r\n        'Content-Type': 'text/plain',\r\n      }\r\n    })\r\n  }\r\n}"],"version":3}