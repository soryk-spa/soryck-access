7dec75083bf83482b1d0de3f8eae90af
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateTicketQR = generateTicketQR;
exports.generateTicketQRAsBuffer = generateTicketQRAsBuffer;
exports.generateUniqueQRCode = generateUniqueQRCode;
exports.validateQRCode = validateQRCode;
const qrcode_1 = __importDefault(require("qrcode"));
async function generateTicketQR(ticketData) {
    try {
        const verificationUrl = `${process.env.NEXT_PUBLIC_APP_URL}/verify/${ticketData.qrCode}`;
        const qrCodeDataUrl = await qrcode_1.default.toDataURL(verificationUrl, {
            errorCorrectionLevel: 'M',
            type: 'image/png',
            margin: 1,
            color: {
                dark: '#000000',
                light: '#FFFFFF'
            },
            width: 300
        });
        return qrCodeDataUrl;
    }
    catch (error) {
        console.error('Error generating QR code:', error);
        throw new Error('Error al generar el código QR');
    }
}
async function generateTicketQRAsBuffer(ticketData) {
    try {
        const verificationUrl = `${process.env.NEXT_PUBLIC_APP_URL}/verify/${ticketData.qrCode}`;
        const qrBuffer = await qrcode_1.default.toBuffer(verificationUrl, {
            errorCorrectionLevel: 'M',
            type: 'png',
            margin: 1,
            color: {
                dark: '#000000',
                light: '#FFFFFF'
            },
            width: 300
        });
        return qrBuffer;
    }
    catch (error) {
        console.error('Error generating QR buffer:', error);
        throw new Error('Error al generar el código QR como buffer');
    }
}
function generateUniqueQRCode(eventId, userId, timestamp, index = 0) {
    const randomString = Math.random().toString(36).substring(2, 15);
    const timeString = timestamp.toString(36);
    const eventString = eventId.substring(0, 8);
    const userString = userId.substring(0, 8);
    return `${eventString}-${userString}-${timeString}-${randomString}-${index}`.toUpperCase();
}
function validateQRCode(qrCode) {
    const qrRegex = /^[A-Z0-9]{8}-[A-Z0-9]{8}-[A-Z0-9]+-[A-Z0-9]+-\d+$/;
    return qrRegex.test(qrCode);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxCaWx1clxcRG9jdW1lbnRzXFxEZXZlbG9wbWVudFxcTmV4dFxcc29yeWNrLWFjY2Vzc1xcc3JjXFxsaWJcXHFyLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBZUEsNENBb0JDO0FBRUQsNERBb0JDO0FBRUQsb0RBT0M7QUFFRCx3Q0FHQztBQXZFRCxvREFBMkI7QUFlcEIsS0FBSyxVQUFVLGdCQUFnQixDQUFDLFVBQXdCO0lBQzdELElBQUksQ0FBQztRQUNILE1BQU0sZUFBZSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsV0FBVyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUE7UUFFeEYsTUFBTSxhQUFhLEdBQUcsTUFBTSxnQkFBTSxDQUFDLFNBQVMsQ0FBQyxlQUFlLEVBQUU7WUFDNUQsb0JBQW9CLEVBQUUsR0FBRztZQUN6QixJQUFJLEVBQUUsV0FBVztZQUNqQixNQUFNLEVBQUUsQ0FBQztZQUNULEtBQUssRUFBRTtnQkFDTCxJQUFJLEVBQUUsU0FBUztnQkFDZixLQUFLLEVBQUUsU0FBUzthQUNqQjtZQUNELEtBQUssRUFBRSxHQUFHO1NBQ1gsQ0FBQyxDQUFBO1FBRUYsT0FBTyxhQUFhLENBQUE7SUFDdEIsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLDJCQUEyQixFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQ2pELE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQTtJQUNsRCxDQUFDO0FBQ0gsQ0FBQztBQUVNLEtBQUssVUFBVSx3QkFBd0IsQ0FBQyxVQUF3QjtJQUNyRSxJQUFJLENBQUM7UUFDSCxNQUFNLGVBQWUsR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLFdBQVcsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFBO1FBRXhGLE1BQU0sUUFBUSxHQUFHLE1BQU0sZ0JBQU0sQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFO1lBQ3RELG9CQUFvQixFQUFFLEdBQUc7WUFDekIsSUFBSSxFQUFFLEtBQUs7WUFDWCxNQUFNLEVBQUUsQ0FBQztZQUNULEtBQUssRUFBRTtnQkFDTCxJQUFJLEVBQUUsU0FBUztnQkFDZixLQUFLLEVBQUUsU0FBUzthQUNqQjtZQUNELEtBQUssRUFBRSxHQUFHO1NBQ1gsQ0FBQyxDQUFBO1FBRUYsT0FBTyxRQUFRLENBQUE7SUFDakIsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLDZCQUE2QixFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQ25ELE1BQU0sSUFBSSxLQUFLLENBQUMsMkNBQTJDLENBQUMsQ0FBQTtJQUM5RCxDQUFDO0FBQ0gsQ0FBQztBQUVELFNBQWdCLG9CQUFvQixDQUFDLE9BQWUsRUFBRSxNQUFjLEVBQUUsU0FBaUIsRUFBRSxRQUFnQixDQUFDO0lBQ3hHLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUNoRSxNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ3pDLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQzNDLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBRXpDLE9BQU8sR0FBRyxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksS0FBSyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUE7QUFDNUYsQ0FBQztBQUVELFNBQWdCLGNBQWMsQ0FBQyxNQUFjO0lBQzNDLE1BQU0sT0FBTyxHQUFHLG1EQUFtRCxDQUFBO0lBQ25FLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUM3QixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQmlsdXJcXERvY3VtZW50c1xcRGV2ZWxvcG1lbnRcXE5leHRcXHNvcnljay1hY2Nlc3NcXHNyY1xcbGliXFxxci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUVJDb2RlIGZyb20gXCJxcmNvZGVcIlxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUaWNrZXRRUkRhdGEge1xyXG4gIHRpY2tldElkOiBzdHJpbmdcclxuICBldmVudElkOiBzdHJpbmdcclxuICB1c2VySWQ6IHN0cmluZ1xyXG4gIGV2ZW50VGl0bGU6IHN0cmluZ1xyXG4gIGF0dGVuZGVlTmFtZTogc3RyaW5nXHJcbiAgYXR0ZW5kZWVFbWFpbDogc3RyaW5nXHJcbiAgZXZlbnREYXRlOiBzdHJpbmdcclxuICBldmVudExvY2F0aW9uOiBzdHJpbmdcclxuICBxckNvZGU6IHN0cmluZ1xyXG4gIHRpbWVzdGFtcDogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVRpY2tldFFSKHRpY2tldERhdGE6IFRpY2tldFFSRGF0YSk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHZlcmlmaWNhdGlvblVybCA9IGAke3Byb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQUF9VUkx9L3ZlcmlmeS8ke3RpY2tldERhdGEucXJDb2RlfWBcclxuICAgIFxyXG4gICAgY29uc3QgcXJDb2RlRGF0YVVybCA9IGF3YWl0IFFSQ29kZS50b0RhdGFVUkwodmVyaWZpY2F0aW9uVXJsLCB7XHJcbiAgICAgIGVycm9yQ29ycmVjdGlvbkxldmVsOiAnTScsXHJcbiAgICAgIHR5cGU6ICdpbWFnZS9wbmcnLFxyXG4gICAgICBtYXJnaW46IDEsXHJcbiAgICAgIGNvbG9yOiB7XHJcbiAgICAgICAgZGFyazogJyMwMDAwMDAnLFxyXG4gICAgICAgIGxpZ2h0OiAnI0ZGRkZGRidcclxuICAgICAgfSxcclxuICAgICAgd2lkdGg6IDMwMFxyXG4gICAgfSlcclxuICAgIFxyXG4gICAgcmV0dXJuIHFyQ29kZURhdGFVcmxcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2VuZXJhdGluZyBRUiBjb2RlOicsIGVycm9yKVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciBhbCBnZW5lcmFyIGVsIGPDs2RpZ28gUVInKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlVGlja2V0UVJBc0J1ZmZlcih0aWNrZXREYXRhOiBUaWNrZXRRUkRhdGEpOiBQcm9taXNlPEJ1ZmZlcj4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCB2ZXJpZmljYXRpb25VcmwgPSBgJHtwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19BUFBfVVJMfS92ZXJpZnkvJHt0aWNrZXREYXRhLnFyQ29kZX1gXHJcbiAgICBcclxuICAgIGNvbnN0IHFyQnVmZmVyID0gYXdhaXQgUVJDb2RlLnRvQnVmZmVyKHZlcmlmaWNhdGlvblVybCwge1xyXG4gICAgICBlcnJvckNvcnJlY3Rpb25MZXZlbDogJ00nLFxyXG4gICAgICB0eXBlOiAncG5nJyxcclxuICAgICAgbWFyZ2luOiAxLFxyXG4gICAgICBjb2xvcjoge1xyXG4gICAgICAgIGRhcms6ICcjMDAwMDAwJyxcclxuICAgICAgICBsaWdodDogJyNGRkZGRkYnXHJcbiAgICAgIH0sXHJcbiAgICAgIHdpZHRoOiAzMDBcclxuICAgIH0pXHJcbiAgICBcclxuICAgIHJldHVybiBxckJ1ZmZlclxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZW5lcmF0aW5nIFFSIGJ1ZmZlcjonLCBlcnJvcilcclxuICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgYWwgZ2VuZXJhciBlbCBjw7NkaWdvIFFSIGNvbW8gYnVmZmVyJylcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVVuaXF1ZVFSQ29kZShldmVudElkOiBzdHJpbmcsIHVzZXJJZDogc3RyaW5nLCB0aW1lc3RhbXA6IG51bWJlciwgaW5kZXg6IG51bWJlciA9IDApOiBzdHJpbmcge1xyXG4gIGNvbnN0IHJhbmRvbVN0cmluZyA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLCAxNSlcclxuICBjb25zdCB0aW1lU3RyaW5nID0gdGltZXN0YW1wLnRvU3RyaW5nKDM2KVxyXG4gIGNvbnN0IGV2ZW50U3RyaW5nID0gZXZlbnRJZC5zdWJzdHJpbmcoMCwgOClcclxuICBjb25zdCB1c2VyU3RyaW5nID0gdXNlcklkLnN1YnN0cmluZygwLCA4KVxyXG4gIFxyXG4gIHJldHVybiBgJHtldmVudFN0cmluZ30tJHt1c2VyU3RyaW5nfS0ke3RpbWVTdHJpbmd9LSR7cmFuZG9tU3RyaW5nfS0ke2luZGV4fWAudG9VcHBlckNhc2UoKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVRUkNvZGUocXJDb2RlOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICBjb25zdCBxclJlZ2V4ID0gL15bQS1aMC05XXs4fS1bQS1aMC05XXs4fS1bQS1aMC05XSstW0EtWjAtOV0rLVxcZCskL1xyXG4gIHJldHVybiBxclJlZ2V4LnRlc3QocXJDb2RlKVxyXG59Il0sInZlcnNpb24iOjN9