{"file":"C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\__tests__\\lib\\auth.test.ts","mappings":";;AACA,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAA;AAE7D,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,UAAU,EAAE,cAAc,EAAE,EAAE,EAAE,CAAC,CAAC,CAAA;AAI3F,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,GAAG,EAAE,CAAC,CAAC;IAClC,YAAY,EAAE;QACZ,WAAW,EAAE,GAAG,EAAE,CAAC,CAAC;YAClB,WAAW,EAAE,eAAe;YAC5B,WAAW,EAAE,eAAe;SAC7B,CAAC;KACH;CACF,CAAC,CAAC,CAAA;AAdH,MAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;AAE1B,MAAM,cAAc,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;AAGhC,MAAM,eAAe,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;AACjC,MAAM,eAAe,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;AAUjC,yCAAmD;AACnD,iDAAyD;AACzD,6CAAyC;AAEzC,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACvC,UAAU,CAAC,GAAG,EAAE;QACd,IAAI,CAAC,aAAa,EAAE,CAAA;IACtB,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;QACpD,CAAC;QAAC,aAAmC,CAAC,iBAAiB,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,CAAA;QAC9E,eAAe,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAA;QAE1C,MAAM,IAAI,GAAG,MAAM,IAAA,yBAAkB,GAAE,CAAA;QACvC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IAC5B,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;QACnD,CAAC;QAAC,aAAmC,CAAC,iBAAiB,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,CAAA;QAC9E,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,CACtC;QAAC,eAAM,CAAC,IAAI,CAAC,UAAmC,CAAC,iBAAiB,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAA;QAEpG,MAAM,IAAI,GAAG,MAAM,IAAA,yBAAkB,GAAE,CAAA;QACvC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QAC9B,MAAM,CAAC,eAAe,CAAC,CAAC,gBAAgB,EAAE,CAAA;IAC5C,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","names":[],"sources":["C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\__tests__\\lib\\auth.test.ts"],"sourcesContent":["const mockAuth = jest.fn()\r\njest.mock('@clerk/nextjs/server', () => ({ auth: mockAuth }))\r\nconst mockFindUnique = jest.fn()\r\njest.mock('../../lib/prisma', () => ({ prisma: { user: { findUnique: mockFindUnique } } }))\r\n\r\nconst mockGetUserRole = jest.fn()\r\nconst mockSetUserRole = jest.fn()\r\njest.mock('../../lib/redis', () => ({\r\n  CacheService: {\r\n    getInstance: () => ({\r\n      getUserRole: mockGetUserRole,\r\n      setUserRole: mockSetUserRole,\r\n    })\r\n  }\r\n}))\r\n\r\nimport { getCurrentUserRole } from '../../lib/auth'\r\nimport { auth as authImport } from '@clerk/nextjs/server'\r\nimport { prisma } from '../../lib/prisma'\r\n\r\ndescribe('auth.getCurrentUserRole', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  it('returns role from cache when present', async () => {\r\n    ;(authImport as unknown as jest.Mock).mockResolvedValue({ userId: 'clerk_1' })\r\n    mockGetUserRole.mockResolvedValue('ADMIN')\r\n\r\n    const role = await getCurrentUserRole()\r\n    expect(role).toBe('ADMIN')\r\n  })\r\n\r\n  it('falls back to db when cache missing', async () => {\r\n    ;(authImport as unknown as jest.Mock).mockResolvedValue({ userId: 'clerk_2' })\r\n    mockGetUserRole.mockResolvedValue(null)\r\n    ;(prisma.user.findUnique as unknown as jest.Mock).mockResolvedValue({ role: 'ORGANIZER', id: 'u1' })\r\n\r\n    const role = await getCurrentUserRole()\r\n    expect(role).toBe('ORGANIZER')\r\n    expect(mockSetUserRole).toHaveBeenCalled()\r\n  })\r\n})\r\n"],"version":3}