14b3c5e233da51a533307e3c1f293ef2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('@clerk/nextjs/server', () => ({ auth: mockAuth }));
jest.mock('../../lib/prisma', () => ({ prisma: { user: { findUnique: mockFindUnique } } }));
jest.mock('../../lib/redis', () => ({
    CacheService: {
        getInstance: () => ({
            getUserRole: mockGetUserRole,
            setUserRole: mockSetUserRole,
        })
    }
}));
const mockAuth = jest.fn();
const mockFindUnique = jest.fn();
const mockGetUserRole = jest.fn();
const mockSetUserRole = jest.fn();
const auth_1 = require("../../lib/auth");
const server_1 = require("@clerk/nextjs/server");
const prisma_1 = require("../../lib/prisma");
describe('auth.getCurrentUserRole', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('returns role from cache when present', async () => {
        ;
        server_1.auth.mockResolvedValue({ userId: 'clerk_1' });
        mockGetUserRole.mockResolvedValue('ADMIN');
        const role = await (0, auth_1.getCurrentUserRole)();
        expect(role).toBe('ADMIN');
    });
    it('falls back to db when cache missing', async () => {
        ;
        server_1.auth.mockResolvedValue({ userId: 'clerk_2' });
        mockGetUserRole.mockResolvedValue(null);
        prisma_1.prisma.user.findUnique.mockResolvedValue({ role: 'ORGANIZER', id: 'u1' });
        const role = await (0, auth_1.getCurrentUserRole)();
        expect(role).toBe('ORGANIZER');
        expect(mockSetUserRole).toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxCaWx1clxcRG9jdW1lbnRzXFxEZXZlbG9wbWVudFxcTmV4dFxcc29yeWNrLWFjY2Vzc1xcc3JjXFxfX3Rlc3RzX19cXGxpYlxcYXV0aC50ZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBQ0EsSUFBSSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUU3RCxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUkzRixJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDbEMsWUFBWSxFQUFFO1FBQ1osV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDbEIsV0FBVyxFQUFFLGVBQWU7WUFDNUIsV0FBVyxFQUFFLGVBQWU7U0FDN0IsQ0FBQztLQUNIO0NBQ0YsQ0FBQyxDQUFDLENBQUE7QUFkSCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUE7QUFFMUIsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFBO0FBR2hDLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQTtBQUNqQyxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUE7QUFVakMseUNBQW1EO0FBQ25ELGlEQUF5RDtBQUN6RCw2Q0FBeUM7QUFFekMsUUFBUSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtJQUN2QyxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFBO0lBQ3RCLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLHNDQUFzQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3BELENBQUM7UUFBQyxhQUFtQyxDQUFDLGlCQUFpQixDQUFDLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUE7UUFDOUUsZUFBZSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRTFDLE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBQSx5QkFBa0IsR0FBRSxDQUFBO1FBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDNUIsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMscUNBQXFDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDbkQsQ0FBQztRQUFDLGFBQW1DLENBQUMsaUJBQWlCLENBQUMsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQTtRQUM5RSxlQUFlLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQ3RDO1FBQUMsZUFBTSxDQUFDLElBQUksQ0FBQyxVQUFtQyxDQUFDLGlCQUFpQixDQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtRQUVwRyxNQUFNLElBQUksR0FBRyxNQUFNLElBQUEseUJBQWtCLEdBQUUsQ0FBQTtRQUN2QyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQzlCLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFBO0lBQzVDLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxCaWx1clxcRG9jdW1lbnRzXFxEZXZlbG9wbWVudFxcTmV4dFxcc29yeWNrLWFjY2Vzc1xcc3JjXFxfX3Rlc3RzX19cXGxpYlxcYXV0aC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG1vY2tBdXRoID0gamVzdC5mbigpXHJcbmplc3QubW9jaygnQGNsZXJrL25leHRqcy9zZXJ2ZXInLCAoKSA9PiAoeyBhdXRoOiBtb2NrQXV0aCB9KSlcclxuY29uc3QgbW9ja0ZpbmRVbmlxdWUgPSBqZXN0LmZuKClcclxuamVzdC5tb2NrKCcuLi8uLi9saWIvcHJpc21hJywgKCkgPT4gKHsgcHJpc21hOiB7IHVzZXI6IHsgZmluZFVuaXF1ZTogbW9ja0ZpbmRVbmlxdWUgfSB9IH0pKVxyXG5cclxuY29uc3QgbW9ja0dldFVzZXJSb2xlID0gamVzdC5mbigpXHJcbmNvbnN0IG1vY2tTZXRVc2VyUm9sZSA9IGplc3QuZm4oKVxyXG5qZXN0Lm1vY2soJy4uLy4uL2xpYi9yZWRpcycsICgpID0+ICh7XHJcbiAgQ2FjaGVTZXJ2aWNlOiB7XHJcbiAgICBnZXRJbnN0YW5jZTogKCkgPT4gKHtcclxuICAgICAgZ2V0VXNlclJvbGU6IG1vY2tHZXRVc2VyUm9sZSxcclxuICAgICAgc2V0VXNlclJvbGU6IG1vY2tTZXRVc2VyUm9sZSxcclxuICAgIH0pXHJcbiAgfVxyXG59KSlcclxuXHJcbmltcG9ydCB7IGdldEN1cnJlbnRVc2VyUm9sZSB9IGZyb20gJy4uLy4uL2xpYi9hdXRoJ1xyXG5pbXBvcnQgeyBhdXRoIGFzIGF1dGhJbXBvcnQgfSBmcm9tICdAY2xlcmsvbmV4dGpzL3NlcnZlcidcclxuaW1wb3J0IHsgcHJpc21hIH0gZnJvbSAnLi4vLi4vbGliL3ByaXNtYSdcclxuXHJcbmRlc2NyaWJlKCdhdXRoLmdldEN1cnJlbnRVc2VyUm9sZScsICgpID0+IHtcclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpXHJcbiAgfSlcclxuXHJcbiAgaXQoJ3JldHVybnMgcm9sZSBmcm9tIGNhY2hlIHdoZW4gcHJlc2VudCcsIGFzeW5jICgpID0+IHtcclxuICAgIDsoYXV0aEltcG9ydCBhcyB1bmtub3duIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoeyB1c2VySWQ6ICdjbGVya18xJyB9KVxyXG4gICAgbW9ja0dldFVzZXJSb2xlLm1vY2tSZXNvbHZlZFZhbHVlKCdBRE1JTicpXHJcblxyXG4gICAgY29uc3Qgcm9sZSA9IGF3YWl0IGdldEN1cnJlbnRVc2VyUm9sZSgpXHJcbiAgICBleHBlY3Qocm9sZSkudG9CZSgnQURNSU4nKVxyXG4gIH0pXHJcblxyXG4gIGl0KCdmYWxscyBiYWNrIHRvIGRiIHdoZW4gY2FjaGUgbWlzc2luZycsIGFzeW5jICgpID0+IHtcclxuICAgIDsoYXV0aEltcG9ydCBhcyB1bmtub3duIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoeyB1c2VySWQ6ICdjbGVya18yJyB9KVxyXG4gICAgbW9ja0dldFVzZXJSb2xlLm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpXHJcbiAgICA7KHByaXNtYS51c2VyLmZpbmRVbmlxdWUgYXMgdW5rbm93biBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHsgcm9sZTogJ09SR0FOSVpFUicsIGlkOiAndTEnIH0pXHJcblxyXG4gICAgY29uc3Qgcm9sZSA9IGF3YWl0IGdldEN1cnJlbnRVc2VyUm9sZSgpXHJcbiAgICBleHBlY3Qocm9sZSkudG9CZSgnT1JHQU5JWkVSJylcclxuICAgIGV4cGVjdChtb2NrU2V0VXNlclJvbGUpLnRvSGF2ZUJlZW5DYWxsZWQoKVxyXG4gIH0pXHJcbn0pXHJcbiJdLCJ2ZXJzaW9uIjozfQ==