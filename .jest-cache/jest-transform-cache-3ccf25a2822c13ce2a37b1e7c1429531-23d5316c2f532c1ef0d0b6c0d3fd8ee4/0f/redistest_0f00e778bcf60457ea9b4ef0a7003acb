b2d3e439f3e8fb7d64172686bad1d222
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('ioredis', () => {
    return {
        default: jest.fn().mockImplementation(() => ({
            pipeline: () => ({ setex: jest.fn(), exec: jest.fn() }),
            setex: jest.fn(),
            get: jest.fn(),
            del: jest.fn(),
            keys: jest.fn().mockResolvedValue([]),
            ping: jest.fn().mockResolvedValue('PONG'),
            quit: jest.fn().mockResolvedValue(undefined),
        })),
    };
});
const redis_1 = require("@/lib/redis");
describe('CacheService basic operations', () => {
    it('setUserBatch uses pipeline and exec', async () => {
        const cache = redis_1.CacheService.getInstance();
        // Should not throw
        await expect(cache.setUserBatch('clerk_1', { id: '1', clerkId: 'clerk_1', email: 'a@a.com', role: 'USER' })).resolves.toBeUndefined();
    });
    it('ping returns true when redis PONG', async () => {
        const cache = redis_1.CacheService.getInstance();
        const ok = await cache.ping();
        expect(ok).toBe(true);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxCaWx1clxcRG9jdW1lbnRzXFxEZXZlbG9wbWVudFxcTmV4dFxcc29yeWNrLWFjY2Vzc1xcc3JjXFxfX3Rlc3RzX19cXGxpYlxccmVkaXMudGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQUVBLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtJQUN4QixPQUFPO1FBQ0wsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQzNDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDdkQsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDaEIsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDZCxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNkLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDO1lBQ3JDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDO1lBQ3pDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDO1NBQzdDLENBQUMsQ0FBQztLQUNKLENBQUE7QUFDSCxDQUFDLENBQUMsQ0FBQTtBQWRGLHVDQUEwQztBQWdCMUMsUUFBUSxDQUFDLCtCQUErQixFQUFFLEdBQUcsRUFBRTtJQUM3QyxFQUFFLENBQUMscUNBQXFDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDbkQsTUFBTSxLQUFLLEdBQUcsb0JBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtRQUV4QyxtQkFBbUI7UUFDbkIsTUFBTSxNQUFNLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFTLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsQ0FBQTtJQUM5SSxDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyxtQ0FBbUMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNqRCxNQUFNLEtBQUssR0FBRyxvQkFBWSxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBQ3hDLE1BQU0sRUFBRSxHQUFHLE1BQU0sS0FBSyxDQUFDLElBQUksRUFBRSxDQUFBO1FBQzdCLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDdkIsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXEJpbHVyXFxEb2N1bWVudHNcXERldmVsb3BtZW50XFxOZXh0XFxzb3J5Y2stYWNjZXNzXFxzcmNcXF9fdGVzdHNfX1xcbGliXFxyZWRpcy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENhY2hlU2VydmljZSB9IGZyb20gJ0AvbGliL3JlZGlzJ1xyXG5cclxuamVzdC5tb2NrKCdpb3JlZGlzJywgKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICBkZWZhdWx0OiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XHJcbiAgICAgIHBpcGVsaW5lOiAoKSA9PiAoeyBzZXRleDogamVzdC5mbigpLCBleGVjOiBqZXN0LmZuKCkgfSksXHJcbiAgICAgIHNldGV4OiBqZXN0LmZuKCksXHJcbiAgICAgIGdldDogamVzdC5mbigpLFxyXG4gICAgICBkZWw6IGplc3QuZm4oKSxcclxuICAgICAga2V5czogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKFtdKSxcclxuICAgICAgcGluZzogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKCdQT05HJyksXHJcbiAgICAgIHF1aXQ6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpLFxyXG4gICAgfSkpLFxyXG4gIH1cclxufSlcclxuXHJcbmRlc2NyaWJlKCdDYWNoZVNlcnZpY2UgYmFzaWMgb3BlcmF0aW9ucycsICgpID0+IHtcclxuICBpdCgnc2V0VXNlckJhdGNoIHVzZXMgcGlwZWxpbmUgYW5kIGV4ZWMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBjYWNoZSA9IENhY2hlU2VydmljZS5nZXRJbnN0YW5jZSgpXHJcblxyXG4gICAgLy8gU2hvdWxkIG5vdCB0aHJvd1xyXG4gICAgYXdhaXQgZXhwZWN0KGNhY2hlLnNldFVzZXJCYXRjaCgnY2xlcmtfMScsIHsgaWQ6ICcxJywgY2xlcmtJZDogJ2NsZXJrXzEnLCBlbWFpbDogJ2FAYS5jb20nLCByb2xlOiAnVVNFUicgfSBhcyBhbnkpKS5yZXNvbHZlcy50b0JlVW5kZWZpbmVkKClcclxuICB9KVxyXG5cclxuICBpdCgncGluZyByZXR1cm5zIHRydWUgd2hlbiByZWRpcyBQT05HJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgY2FjaGUgPSBDYWNoZVNlcnZpY2UuZ2V0SW5zdGFuY2UoKVxyXG4gICAgY29uc3Qgb2sgPSBhd2FpdCBjYWNoZS5waW5nKClcclxuICAgIGV4cGVjdChvaykudG9CZSh0cnVlKVxyXG4gIH0pXHJcbn0pXHJcbiJdLCJ2ZXJzaW9uIjozfQ==