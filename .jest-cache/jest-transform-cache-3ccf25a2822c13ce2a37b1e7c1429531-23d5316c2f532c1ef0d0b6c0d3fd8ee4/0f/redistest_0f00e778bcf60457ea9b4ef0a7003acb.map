{"file":"C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\__tests__\\lib\\redis.test.ts","mappings":";;AAEA,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE;IACxB,OAAO;QACL,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,CAAC;YAC3C,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC;YACvD,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;YAChB,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;YACd,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;YACd,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC;YACrC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,MAAM,CAAC;YACzC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;SAC7C,CAAC,CAAC;KACJ,CAAA;AACH,CAAC,CAAC,CAAA;AAdF,uCAA0C;AAgB1C,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;IAC7C,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;QACnD,MAAM,KAAK,GAAG,oBAAY,CAAC,WAAW,EAAE,CAAA;QAExC,mBAAmB;QACnB,MAAM,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,SAAS,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,EAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAA;IAC9I,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;QACjD,MAAM,KAAK,GAAG,oBAAY,CAAC,WAAW,EAAE,CAAA;QACxC,MAAM,EAAE,GAAG,MAAM,KAAK,CAAC,IAAI,EAAE,CAAA;QAC7B,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IACvB,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","names":[],"sources":["C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\__tests__\\lib\\redis.test.ts"],"sourcesContent":["import { CacheService } from '@/lib/redis'\r\n\r\njest.mock('ioredis', () => {\r\n  return {\r\n    default: jest.fn().mockImplementation(() => ({\r\n      pipeline: () => ({ setex: jest.fn(), exec: jest.fn() }),\r\n      setex: jest.fn(),\r\n      get: jest.fn(),\r\n      del: jest.fn(),\r\n      keys: jest.fn().mockResolvedValue([]),\r\n      ping: jest.fn().mockResolvedValue('PONG'),\r\n      quit: jest.fn().mockResolvedValue(undefined),\r\n    })),\r\n  }\r\n})\r\n\r\ndescribe('CacheService basic operations', () => {\r\n  it('setUserBatch uses pipeline and exec', async () => {\r\n    const cache = CacheService.getInstance()\r\n\r\n    // Should not throw\r\n    await expect(cache.setUserBatch('clerk_1', { id: '1', clerkId: 'clerk_1', email: 'a@a.com', role: 'USER' } as any)).resolves.toBeUndefined()\r\n  })\r\n\r\n  it('ping returns true when redis PONG', async () => {\r\n    const cache = CacheService.getInstance()\r\n    const ok = await cache.ping()\r\n    expect(ok).toBe(true)\r\n  })\r\n})\r\n"],"version":3}