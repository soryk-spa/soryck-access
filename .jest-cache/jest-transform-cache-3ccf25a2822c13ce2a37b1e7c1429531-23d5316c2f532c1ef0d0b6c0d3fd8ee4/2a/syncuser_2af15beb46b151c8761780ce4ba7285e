bd053d39b65e32b3371546f4215b0f26
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.syncUserFromClerk = syncUserFromClerk;
const server_1 = require("@clerk/nextjs/server");
const prisma_1 = require("@/lib/prisma");
const client_1 = require("@prisma/client");
async function syncUserFromClerk(clerkId) {
    var _a, _b, _c;
    try {
        const client = await (0, server_1.clerkClient)();
        const clerkUser = await client.users.getUser(clerkId);
        if (!clerkUser) {
            throw new Error('Usuario no encontrado en Clerk');
        }
        const existingUser = await prisma_1.prisma.user.findUnique({
            where: { clerkId }
        });
        if (existingUser) {
            return existingUser;
        }
        const userEmail = ((_a = clerkUser.emailAddresses[0]) === null || _a === void 0 ? void 0 : _a.emailAddress) || '';
        const existingUserByEmail = await prisma_1.prisma.user.findUnique({
            where: { email: userEmail }
        });
        if (existingUserByEmail && existingUserByEmail.clerkId !== clerkId) {
            console.log(`Actualizando clerkId para usuario existente: ${userEmail}`);
            const updatedUser = await prisma_1.prisma.user.update({
                where: { email: userEmail },
                data: {
                    clerkId,
                    firstName: clerkUser.firstName || existingUserByEmail.firstName,
                    lastName: clerkUser.lastName || existingUserByEmail.lastName,
                    imageUrl: clerkUser.imageUrl || existingUserByEmail.imageUrl,
                }
            });
            return updatedUser;
        }
        let userRole = client_1.UserRole.CLIENT;
        if (clerkUser.publicMetadata && typeof clerkUser.publicMetadata === 'object' && 'role' in clerkUser.publicMetadata) {
            const metadataRole = clerkUser.publicMetadata.role;
            if (Object.values(client_1.UserRole).includes(metadataRole)) {
                userRole = metadataRole;
            }
        }
        const userCount = await prisma_1.prisma.user.count();
        if (userCount === 0) {
            userRole = client_1.UserRole.ADMIN;
        }
        const organizerEmails = ((_b = process.env.ORGANIZER_EMAILS) === null || _b === void 0 ? void 0 : _b.split(',')) || [];
        const adminEmails = ((_c = process.env.ADMIN_EMAILS) === null || _c === void 0 ? void 0 : _c.split(',')) || [];
        if (adminEmails.includes(userEmail)) {
            userRole = client_1.UserRole.ADMIN;
        }
        else if (organizerEmails.includes(userEmail)) {
            userRole = client_1.UserRole.ORGANIZER;
        }
        const newUser = await prisma_1.prisma.user.create({
            data: {
                clerkId,
                email: userEmail,
                firstName: clerkUser.firstName || '',
                lastName: clerkUser.lastName || '',
                imageUrl: clerkUser.imageUrl || '',
                role: userRole,
            },
        });
        console.log(`Usuario sincronizado: ${clerkId} con rol: ${userRole}`);
        return newUser;
    }
    catch (error) {
        console.error('Error sincronizando usuario:', error);
        throw error;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxCaWx1clxcRG9jdW1lbnRzXFxEZXZlbG9wbWVudFxcTmV4dFxcc29yeWNrLWFjY2Vzc1xcc3JjXFxsaWJcXHN5bmMtdXNlci50cyIsIm1hcHBpbmdzIjoiOztBQUlBLDhDQW1GQztBQXZGRCxpREFBa0Q7QUFDbEQseUNBQXFDO0FBQ3JDLDJDQUF5QztBQUVsQyxLQUFLLFVBQVUsaUJBQWlCLENBQUMsT0FBZTs7SUFDckQsSUFBSSxDQUFDO1FBQ0gsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFBLG9CQUFXLEdBQUUsQ0FBQTtRQUNsQyxNQUFNLFNBQVMsR0FBRyxNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRXJELElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQTtRQUNuRCxDQUFDO1FBR0QsTUFBTSxZQUFZLEdBQUcsTUFBTSxlQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUNoRCxLQUFLLEVBQUUsRUFBRSxPQUFPLEVBQUU7U0FDbkIsQ0FBQyxDQUFBO1FBRUYsSUFBSSxZQUFZLEVBQUUsQ0FBQztZQUNqQixPQUFPLFlBQVksQ0FBQTtRQUNyQixDQUFDO1FBR0QsTUFBTSxTQUFTLEdBQUcsQ0FBQSxNQUFBLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLDBDQUFFLFlBQVksS0FBSSxFQUFFLENBQUE7UUFHakUsTUFBTSxtQkFBbUIsR0FBRyxNQUFNLGVBQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQ3ZELEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUU7U0FDNUIsQ0FBQyxDQUFBO1FBR0YsSUFBSSxtQkFBbUIsSUFBSSxtQkFBbUIsQ0FBQyxPQUFPLEtBQUssT0FBTyxFQUFFLENBQUM7WUFDbkUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnREFBZ0QsU0FBUyxFQUFFLENBQUMsQ0FBQTtZQUN4RSxNQUFNLFdBQVcsR0FBRyxNQUFNLGVBQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO2dCQUMzQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFO2dCQUMzQixJQUFJLEVBQUU7b0JBQ0osT0FBTztvQkFDUCxTQUFTLEVBQUUsU0FBUyxDQUFDLFNBQVMsSUFBSSxtQkFBbUIsQ0FBQyxTQUFTO29CQUMvRCxRQUFRLEVBQUUsU0FBUyxDQUFDLFFBQVEsSUFBSSxtQkFBbUIsQ0FBQyxRQUFRO29CQUM1RCxRQUFRLEVBQUUsU0FBUyxDQUFDLFFBQVEsSUFBSSxtQkFBbUIsQ0FBQyxRQUFRO2lCQUM3RDthQUNGLENBQUMsQ0FBQTtZQUNGLE9BQU8sV0FBVyxDQUFBO1FBQ3BCLENBQUM7UUFFRCxJQUFJLFFBQVEsR0FBYSxpQkFBUSxDQUFDLE1BQU0sQ0FBQTtRQUV4QyxJQUFJLFNBQVMsQ0FBQyxjQUFjLElBQUksT0FBTyxTQUFTLENBQUMsY0FBYyxLQUFLLFFBQVEsSUFBSSxNQUFNLElBQUksU0FBUyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ25ILE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBYyxDQUFBO1lBQzVELElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxpQkFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLFlBQXdCLENBQUMsRUFBRSxDQUFDO2dCQUMvRCxRQUFRLEdBQUcsWUFBd0IsQ0FBQTtZQUNyQyxDQUFDO1FBQ0gsQ0FBQztRQUVELE1BQU0sU0FBUyxHQUFHLE1BQU0sZUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUMzQyxJQUFJLFNBQVMsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUNwQixRQUFRLEdBQUcsaUJBQVEsQ0FBQyxLQUFLLENBQUE7UUFDM0IsQ0FBQztRQUVELE1BQU0sZUFBZSxHQUFHLENBQUEsTUFBQSxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQiwwQ0FBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUksRUFBRSxDQUFBO1FBQ3RFLE1BQU0sV0FBVyxHQUFHLENBQUEsTUFBQSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksMENBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFJLEVBQUUsQ0FBQTtRQUU5RCxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztZQUNwQyxRQUFRLEdBQUcsaUJBQVEsQ0FBQyxLQUFLLENBQUE7UUFDM0IsQ0FBQzthQUFNLElBQUksZUFBZSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO1lBQy9DLFFBQVEsR0FBRyxpQkFBUSxDQUFDLFNBQVMsQ0FBQTtRQUMvQixDQUFDO1FBR0QsTUFBTSxPQUFPLEdBQUcsTUFBTSxlQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUN2QyxJQUFJLEVBQUU7Z0JBQ0osT0FBTztnQkFDUCxLQUFLLEVBQUUsU0FBUztnQkFDaEIsU0FBUyxFQUFFLFNBQVMsQ0FBQyxTQUFTLElBQUksRUFBRTtnQkFDcEMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxRQUFRLElBQUksRUFBRTtnQkFDbEMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxRQUFRLElBQUksRUFBRTtnQkFDbEMsSUFBSSxFQUFFLFFBQVE7YUFDZjtTQUNGLENBQUMsQ0FBQTtRQUVGLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLE9BQU8sYUFBYSxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBQ3BFLE9BQU8sT0FBTyxDQUFBO0lBRWhCLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUNwRCxNQUFNLEtBQUssQ0FBQTtJQUNiLENBQUM7QUFDSCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQmlsdXJcXERvY3VtZW50c1xcRGV2ZWxvcG1lbnRcXE5leHRcXHNvcnljay1hY2Nlc3NcXHNyY1xcbGliXFxzeW5jLXVzZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xlcmtDbGllbnQgfSBmcm9tICdAY2xlcmsvbmV4dGpzL3NlcnZlcidcclxuaW1wb3J0IHsgcHJpc21hIH0gZnJvbSAnQC9saWIvcHJpc21hJ1xyXG5pbXBvcnQgeyBVc2VyUm9sZSB9IGZyb20gJ0BwcmlzbWEvY2xpZW50J1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN5bmNVc2VyRnJvbUNsZXJrKGNsZXJrSWQ6IHN0cmluZykge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBjbGllbnQgPSBhd2FpdCBjbGVya0NsaWVudCgpXHJcbiAgICBjb25zdCBjbGVya1VzZXIgPSBhd2FpdCBjbGllbnQudXNlcnMuZ2V0VXNlcihjbGVya0lkKVxyXG4gICAgXHJcbiAgICBpZiAoIWNsZXJrVXNlcikge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VzdWFyaW8gbm8gZW5jb250cmFkbyBlbiBDbGVyaycpXHJcbiAgICB9XHJcblxyXG4gICAgXG4gICAgY29uc3QgZXhpc3RpbmdVc2VyID0gYXdhaXQgcHJpc21hLnVzZXIuZmluZFVuaXF1ZSh7XHJcbiAgICAgIHdoZXJlOiB7IGNsZXJrSWQgfVxyXG4gICAgfSlcclxuXHJcbiAgICBpZiAoZXhpc3RpbmdVc2VyKSB7XHJcbiAgICAgIHJldHVybiBleGlzdGluZ1VzZXJcclxuICAgIH1cclxuXHJcbiAgICBcbiAgICBjb25zdCB1c2VyRW1haWwgPSBjbGVya1VzZXIuZW1haWxBZGRyZXNzZXNbMF0/LmVtYWlsQWRkcmVzcyB8fCAnJ1xyXG4gICAgXHJcbiAgICBcbiAgICBjb25zdCBleGlzdGluZ1VzZXJCeUVtYWlsID0gYXdhaXQgcHJpc21hLnVzZXIuZmluZFVuaXF1ZSh7XHJcbiAgICAgIHdoZXJlOiB7IGVtYWlsOiB1c2VyRW1haWwgfVxyXG4gICAgfSlcclxuXHJcbiAgICBcbiAgICBpZiAoZXhpc3RpbmdVc2VyQnlFbWFpbCAmJiBleGlzdGluZ1VzZXJCeUVtYWlsLmNsZXJrSWQgIT09IGNsZXJrSWQpIHtcclxuICAgICAgY29uc29sZS5sb2coYEFjdHVhbGl6YW5kbyBjbGVya0lkIHBhcmEgdXN1YXJpbyBleGlzdGVudGU6ICR7dXNlckVtYWlsfWApXHJcbiAgICAgIGNvbnN0IHVwZGF0ZWRVc2VyID0gYXdhaXQgcHJpc21hLnVzZXIudXBkYXRlKHtcclxuICAgICAgICB3aGVyZTogeyBlbWFpbDogdXNlckVtYWlsIH0sXHJcbiAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgY2xlcmtJZCxcclxuICAgICAgICAgIGZpcnN0TmFtZTogY2xlcmtVc2VyLmZpcnN0TmFtZSB8fCBleGlzdGluZ1VzZXJCeUVtYWlsLmZpcnN0TmFtZSxcclxuICAgICAgICAgIGxhc3ROYW1lOiBjbGVya1VzZXIubGFzdE5hbWUgfHwgZXhpc3RpbmdVc2VyQnlFbWFpbC5sYXN0TmFtZSxcclxuICAgICAgICAgIGltYWdlVXJsOiBjbGVya1VzZXIuaW1hZ2VVcmwgfHwgZXhpc3RpbmdVc2VyQnlFbWFpbC5pbWFnZVVybCxcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICAgIHJldHVybiB1cGRhdGVkVXNlclxyXG4gICAgfVxyXG5cclxuICAgIGxldCB1c2VyUm9sZTogVXNlclJvbGUgPSBVc2VyUm9sZS5DTElFTlRcclxuICAgIFxyXG4gICAgaWYgKGNsZXJrVXNlci5wdWJsaWNNZXRhZGF0YSAmJiB0eXBlb2YgY2xlcmtVc2VyLnB1YmxpY01ldGFkYXRhID09PSAnb2JqZWN0JyAmJiAncm9sZScgaW4gY2xlcmtVc2VyLnB1YmxpY01ldGFkYXRhKSB7XHJcbiAgICAgIGNvbnN0IG1ldGFkYXRhUm9sZSA9IGNsZXJrVXNlci5wdWJsaWNNZXRhZGF0YS5yb2xlIGFzIHN0cmluZ1xyXG4gICAgICBpZiAoT2JqZWN0LnZhbHVlcyhVc2VyUm9sZSkuaW5jbHVkZXMobWV0YWRhdGFSb2xlIGFzIFVzZXJSb2xlKSkge1xyXG4gICAgICAgIHVzZXJSb2xlID0gbWV0YWRhdGFSb2xlIGFzIFVzZXJSb2xlXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB1c2VyQ291bnQgPSBhd2FpdCBwcmlzbWEudXNlci5jb3VudCgpXHJcbiAgICBpZiAodXNlckNvdW50ID09PSAwKSB7XHJcbiAgICAgIHVzZXJSb2xlID0gVXNlclJvbGUuQURNSU5cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBvcmdhbml6ZXJFbWFpbHMgPSBwcm9jZXNzLmVudi5PUkdBTklaRVJfRU1BSUxTPy5zcGxpdCgnLCcpIHx8IFtdXHJcbiAgICBjb25zdCBhZG1pbkVtYWlscyA9IHByb2Nlc3MuZW52LkFETUlOX0VNQUlMUz8uc3BsaXQoJywnKSB8fCBbXVxyXG4gICAgXHJcbiAgICBpZiAoYWRtaW5FbWFpbHMuaW5jbHVkZXModXNlckVtYWlsKSkge1xyXG4gICAgICB1c2VyUm9sZSA9IFVzZXJSb2xlLkFETUlOXHJcbiAgICB9IGVsc2UgaWYgKG9yZ2FuaXplckVtYWlscy5pbmNsdWRlcyh1c2VyRW1haWwpKSB7XHJcbiAgICAgIHVzZXJSb2xlID0gVXNlclJvbGUuT1JHQU5JWkVSXHJcbiAgICB9XHJcblxyXG4gICAgXG4gICAgY29uc3QgbmV3VXNlciA9IGF3YWl0IHByaXNtYS51c2VyLmNyZWF0ZSh7XHJcbiAgICAgIGRhdGE6IHtcclxuICAgICAgICBjbGVya0lkLFxyXG4gICAgICAgIGVtYWlsOiB1c2VyRW1haWwsXHJcbiAgICAgICAgZmlyc3ROYW1lOiBjbGVya1VzZXIuZmlyc3ROYW1lIHx8ICcnLFxyXG4gICAgICAgIGxhc3ROYW1lOiBjbGVya1VzZXIubGFzdE5hbWUgfHwgJycsXHJcbiAgICAgICAgaW1hZ2VVcmw6IGNsZXJrVXNlci5pbWFnZVVybCB8fCAnJyxcclxuICAgICAgICByb2xlOiB1c2VyUm9sZSxcclxuICAgICAgfSxcclxuICAgIH0pXHJcblxyXG4gICAgY29uc29sZS5sb2coYFVzdWFyaW8gc2luY3Jvbml6YWRvOiAke2NsZXJrSWR9IGNvbiByb2w6ICR7dXNlclJvbGV9YClcclxuICAgIHJldHVybiBuZXdVc2VyXHJcblxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzaW5jcm9uaXphbmRvIHVzdWFyaW86JywgZXJyb3IpXHJcbiAgICB0aHJvdyBlcnJvclxyXG4gIH1cclxufSJdLCJ2ZXJzaW9uIjozfQ==