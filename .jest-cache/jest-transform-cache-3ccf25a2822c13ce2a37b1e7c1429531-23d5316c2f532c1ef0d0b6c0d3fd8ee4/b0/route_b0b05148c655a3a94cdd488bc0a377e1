815781ffd19b3a117e288b949a473fc8
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GET = GET;
const server_1 = require("next/server");
const qr_1 = require("@/lib/qr");
const qrcode_1 = __importDefault(require("qrcode"));
async function GET(request, { params }) {
    try {
        const { code } = await params;
        console.log(`[QR API] Solicitud para código: ${code}`);
        // Validar formato del código QR
        if (!(0, qr_1.validateQRCode)(code)) {
            console.error('[QR API] Formato de código QR inválido:', code);
            return new server_1.NextResponse('Invalid QR code format', { status: 400 });
        }
        // URL de verificación
        const verificationUrl = `${process.env.NEXT_PUBLIC_APP_URL}/verify/${code}`;
        console.log(`[QR API] Generando QR para: ${verificationUrl}`);
        // Generar QR como buffer con configuración optimizada para email
        const qrBuffer = await qrcode_1.default.toBuffer(verificationUrl, {
            errorCorrectionLevel: 'H', // Alta corrección de errores
            type: 'png',
            margin: 1, // Margen mínimo para email
            color: {
                dark: '#000000',
                light: '#FFFFFF'
            },
            width: 200, // Tamaño más pequeño para email
            scale: 8 // Mayor escala para mejor calidad
        });
        console.log(`[QR API] ✅ QR generado exitosamente, tamaño: ${qrBuffer.length} bytes`);
        const uint8Array = new Uint8Array(qrBuffer);
        return new server_1.NextResponse(uint8Array, {
            status: 200,
            headers: {
                'Content-Type': 'image/png',
                'Cache-Control': 'public, max-age=31536000, immutable', // 1 año
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Content-Length': qrBuffer.length.toString(),
                'X-Content-Type-Options': 'nosniff',
            },
        });
    }
    catch (error) {
        console.error('[QR API] ❌ Error generando código QR:', error);
        return new server_1.NextResponse('Error generating QR code', {
            status: 500,
            headers: {
                'Content-Type': 'text/plain',
            }
        });
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxCaWx1clxcRG9jdW1lbnRzXFxEZXZlbG9wbWVudFxcTmV4dFxcc29yeWNrLWFjY2Vzc1xcc3JjXFxhcHBcXGFwaVxccXJcXFtjb2RlXVxccm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFJQSxrQkEwREM7QUE5REQsd0NBQXVEO0FBQ3ZELGlDQUF5QztBQUN6QyxvREFBMkI7QUFFcEIsS0FBSyxVQUFVLEdBQUcsQ0FDdkIsT0FBb0IsRUFDcEIsRUFBRSxNQUFNLEVBQXlDO0lBRWpELElBQUksQ0FBQztRQUNILE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLE1BQU0sQ0FBQTtRQUU3QixPQUFPLENBQUMsR0FBRyxDQUFDLG1DQUFtQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO1FBRXRELGdDQUFnQztRQUNoQyxJQUFJLENBQUMsSUFBQSxtQkFBYyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDMUIsT0FBTyxDQUFDLEtBQUssQ0FBQyx5Q0FBeUMsRUFBRSxJQUFJLENBQUMsQ0FBQTtZQUM5RCxPQUFPLElBQUkscUJBQVksQ0FBQyx3QkFBd0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFBO1FBQ3BFLENBQUM7UUFFRCxzQkFBc0I7UUFDdEIsTUFBTSxlQUFlLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixXQUFXLElBQUksRUFBRSxDQUFBO1FBRTNFLE9BQU8sQ0FBQyxHQUFHLENBQUMsK0JBQStCLGVBQWUsRUFBRSxDQUFDLENBQUE7UUFFN0QsaUVBQWlFO1FBQ2pFLE1BQU0sUUFBUSxHQUFHLE1BQU0sZ0JBQU0sQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFO1lBQ3RELG9CQUFvQixFQUFFLEdBQUcsRUFBRSw2QkFBNkI7WUFDeEQsSUFBSSxFQUFFLEtBQUs7WUFDWCxNQUFNLEVBQUUsQ0FBQyxFQUFFLDJCQUEyQjtZQUN0QyxLQUFLLEVBQUU7Z0JBQ0wsSUFBSSxFQUFFLFNBQVM7Z0JBQ2YsS0FBSyxFQUFFLFNBQVM7YUFDakI7WUFDRCxLQUFLLEVBQUUsR0FBRyxFQUFFLGdDQUFnQztZQUM1QyxLQUFLLEVBQUUsQ0FBQyxDQUFDLGtDQUFrQztTQUM1QyxDQUFDLENBQUE7UUFFRixPQUFPLENBQUMsR0FBRyxDQUFDLGdEQUFnRCxRQUFRLENBQUMsTUFBTSxRQUFRLENBQUMsQ0FBQTtRQUVwRixNQUFNLFVBQVUsR0FBRyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUUzQyxPQUFPLElBQUkscUJBQVksQ0FBQyxVQUFVLEVBQUU7WUFDbEMsTUFBTSxFQUFFLEdBQUc7WUFDWCxPQUFPLEVBQUU7Z0JBQ1AsY0FBYyxFQUFFLFdBQVc7Z0JBQzNCLGVBQWUsRUFBRSxxQ0FBcUMsRUFBRSxRQUFRO2dCQUNoRSw2QkFBNkIsRUFBRSxHQUFHO2dCQUNsQyw4QkFBOEIsRUFBRSxLQUFLO2dCQUNyQyw4QkFBOEIsRUFBRSxjQUFjO2dCQUM5QyxnQkFBZ0IsRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRTtnQkFDNUMsd0JBQXdCLEVBQUUsU0FBUzthQUNwQztTQUNGLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyx1Q0FBdUMsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUM3RCxPQUFPLElBQUkscUJBQVksQ0FBQywwQkFBMEIsRUFBRTtZQUNsRCxNQUFNLEVBQUUsR0FBRztZQUNYLE9BQU8sRUFBRTtnQkFDUCxjQUFjLEVBQUUsWUFBWTthQUM3QjtTQUNGLENBQUMsQ0FBQTtJQUNKLENBQUM7QUFDSCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQmlsdXJcXERvY3VtZW50c1xcRGV2ZWxvcG1lbnRcXE5leHRcXHNvcnljay1hY2Nlc3NcXHNyY1xcYXBwXFxhcGlcXHFyXFxbY29kZV1cXHJvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcidcclxuaW1wb3J0IHsgdmFsaWRhdGVRUkNvZGUgfSBmcm9tICdAL2xpYi9xcidcclxuaW1wb3J0IFFSQ29kZSBmcm9tICdxcmNvZGUnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKFxyXG4gIHJlcXVlc3Q6IE5leHRSZXF1ZXN0LFxyXG4gIHsgcGFyYW1zIH06IHsgcGFyYW1zOiBQcm9taXNlPHsgY29kZTogc3RyaW5nIH0+IH1cclxuKSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHsgY29kZSB9ID0gYXdhaXQgcGFyYW1zXHJcbiAgICBcclxuICAgIGNvbnNvbGUubG9nKGBbUVIgQVBJXSBTb2xpY2l0dWQgcGFyYSBjw7NkaWdvOiAke2NvZGV9YClcclxuICAgIFxyXG4gICAgLy8gVmFsaWRhciBmb3JtYXRvIGRlbCBjw7NkaWdvIFFSXHJcbiAgICBpZiAoIXZhbGlkYXRlUVJDb2RlKGNvZGUpKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tRUiBBUEldIEZvcm1hdG8gZGUgY8OzZGlnbyBRUiBpbnbDoWxpZG86JywgY29kZSlcclxuICAgICAgcmV0dXJuIG5ldyBOZXh0UmVzcG9uc2UoJ0ludmFsaWQgUVIgY29kZSBmb3JtYXQnLCB7IHN0YXR1czogNDAwIH0pXHJcbiAgICB9XHJcblxyXG4gICAgLy8gVVJMIGRlIHZlcmlmaWNhY2nDs25cclxuICAgIGNvbnN0IHZlcmlmaWNhdGlvblVybCA9IGAke3Byb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQUF9VUkx9L3ZlcmlmeS8ke2NvZGV9YFxyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZyhgW1FSIEFQSV0gR2VuZXJhbmRvIFFSIHBhcmE6ICR7dmVyaWZpY2F0aW9uVXJsfWApXHJcbiAgICBcclxuICAgIC8vIEdlbmVyYXIgUVIgY29tbyBidWZmZXIgY29uIGNvbmZpZ3VyYWNpw7NuIG9wdGltaXphZGEgcGFyYSBlbWFpbFxyXG4gICAgY29uc3QgcXJCdWZmZXIgPSBhd2FpdCBRUkNvZGUudG9CdWZmZXIodmVyaWZpY2F0aW9uVXJsLCB7XHJcbiAgICAgIGVycm9yQ29ycmVjdGlvbkxldmVsOiAnSCcsIC8vIEFsdGEgY29ycmVjY2nDs24gZGUgZXJyb3Jlc1xyXG4gICAgICB0eXBlOiAncG5nJyxcclxuICAgICAgbWFyZ2luOiAxLCAvLyBNYXJnZW4gbcOtbmltbyBwYXJhIGVtYWlsXHJcbiAgICAgIGNvbG9yOiB7XHJcbiAgICAgICAgZGFyazogJyMwMDAwMDAnLFxyXG4gICAgICAgIGxpZ2h0OiAnI0ZGRkZGRidcclxuICAgICAgfSxcclxuICAgICAgd2lkdGg6IDIwMCwgLy8gVGFtYcOxbyBtw6FzIHBlcXVlw7FvIHBhcmEgZW1haWxcclxuICAgICAgc2NhbGU6IDggLy8gTWF5b3IgZXNjYWxhIHBhcmEgbWVqb3IgY2FsaWRhZFxyXG4gICAgfSlcclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coYFtRUiBBUEldIOKchSBRUiBnZW5lcmFkbyBleGl0b3NhbWVudGUsIHRhbWHDsW86ICR7cXJCdWZmZXIubGVuZ3RofSBieXRlc2ApXHJcbiAgICBcclxuICAgIGNvbnN0IHVpbnQ4QXJyYXkgPSBuZXcgVWludDhBcnJheShxckJ1ZmZlcilcclxuICAgIFxyXG4gICAgcmV0dXJuIG5ldyBOZXh0UmVzcG9uc2UodWludDhBcnJheSwge1xyXG4gICAgICBzdGF0dXM6IDIwMCxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnaW1hZ2UvcG5nJyxcclxuICAgICAgICAnQ2FjaGUtQ29udHJvbCc6ICdwdWJsaWMsIG1heC1hZ2U9MzE1MzYwMDAsIGltbXV0YWJsZScsIC8vIDEgYcOxb1xyXG4gICAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOiAnKicsXHJcbiAgICAgICAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHMnOiAnR0VUJyxcclxuICAgICAgICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVycyc6ICdDb250ZW50LVR5cGUnLFxyXG4gICAgICAgICdDb250ZW50LUxlbmd0aCc6IHFyQnVmZmVyLmxlbmd0aC50b1N0cmluZygpLFxyXG4gICAgICAgICdYLUNvbnRlbnQtVHlwZS1PcHRpb25zJzogJ25vc25pZmYnLFxyXG4gICAgICB9LFxyXG4gICAgfSlcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignW1FSIEFQSV0g4p2MIEVycm9yIGdlbmVyYW5kbyBjw7NkaWdvIFFSOicsIGVycm9yKVxyXG4gICAgcmV0dXJuIG5ldyBOZXh0UmVzcG9uc2UoJ0Vycm9yIGdlbmVyYXRpbmcgUVIgY29kZScsIHsgXHJcbiAgICAgIHN0YXR1czogNTAwLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICd0ZXh0L3BsYWluJyxcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcbn0iXSwidmVyc2lvbiI6M30=