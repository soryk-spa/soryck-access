419553afaa43b8ecec1d74dbee40e673
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GET = GET;
const server_1 = require("next/server");
const qr_1 = require("@/lib/qr");
const qrcode_1 = __importDefault(require("qrcode"));
async function GET(request, { params }) {
    try {
        const { code } = await params;
        console.log(`[QR API] Solicitud para código: ${code}`);
        if (!(0, qr_1.validateQRCode)(code)) {
            console.error('[QR API] Formato de código QR inválido:', code);
            return new server_1.NextResponse('Invalid QR code format', { status: 400 });
        }
        const verificationUrl = `${process.env.NEXT_PUBLIC_APP_URL}/verify/${code}`;
        console.log(`[QR API] Generando QR para: ${verificationUrl}`);
        const qrBuffer = await qrcode_1.default.toBuffer(verificationUrl, {
            errorCorrectionLevel: 'H',
            type: 'png',
            margin: 1,
            color: {
                dark: '#000000',
                light: '#FFFFFF'
            },
            width: 200,
            scale: 8
        });
        console.log(`[QR API] ✅ QR generado exitosamente, tamaño: ${qrBuffer.length} bytes`);
        const uint8Array = new Uint8Array(qrBuffer);
        return new server_1.NextResponse(uint8Array, {
            status: 200,
            headers: {
                'Content-Type': 'image/png',
                'Cache-Control': 'public, max-age=31536000, immutable',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Content-Length': qrBuffer.length.toString(),
                'X-Content-Type-Options': 'nosniff',
            },
        });
    }
    catch (error) {
        console.error('[QR API] ❌ Error generando código QR:', error);
        return new server_1.NextResponse('Error generating QR code', {
            status: 500,
            headers: {
                'Content-Type': 'text/plain',
            }
        });
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxCaWx1clxcRG9jdW1lbnRzXFxEZXZlbG9wbWVudFxcTmV4dFxcc29yeWNrLWFjY2Vzc1xcc3JjXFxhcHBcXGFwaVxccXJcXFtjb2RlXVxccm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFJQSxrQkEwREM7QUE5REQsd0NBQXVEO0FBQ3ZELGlDQUF5QztBQUN6QyxvREFBMkI7QUFFcEIsS0FBSyxVQUFVLEdBQUcsQ0FDdkIsT0FBb0IsRUFDcEIsRUFBRSxNQUFNLEVBQXlDO0lBRWpELElBQUksQ0FBQztRQUNILE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLE1BQU0sQ0FBQTtRQUU3QixPQUFPLENBQUMsR0FBRyxDQUFDLG1DQUFtQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO1FBR3RELElBQUksQ0FBQyxJQUFBLG1CQUFjLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUMxQixPQUFPLENBQUMsS0FBSyxDQUFDLHlDQUF5QyxFQUFFLElBQUksQ0FBQyxDQUFBO1lBQzlELE9BQU8sSUFBSSxxQkFBWSxDQUFDLHdCQUF3QixFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUE7UUFDcEUsQ0FBQztRQUdELE1BQU0sZUFBZSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsV0FBVyxJQUFJLEVBQUUsQ0FBQTtRQUUzRSxPQUFPLENBQUMsR0FBRyxDQUFDLCtCQUErQixlQUFlLEVBQUUsQ0FBQyxDQUFBO1FBRzdELE1BQU0sUUFBUSxHQUFHLE1BQU0sZ0JBQU0sQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFO1lBQ3RELG9CQUFvQixFQUFFLEdBQUc7WUFDekIsSUFBSSxFQUFFLEtBQUs7WUFDWCxNQUFNLEVBQUUsQ0FBQztZQUNULEtBQUssRUFBRTtnQkFDTCxJQUFJLEVBQUUsU0FBUztnQkFDZixLQUFLLEVBQUUsU0FBUzthQUNqQjtZQUNELEtBQUssRUFBRSxHQUFHO1lBQ1YsS0FBSyxFQUFFLENBQUM7U0FDVCxDQUFDLENBQUE7UUFFRixPQUFPLENBQUMsR0FBRyxDQUFDLGdEQUFnRCxRQUFRLENBQUMsTUFBTSxRQUFRLENBQUMsQ0FBQTtRQUVwRixNQUFNLFVBQVUsR0FBRyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUUzQyxPQUFPLElBQUkscUJBQVksQ0FBQyxVQUFVLEVBQUU7WUFDbEMsTUFBTSxFQUFFLEdBQUc7WUFDWCxPQUFPLEVBQUU7Z0JBQ1AsY0FBYyxFQUFFLFdBQVc7Z0JBQzNCLGVBQWUsRUFBRSxxQ0FBcUM7Z0JBQ3RELDZCQUE2QixFQUFFLEdBQUc7Z0JBQ2xDLDhCQUE4QixFQUFFLEtBQUs7Z0JBQ3JDLDhCQUE4QixFQUFFLGNBQWM7Z0JBQzlDLGdCQUFnQixFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO2dCQUM1Qyx3QkFBd0IsRUFBRSxTQUFTO2FBQ3BDO1NBQ0YsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLHVDQUF1QyxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQzdELE9BQU8sSUFBSSxxQkFBWSxDQUFDLDBCQUEwQixFQUFFO1lBQ2xELE1BQU0sRUFBRSxHQUFHO1lBQ1gsT0FBTyxFQUFFO2dCQUNQLGNBQWMsRUFBRSxZQUFZO2FBQzdCO1NBQ0YsQ0FBQyxDQUFBO0lBQ0osQ0FBQztBQUNILENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxCaWx1clxcRG9jdW1lbnRzXFxEZXZlbG9wbWVudFxcTmV4dFxcc29yeWNrLWFjY2Vzc1xcc3JjXFxhcHBcXGFwaVxccXJcXFtjb2RlXVxccm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJ1xyXG5pbXBvcnQgeyB2YWxpZGF0ZVFSQ29kZSB9IGZyb20gJ0AvbGliL3FyJ1xyXG5pbXBvcnQgUVJDb2RlIGZyb20gJ3FyY29kZSdcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQoXHJcbiAgcmVxdWVzdDogTmV4dFJlcXVlc3QsXHJcbiAgeyBwYXJhbXMgfTogeyBwYXJhbXM6IFByb21pc2U8eyBjb2RlOiBzdHJpbmcgfT4gfVxyXG4pIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgeyBjb2RlIH0gPSBhd2FpdCBwYXJhbXNcclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coYFtRUiBBUEldIFNvbGljaXR1ZCBwYXJhIGPDs2RpZ286ICR7Y29kZX1gKVxyXG4gICAgXHJcbiAgICBcbiAgICBpZiAoIXZhbGlkYXRlUVJDb2RlKGNvZGUpKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tRUiBBUEldIEZvcm1hdG8gZGUgY8OzZGlnbyBRUiBpbnbDoWxpZG86JywgY29kZSlcclxuICAgICAgcmV0dXJuIG5ldyBOZXh0UmVzcG9uc2UoJ0ludmFsaWQgUVIgY29kZSBmb3JtYXQnLCB7IHN0YXR1czogNDAwIH0pXHJcbiAgICB9XHJcblxyXG4gICAgXG4gICAgY29uc3QgdmVyaWZpY2F0aW9uVXJsID0gYCR7cHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBQX1VSTH0vdmVyaWZ5LyR7Y29kZX1gXHJcbiAgICBcclxuICAgIGNvbnNvbGUubG9nKGBbUVIgQVBJXSBHZW5lcmFuZG8gUVIgcGFyYTogJHt2ZXJpZmljYXRpb25Vcmx9YClcclxuICAgIFxyXG4gICAgXG4gICAgY29uc3QgcXJCdWZmZXIgPSBhd2FpdCBRUkNvZGUudG9CdWZmZXIodmVyaWZpY2F0aW9uVXJsLCB7XHJcbiAgICAgIGVycm9yQ29ycmVjdGlvbkxldmVsOiAnSCcsIFxuICAgICAgdHlwZTogJ3BuZycsXHJcbiAgICAgIG1hcmdpbjogMSwgXG4gICAgICBjb2xvcjoge1xyXG4gICAgICAgIGRhcms6ICcjMDAwMDAwJyxcclxuICAgICAgICBsaWdodDogJyNGRkZGRkYnXHJcbiAgICAgIH0sXHJcbiAgICAgIHdpZHRoOiAyMDAsIFxuICAgICAgc2NhbGU6IDggXG4gICAgfSlcclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coYFtRUiBBUEldIOKchSBRUiBnZW5lcmFkbyBleGl0b3NhbWVudGUsIHRhbWHDsW86ICR7cXJCdWZmZXIubGVuZ3RofSBieXRlc2ApXHJcbiAgICBcclxuICAgIGNvbnN0IHVpbnQ4QXJyYXkgPSBuZXcgVWludDhBcnJheShxckJ1ZmZlcilcclxuICAgIFxyXG4gICAgcmV0dXJuIG5ldyBOZXh0UmVzcG9uc2UodWludDhBcnJheSwge1xyXG4gICAgICBzdGF0dXM6IDIwMCxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnaW1hZ2UvcG5nJyxcclxuICAgICAgICAnQ2FjaGUtQ29udHJvbCc6ICdwdWJsaWMsIG1heC1hZ2U9MzE1MzYwMDAsIGltbXV0YWJsZScsIFxuICAgICAgICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJzogJyonLFxyXG4gICAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzJzogJ0dFVCcsXHJcbiAgICAgICAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LUhlYWRlcnMnOiAnQ29udGVudC1UeXBlJyxcclxuICAgICAgICAnQ29udGVudC1MZW5ndGgnOiBxckJ1ZmZlci5sZW5ndGgudG9TdHJpbmcoKSxcclxuICAgICAgICAnWC1Db250ZW50LVR5cGUtT3B0aW9ucyc6ICdub3NuaWZmJyxcclxuICAgICAgfSxcclxuICAgIH0pXHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ1tRUiBBUEldIOKdjCBFcnJvciBnZW5lcmFuZG8gY8OzZGlnbyBRUjonLCBlcnJvcilcclxuICAgIHJldHVybiBuZXcgTmV4dFJlc3BvbnNlKCdFcnJvciBnZW5lcmF0aW5nIFFSIGNvZGUnLCB7IFxyXG4gICAgICBzdGF0dXM6IDUwMCxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAndGV4dC9wbGFpbicsXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG59Il0sInZlcnNpb24iOjN9