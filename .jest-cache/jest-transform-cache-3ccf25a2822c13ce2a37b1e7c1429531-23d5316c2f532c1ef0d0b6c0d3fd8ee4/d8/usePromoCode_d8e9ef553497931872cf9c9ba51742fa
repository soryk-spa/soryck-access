7f5d7e3849f9b35b673c113e864bd4bd
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.usePromoCodeManagement = usePromoCodeManagement;
exports.usePromoCodeFilters = usePromoCodeFilters;
exports.usePromoCodeStats = usePromoCodeStats;
exports.usePromoCodeSharing = usePromoCodeSharing;
const react_1 = require("react");
const sonner_1 = require("sonner");
function usePromoCodeManagement(initialPromoCodes) {
    const [promoCodes, setPromoCodes] = (0, react_1.useState)(initialPromoCodes);
    const [loadingStates, setLoadingStates] = (0, react_1.useState)({});
    const togglePromoCodeStatus = async (promoCode) => {
        const newStatus = promoCode.status === "ACTIVE" ? "INACTIVE" : "ACTIVE";
        const action = newStatus === "ACTIVE" ? "activar" : "desactivar";
        setLoadingStates(prev => (Object.assign(Object.assign({}, prev), { [promoCode.id]: true })));
        try {
            const response = await fetch(`/api/promo-codes/${promoCode.id}/toggle-status`, {
                method: "PATCH",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ status: newStatus }),
            });
            if (!response.ok) {
                const data = await response.json();
                throw new Error(data.error || `Error al ${action} el código promocional`);
            }
            setPromoCodes(prev => prev.map(code => code.id === promoCode.id
                ? Object.assign(Object.assign({}, code), { status: newStatus }) : code));
            sonner_1.toast.success(`Código promocional ${action === "activar" ? "activado" : "desactivado"} exitosamente`);
        }
        catch (error) {
            console.error(`Error ${action} promo code:`, error);
            sonner_1.toast.error(error instanceof Error ? error.message : `Error al ${action} el código promocional`);
        }
        finally {
            setLoadingStates(prev => (Object.assign(Object.assign({}, prev), { [promoCode.id]: false })));
        }
    };
    const copyToClipboard = (code) => {
        navigator.clipboard.writeText(code);
        sonner_1.toast.success("Código copiado al portapapeles");
    };
    return {
        promoCodes,
        loadingStates,
        togglePromoCodeStatus,
        copyToClipboard,
    };
}
function usePromoCodeFilters(promoCodes) {
    const [filters, setFilters] = (0, react_1.useState)({
        search: "",
        status: "all",
    });
    const filteredPromoCodes = (0, react_1.useMemo)(() => {
        return promoCodes.filter((code) => {
            const matchesSearch = !filters.search ||
                code.code.toLowerCase().includes(filters.search.toLowerCase()) ||
                code.name.toLowerCase().includes(filters.search.toLowerCase());
            const matchesStatus = filters.status === "all" || code.status === filters.status;
            return matchesSearch && matchesStatus;
        });
    }, [promoCodes, filters]);
    const updateFilter = (key, value) => {
        setFilters(prev => (Object.assign(Object.assign({}, prev), { [key]: value })));
    };
    const clearFilters = () => {
        setFilters({ search: "", status: "all" });
    };
    return {
        filters,
        filteredPromoCodes,
        updateFilter,
        clearFilters,
    };
}
function usePromoCodeStats(promoCodes) {
    const stats = (0, react_1.useMemo)(() => {
        const total = promoCodes.length;
        const active = promoCodes.filter(code => code.status === "ACTIVE").length;
        const totalUsages = promoCodes.reduce((sum, code) => sum + code.usedCount, 0);
        const expired = promoCodes.filter(code => code.status === "EXPIRED").length;
        const inactive = promoCodes.filter(code => code.status === "INACTIVE").length;
        const usedUp = promoCodes.filter(code => code.status === "USED_UP").length;
        return {
            total,
            active,
            inactive,
            expired,
            usedUp,
            totalUsages,
            activePercentage: total > 0 ? (active / total) * 100 : 0,
            usageRate: total > 0 ? (totalUsages / total) : 0,
        };
    }, [promoCodes]);
    return stats;
}
function usePromoCodeSharing() {
    const sharePromoCode = (code, formatDiscount) => {
        const shareText = `🎫 ¡Descuento especial! Usa el código ${code.code} y obtén ${formatDiscount(code.type, code.value)} en tu próxima compra.`;
        if (navigator.share) {
            navigator.share({
                title: `Código promocional: ${code.name}`,
                text: shareText,
            });
        }
        else {
            navigator.clipboard.writeText(shareText);
            sonner_1.toast.success("Texto de promoción copiado al portapapeles");
        }
    };
    const exportPromoCodes = (promoCodes) => {
        const csv = generatePromoCodeCSV(promoCodes);
        downloadCSV(csv, 'codigos-promocionales.csv');
        sonner_1.toast.success("Códigos promocionales exportados exitosamente");
    };
    return {
        sharePromoCode,
        exportPromoCodes,
    };
}
function generatePromoCodeCSV(promoCodes) {
    const headers = ['Código', 'Nombre', 'Tipo', 'Valor', 'Estado', 'Usado', 'Límite', 'Válido Desde', 'Válido Hasta'];
    const rows = promoCodes.map(code => {
        var _a;
        return [
            code.code,
            code.name,
            code.type,
            code.value.toString(),
            code.status,
            code.usedCount.toString(),
            ((_a = code.usageLimit) === null || _a === void 0 ? void 0 : _a.toString()) || 'Sin límite',
            code.validFrom,
            code.validUntil || 'Sin fecha límite'
        ];
    });
    return [headers, ...rows]
        .map(row => row.map(cell => `"${cell}"`).join(','))
        .join('\n');
}
function downloadCSV(content, filename) {
    const blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', filename);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,