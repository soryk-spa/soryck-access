d74a6d790051ae2fdf7ed1cd2a998586
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GET = GET;
exports.POST = POST;
const server_1 = require("next/server");
const auth_1 = require("@/lib/auth");
const prisma_1 = require("@/lib/prisma");
const qr_1 = require("@/lib/qr");
const roles_1 = require("@/lib/roles");
async function GET(request, { params }) {
    var _a, _b;
    try {
        const { qrCode } = await params;
        if (!(0, qr_1.validateQRCode)(qrCode)) {
            return server_1.NextResponse.json({ error: "C칩digo QR inv치lido" }, { status: 400 });
        }
        const ticket = await prisma_1.prisma.ticket.findUnique({
            where: { qrCode },
            include: {
                event: {
                    select: {
                        id: true,
                        title: true,
                        startDate: true,
                        endDate: true,
                        location: true,
                        organizer: {
                            select: {
                                id: true,
                                firstName: true,
                                lastName: true,
                                email: true,
                            },
                        },
                    },
                },
                user: {
                    select: {
                        firstName: true,
                        lastName: true,
                        email: true,
                    },
                },
                order: {
                    select: {
                        orderNumber: true,
                        totalAmount: true,
                        currency: true,
                    },
                },
            },
        });
        if (!ticket) {
            return server_1.NextResponse.json({ error: "Ticket no encontrado" }, { status: 404 });
        }
        const attendeeName = ticket.user.firstName
            ? `${ticket.user.firstName} ${ticket.user.lastName || ""}`.trim()
            : ticket.user.email;
        return server_1.NextResponse.json({
            ticket: {
                id: ticket.id,
                qrCode: ticket.qrCode,
                isUsed: ticket.isUsed,
                usedAt: ((_a = ticket.usedAt) === null || _a === void 0 ? void 0 : _a.toISOString()) || null,
                status: ticket.status,
                attendeeName,
                attendeeEmail: ticket.user.email,
                event: Object.assign(Object.assign({}, ticket.event), { startDate: ticket.event.startDate.toISOString(), endDate: ((_b = ticket.event.endDate) === null || _b === void 0 ? void 0 : _b.toISOString()) || null }),
                order: ticket.order,
                createdAt: ticket.createdAt.toISOString(),
            },
            canUse: ticket.status === "ACTIVE" && !ticket.isUsed,
            isEventDay: new Date().toDateString() ===
                new Date(ticket.event.startDate).toDateString(),
        });
    }
    catch (error) {
        console.error("Error verifying ticket:", error);
        return server_1.NextResponse.json({ error: "Error interno del servidor" }, { status: 500 });
    }
}
async function POST(request, { params }) {
    var _a, _b;
    try {
        const { qrCode } = await params;
        const user = await (0, auth_1.requireAuth)();
        if (!(0, qr_1.validateQRCode)(qrCode)) {
            return server_1.NextResponse.json({ error: "C칩digo QR inv치lido" }, { status: 400 });
        }
        if (!(0, roles_1.canScanTickets)(user.role)) {
            return server_1.NextResponse.json({ error: "No tienes permisos para validar tickets" }, { status: 403 });
        }
        const ticket = await prisma_1.prisma.ticket.findUnique({
            where: { qrCode },
            include: {
                event: {
                    select: {
                        id: true,
                        title: true,
                        organizerId: true,
                        startDate: true,
                    },
                },
            },
        });
        if (!ticket) {
            return server_1.NextResponse.json({ error: "Ticket no encontrado" }, { status: 404 });
        }
        const hasPermission = await checkScanPermission(user.id, user.role, ticket.event.id, ticket.event.organizerId);
        if (!hasPermission) {
            return server_1.NextResponse.json({ error: "No tienes permisos para validar tickets de este evento" }, { status: 403 });
        }
        if (ticket.isUsed) {
            return server_1.NextResponse.json({
                error: "Este ticket ya fue usado",
                usedAt: (_a = ticket.usedAt) === null || _a === void 0 ? void 0 : _a.toISOString(),
            }, { status: 400 });
        }
        if (ticket.status !== "ACTIVE") {
            return server_1.NextResponse.json({ error: `Ticket ${ticket.status.toLowerCase()}` }, { status: 400 });
        }
        const updatedTicket = await prisma_1.prisma.ticket.update({
            where: { id: ticket.id },
            data: {
                isUsed: true,
                usedAt: new Date(),
            },
            include: {
                user: {
                    select: {
                        firstName: true,
                        lastName: true,
                        email: true,
                    },
                },
            },
        });
        const attendeeName = updatedTicket.user.firstName
            ? `${updatedTicket.user.firstName} ${updatedTicket.user.lastName || ""}`.trim()
            : updatedTicket.user.email;
        return server_1.NextResponse.json({
            message: "Ticket validado exitosamente",
            ticket: {
                id: updatedTicket.id,
                qrCode: updatedTicket.qrCode,
                isUsed: updatedTicket.isUsed,
                usedAt: (_b = updatedTicket.usedAt) === null || _b === void 0 ? void 0 : _b.toISOString(),
                attendeeName,
                attendeeEmail: updatedTicket.user.email,
                eventTitle: ticket.event.title,
            },
        });
    }
    catch (error) {
        console.error("Error using ticket:", error);
        return server_1.NextResponse.json({ error: "Error interno del servidor" }, { status: 500 });
    }
}
async function checkScanPermission(userId, userRole, eventId, eventOrganizerId) {
    if (userRole === "ADMIN") {
        return true;
    }
    if (userRole === "ORGANIZER" && eventOrganizerId === userId) {
        return true;
    }
    if (userRole === "SCANNER") {
        const assignment = await prisma_1.prisma.eventScanner.findFirst({
            where: {
                eventId: eventId,
                scannerId: userId,
                isActive: true,
            },
        });
        return !!assignment;
    }
    return false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxCaWx1clxcRG9jdW1lbnRzXFxEZXZlbG9wbWVudFxcTmV4dFxcc29yeWNrLWFjY2Vzc1xcc3JjXFxhcHBcXGFwaVxcdmVyaWZ5XFxbcXJDb2RlXVxccm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7QUFNQSxrQkE0RkM7QUFFRCxvQkFvSEM7QUF4TkQsd0NBQXdEO0FBQ3hELHFDQUF5QztBQUN6Qyx5Q0FBc0M7QUFDdEMsaUNBQTBDO0FBQzFDLHVDQUE2QztBQUV0QyxLQUFLLFVBQVUsR0FBRyxDQUN2QixPQUFvQixFQUNwQixFQUFFLE1BQU0sRUFBMkM7O0lBRW5ELElBQUksQ0FBQztRQUNILE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxNQUFNLE1BQU0sQ0FBQztRQUdoQyxJQUFJLENBQUMsSUFBQSxtQkFBYyxFQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7WUFDNUIsT0FBTyxxQkFBWSxDQUFDLElBQUksQ0FDdEIsRUFBRSxLQUFLLEVBQUUsb0JBQW9CLEVBQUUsRUFDL0IsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQ2hCLENBQUM7UUFDSixDQUFDO1FBRUQsTUFBTSxNQUFNLEdBQUcsTUFBTSxlQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQztZQUM1QyxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUU7WUFDakIsT0FBTyxFQUFFO2dCQUNQLEtBQUssRUFBRTtvQkFDTCxNQUFNLEVBQUU7d0JBQ04sRUFBRSxFQUFFLElBQUk7d0JBQ1IsS0FBSyxFQUFFLElBQUk7d0JBQ1gsU0FBUyxFQUFFLElBQUk7d0JBQ2YsT0FBTyxFQUFFLElBQUk7d0JBQ2IsUUFBUSxFQUFFLElBQUk7d0JBQ2QsU0FBUyxFQUFFOzRCQUNULE1BQU0sRUFBRTtnQ0FDTixFQUFFLEVBQUUsSUFBSTtnQ0FDUixTQUFTLEVBQUUsSUFBSTtnQ0FDZixRQUFRLEVBQUUsSUFBSTtnQ0FDZCxLQUFLLEVBQUUsSUFBSTs2QkFDWjt5QkFDRjtxQkFDRjtpQkFDRjtnQkFDRCxJQUFJLEVBQUU7b0JBQ0os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LEVBQUUsTUFBTTtnQkFDakIsUUFBUSxFQUFFLElBQUk7YUFDZjtTQUNGLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQztJQUN0QixDQUFDO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQmlsdXJcXERvY3VtZW50c1xcRGV2ZWxvcG1lbnRcXE5leHRcXHNvcnljay1hY2Nlc3NcXHNyY1xcYXBwXFxhcGlcXHZlcmlmeVxcW3FyQ29kZV1cXHJvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tIFwibmV4dC9zZXJ2ZXJcIjtcclxuaW1wb3J0IHsgcmVxdWlyZUF1dGggfSBmcm9tIFwiQC9saWIvYXV0aFwiO1xyXG5pbXBvcnQgeyBwcmlzbWEgfSBmcm9tIFwiQC9saWIvcHJpc21hXCI7XHJcbmltcG9ydCB7IHZhbGlkYXRlUVJDb2RlIH0gZnJvbSBcIkAvbGliL3FyXCI7XHJcbmltcG9ydCB7IGNhblNjYW5UaWNrZXRzIH0gZnJvbSBcIkAvbGliL3JvbGVzXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKFxyXG4gIHJlcXVlc3Q6IE5leHRSZXF1ZXN0LFxyXG4gIHsgcGFyYW1zIH06IHsgcGFyYW1zOiBQcm9taXNlPHsgcXJDb2RlOiBzdHJpbmcgfT4gfVxyXG4pIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgeyBxckNvZGUgfSA9IGF3YWl0IHBhcmFtcztcclxuXHJcbiAgICBcclxuICAgIGlmICghdmFsaWRhdGVRUkNvZGUocXJDb2RlKSkge1xyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgICAgeyBlcnJvcjogXCJDw7NkaWdvIFFSIGludsOhbGlkb1wiIH0sXHJcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdGlja2V0ID0gYXdhaXQgcHJpc21hLnRpY2tldC5maW5kVW5pcXVlKHtcclxuICAgICAgd2hlcmU6IHsgcXJDb2RlIH0sXHJcbiAgICAgIGluY2x1ZGU6IHtcclxuICAgICAgICBldmVudDoge1xyXG4gICAgICAgICAgc2VsZWN0OiB7XHJcbiAgICAgICAgICAgIGlkOiB0cnVlLFxyXG4gICAgICAgICAgICB0aXRsZTogdHJ1ZSxcclxuICAgICAgICAgICAgc3RhcnREYXRlOiB0cnVlLFxyXG4gICAgICAgICAgICBlbmREYXRlOiB0cnVlLFxyXG4gICAgICAgICAgICBsb2NhdGlvbjogdHJ1ZSxcclxuICAgICAgICAgICAgb3JnYW5pemVyOiB7XHJcbiAgICAgICAgICAgICAgc2VsZWN0OiB7XHJcbiAgICAgICAgICAgICAgICBpZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGZpcnN0TmFtZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGxhc3ROYW1lOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgZW1haWw6IHRydWUsXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB1c2VyOiB7XHJcbiAgICAgICAgICBzZWxlY3Q6IHtcclxuICAgICAgICAgICAgZmlyc3ROYW1lOiB0cnVlLFxyXG4gICAgICAgICAgICBsYXN0TmFtZTogdHJ1ZSxcclxuICAgICAgICAgICAgZW1haWw6IHRydWUsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb3JkZXI6IHtcclxuICAgICAgICAgIHNlbGVjdDoge1xyXG4gICAgICAgICAgICBvcmRlck51bWJlcjogdHJ1ZSxcclxuICAgICAgICAgICAgdG90YWxBbW91bnQ6IHRydWUsXHJcbiAgICAgICAgICAgIGN1cnJlbmN5OiB0cnVlLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKCF0aWNrZXQpIHtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHsgZXJyb3I6IFwiVGlja2V0IG5vIGVuY29udHJhZG9cIiB9LFxyXG4gICAgICAgIHsgc3RhdHVzOiA0MDQgfVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGF0dGVuZGVlTmFtZSA9IHRpY2tldC51c2VyLmZpcnN0TmFtZVxyXG4gICAgICA/IGAke3RpY2tldC51c2VyLmZpcnN0TmFtZX0gJHt0aWNrZXQudXNlci5sYXN0TmFtZSB8fCBcIlwifWAudHJpbSgpXHJcbiAgICAgIDogdGlja2V0LnVzZXIuZW1haWw7XHJcblxyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcclxuICAgICAgdGlja2V0OiB7XHJcbiAgICAgICAgaWQ6IHRpY2tldC5pZCxcclxuICAgICAgICBxckNvZGU6IHRpY2tldC5xckNvZGUsXHJcbiAgICAgICAgaXNVc2VkOiB0aWNrZXQuaXNVc2VkLFxyXG4gICAgICAgIHVzZWRBdDogdGlja2V0LnVzZWRBdD8udG9JU09TdHJpbmcoKSB8fCBudWxsLFxyXG4gICAgICAgIHN0YXR1czogdGlja2V0LnN0YXR1cyxcclxuICAgICAgICBhdHRlbmRlZU5hbWUsXHJcbiAgICAgICAgYXR0ZW5kZWVFbWFpbDogdGlja2V0LnVzZXIuZW1haWwsXHJcbiAgICAgICAgZXZlbnQ6IHtcclxuICAgICAgICAgIC4uLnRpY2tldC5ldmVudCxcclxuICAgICAgICAgIHN0YXJ0RGF0ZTogdGlja2V0LmV2ZW50LnN0YXJ0RGF0ZS50b0lTT1N0cmluZygpLFxyXG4gICAgICAgICAgZW5kRGF0ZTogdGlja2V0LmV2ZW50LmVuZERhdGU/LnRvSVNPU3RyaW5nKCkgfHwgbnVsbCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9yZGVyOiB0aWNrZXQub3JkZXIsXHJcbiAgICAgICAgY3JlYXRlZEF0OiB0aWNrZXQuY3JlYXRlZEF0LnRvSVNPU3RyaW5nKCksXHJcbiAgICAgIH0sXHJcbiAgICAgIGNhblVzZTogdGlja2V0LnN0YXR1cyA9PT0gXCJBQ1RJVkVcIiAmJiAhdGlja2V0LmlzVXNlZCxcclxuICAgICAgaXNFdmVudERheTpcclxuICAgICAgICBuZXcgRGF0ZSgpLnRvRGF0ZVN0cmluZygpID09PVxyXG4gICAgICAgIG5ldyBEYXRlKHRpY2tldC5ldmVudC5zdGFydERhdGUpLnRvRGF0ZVN0cmluZygpLFxyXG4gICAgfSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciB2ZXJpZnlpbmcgdGlja2V0OlwiLCBlcnJvcik7XHJcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgIHsgZXJyb3I6IFwiRXJyb3IgaW50ZXJubyBkZWwgc2Vydmlkb3JcIiB9LFxyXG4gICAgICB7IHN0YXR1czogNTAwIH1cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChcclxuICByZXF1ZXN0OiBOZXh0UmVxdWVzdCxcclxuICB7IHBhcmFtcyB9OiB7IHBhcmFtczogUHJvbWlzZTx7IHFyQ29kZTogc3RyaW5nIH0+IH1cclxuKSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHsgcXJDb2RlIH0gPSBhd2FpdCBwYXJhbXM7XHJcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgcmVxdWlyZUF1dGgoKTtcclxuXHJcbiAgICBpZiAoIXZhbGlkYXRlUVJDb2RlKHFyQ29kZSkpIHtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHsgZXJyb3I6IFwiQ8OzZGlnbyBRUiBpbnbDoWxpZG9cIiB9LFxyXG4gICAgICAgIHsgc3RhdHVzOiA0MDAgfVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghY2FuU2NhblRpY2tldHModXNlci5yb2xlKSkge1xyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgICAgeyBlcnJvcjogXCJObyB0aWVuZXMgcGVybWlzb3MgcGFyYSB2YWxpZGFyIHRpY2tldHNcIiB9LFxyXG4gICAgICAgIHsgc3RhdHVzOiA0MDMgfVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRpY2tldCA9IGF3YWl0IHByaXNtYS50aWNrZXQuZmluZFVuaXF1ZSh7XHJcbiAgICAgIHdoZXJlOiB7IHFyQ29kZSB9LFxyXG4gICAgICBpbmNsdWRlOiB7XHJcbiAgICAgICAgZXZlbnQ6IHtcclxuICAgICAgICAgIHNlbGVjdDoge1xyXG4gICAgICAgICAgICBpZDogdHJ1ZSxcclxuICAgICAgICAgICAgdGl0bGU6IHRydWUsXHJcbiAgICAgICAgICAgIG9yZ2FuaXplcklkOiB0cnVlLFxyXG4gICAgICAgICAgICBzdGFydERhdGU6IHRydWUsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoIXRpY2tldCkge1xyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgICAgeyBlcnJvcjogXCJUaWNrZXQgbm8gZW5jb250cmFkb1wiIH0sXHJcbiAgICAgICAgeyBzdGF0dXM6IDQwNCB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaGFzUGVybWlzc2lvbiA9IGF3YWl0IGNoZWNrU2NhblBlcm1pc3Npb24oXHJcbiAgICAgIHVzZXIuaWQsXHJcbiAgICAgIHVzZXIucm9sZSxcclxuICAgICAgdGlja2V0LmV2ZW50LmlkLFxyXG4gICAgICB0aWNrZXQuZXZlbnQub3JnYW5pemVySWRcclxuICAgICk7XHJcblxyXG4gICAgaWYgKCFoYXNQZXJtaXNzaW9uKSB7XHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICB7IGVycm9yOiBcIk5vIHRpZW5lcyBwZXJtaXNvcyBwYXJhIHZhbGlkYXIgdGlja2V0cyBkZSBlc3RlIGV2ZW50b1wiIH0sXHJcbiAgICAgICAgeyBzdGF0dXM6IDQwMyB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRpY2tldC5pc1VzZWQpIHtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGVycm9yOiBcIkVzdGUgdGlja2V0IHlhIGZ1ZSB1c2Fkb1wiLFxyXG4gICAgICAgICAgdXNlZEF0OiB0aWNrZXQudXNlZEF0Py50b0lTT1N0cmluZygpLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRpY2tldC5zdGF0dXMgIT09IFwiQUNUSVZFXCIpIHtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHsgZXJyb3I6IGBUaWNrZXQgJHt0aWNrZXQuc3RhdHVzLnRvTG93ZXJDYXNlKCl9YCB9LFxyXG4gICAgICAgIHsgc3RhdHVzOiA0MDAgfVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHVwZGF0ZWRUaWNrZXQgPSBhd2FpdCBwcmlzbWEudGlja2V0LnVwZGF0ZSh7XHJcbiAgICAgIHdoZXJlOiB7IGlkOiB0aWNrZXQuaWQgfSxcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgIGlzVXNlZDogdHJ1ZSxcclxuICAgICAgICB1c2VkQXQ6IG5ldyBEYXRlKCksXHJcbiAgICAgIH0sXHJcbiAgICAgIGluY2x1ZGU6IHtcclxuICAgICAgICB1c2VyOiB7XHJcbiAgICAgICAgICBzZWxlY3Q6IHtcclxuICAgICAgICAgICAgZmlyc3ROYW1lOiB0cnVlLFxyXG4gICAgICAgICAgICBsYXN0TmFtZTogdHJ1ZSxcclxuICAgICAgICAgICAgZW1haWw6IHRydWUsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBhdHRlbmRlZU5hbWUgPSB1cGRhdGVkVGlja2V0LnVzZXIuZmlyc3ROYW1lXHJcbiAgICAgID8gYCR7dXBkYXRlZFRpY2tldC51c2VyLmZpcnN0TmFtZX0gJHtcclxuICAgICAgICAgIHVwZGF0ZWRUaWNrZXQudXNlci5sYXN0TmFtZSB8fCBcIlwiXHJcbiAgICAgICAgfWAudHJpbSgpXHJcbiAgICAgIDogdXBkYXRlZFRpY2tldC51c2VyLmVtYWlsO1xyXG5cclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XHJcbiAgICAgIG1lc3NhZ2U6IFwiVGlja2V0IHZhbGlkYWRvIGV4aXRvc2FtZW50ZVwiLFxyXG4gICAgICB0aWNrZXQ6IHtcclxuICAgICAgICBpZDogdXBkYXRlZFRpY2tldC5pZCxcclxuICAgICAgICBxckNvZGU6IHVwZGF0ZWRUaWNrZXQucXJDb2RlLFxyXG4gICAgICAgIGlzVXNlZDogdXBkYXRlZFRpY2tldC5pc1VzZWQsXHJcbiAgICAgICAgdXNlZEF0OiB1cGRhdGVkVGlja2V0LnVzZWRBdD8udG9JU09TdHJpbmcoKSxcclxuICAgICAgICBhdHRlbmRlZU5hbWUsXHJcbiAgICAgICAgYXR0ZW5kZWVFbWFpbDogdXBkYXRlZFRpY2tldC51c2VyLmVtYWlsLFxyXG4gICAgICAgIGV2ZW50VGl0bGU6IHRpY2tldC5ldmVudC50aXRsZSxcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgdXNpbmcgdGlja2V0OlwiLCBlcnJvcik7XHJcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgIHsgZXJyb3I6IFwiRXJyb3IgaW50ZXJubyBkZWwgc2Vydmlkb3JcIiB9LFxyXG4gICAgICB7IHN0YXR1czogNTAwIH1cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBjaGVja1NjYW5QZXJtaXNzaW9uKFxyXG4gIHVzZXJJZDogc3RyaW5nLFxyXG4gIHVzZXJSb2xlOiBzdHJpbmcsXHJcbiAgZXZlbnRJZDogc3RyaW5nLFxyXG4gIGV2ZW50T3JnYW5pemVySWQ6IHN0cmluZ1xyXG4pOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICBpZiAodXNlclJvbGUgPT09IFwiQURNSU5cIikge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBpZiAodXNlclJvbGUgPT09IFwiT1JHQU5JWkVSXCIgJiYgZXZlbnRPcmdhbml6ZXJJZCA9PT0gdXNlcklkKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGlmICh1c2VyUm9sZSA9PT0gXCJTQ0FOTkVSXCIpIHtcclxuICAgIGNvbnN0IGFzc2lnbm1lbnQgPSBhd2FpdCBwcmlzbWEuZXZlbnRTY2FubmVyLmZpbmRGaXJzdCh7XHJcbiAgICAgIHdoZXJlOiB7XHJcbiAgICAgICAgZXZlbnRJZDogZXZlbnRJZCxcclxuICAgICAgICBzY2FubmVySWQ6IHVzZXJJZCxcclxuICAgICAgICBpc0FjdGl2ZTogdHJ1ZSxcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiAhIWFzc2lnbm1lbnQ7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZmFsc2U7XHJcbn1cclxuIl0sInZlcnNpb24iOjN9