{"file":"C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\app\\api\\verify\\[qrCode]\\route.ts","mappings":"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","names":[],"sources":["C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\app\\api\\verify\\[qrCode]\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { requireAuth } from \"@/lib/auth\";\r\nimport { prisma } from \"@/lib/prisma\";\r\nimport { validateQRCode } from \"@/lib/qr\";\r\nimport { canScanTickets } from \"@/lib/roles\";\r\n\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: Promise<{ qrCode: string }> }\r\n) {\r\n  try {\r\n    const { qrCode } = await params;\r\n\r\n    \r\n    if (!validateQRCode(qrCode)) {\r\n      return NextResponse.json(\r\n        { error: \"C칩digo QR inv치lido\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const ticket = await prisma.ticket.findUnique({\r\n      where: { qrCode },\r\n      include: {\r\n        event: {\r\n          select: {\r\n            id: true,\r\n            title: true,\r\n            startDate: true,\r\n            endDate: true,\r\n            location: true,\r\n            organizer: {\r\n              select: {\r\n                id: true,\r\n                firstName: true,\r\n                lastName: true,\r\n                email: true,\r\n              },\r\n            },\r\n          },\r\n        },\r\n        user: {\r\n          select: {\r\n            firstName: true,\r\n            lastName: true,\r\n            email: true,\r\n          },\r\n        },\r\n        order: {\r\n          select: {\r\n            orderNumber: true,\r\n            totalAmount: true,\r\n            currency: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    if (!ticket) {\r\n      return NextResponse.json(\r\n        { error: \"Ticket no encontrado\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    const attendeeName = ticket.user.firstName\r\n      ? `${ticket.user.firstName} ${ticket.user.lastName || \"\"}`.trim()\r\n      : ticket.user.email;\r\n\r\n    return NextResponse.json({\r\n      ticket: {\r\n        id: ticket.id,\r\n        qrCode: ticket.qrCode,\r\n        isUsed: ticket.isUsed,\r\n        usedAt: ticket.usedAt?.toISOString() || null,\r\n        status: ticket.status,\r\n        attendeeName,\r\n        attendeeEmail: ticket.user.email,\r\n        event: {\r\n          ...ticket.event,\r\n          startDate: ticket.event.startDate.toISOString(),\r\n          endDate: ticket.event.endDate?.toISOString() || null,\r\n        },\r\n        order: ticket.order,\r\n        createdAt: ticket.createdAt.toISOString(),\r\n      },\r\n      canUse: ticket.status === \"ACTIVE\" && !ticket.isUsed,\r\n      isEventDay:\r\n        new Date().toDateString() ===\r\n        new Date(ticket.event.startDate).toDateString(),\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error verifying ticket:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Error interno del servidor\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(\r\n  request: NextRequest,\r\n  { params }: { params: Promise<{ qrCode: string }> }\r\n) {\r\n  try {\r\n    const { qrCode } = await params;\r\n    const user = await requireAuth();\r\n\r\n    if (!validateQRCode(qrCode)) {\r\n      return NextResponse.json(\r\n        { error: \"C칩digo QR inv치lido\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (!canScanTickets(user.role)) {\r\n      return NextResponse.json(\r\n        { error: \"No tienes permisos para validar tickets\" },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    const ticket = await prisma.ticket.findUnique({\r\n      where: { qrCode },\r\n      include: {\r\n        event: {\r\n          select: {\r\n            id: true,\r\n            title: true,\r\n            organizerId: true,\r\n            startDate: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    if (!ticket) {\r\n      return NextResponse.json(\r\n        { error: \"Ticket no encontrado\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    const hasPermission = await checkScanPermission(\r\n      user.id,\r\n      user.role,\r\n      ticket.event.id,\r\n      ticket.event.organizerId\r\n    );\r\n\r\n    if (!hasPermission) {\r\n      return NextResponse.json(\r\n        { error: \"No tienes permisos para validar tickets de este evento\" },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    if (ticket.isUsed) {\r\n      return NextResponse.json(\r\n        {\r\n          error: \"Este ticket ya fue usado\",\r\n          usedAt: ticket.usedAt?.toISOString(),\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (ticket.status !== \"ACTIVE\") {\r\n      return NextResponse.json(\r\n        { error: `Ticket ${ticket.status.toLowerCase()}` },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const updatedTicket = await prisma.ticket.update({\r\n      where: { id: ticket.id },\r\n      data: {\r\n        isUsed: true,\r\n        usedAt: new Date(),\r\n      },\r\n      include: {\r\n        user: {\r\n          select: {\r\n            firstName: true,\r\n            lastName: true,\r\n            email: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    const attendeeName = updatedTicket.user.firstName\r\n      ? `${updatedTicket.user.firstName} ${\r\n          updatedTicket.user.lastName || \"\"\r\n        }`.trim()\r\n      : updatedTicket.user.email;\r\n\r\n    return NextResponse.json({\r\n      message: \"Ticket validado exitosamente\",\r\n      ticket: {\r\n        id: updatedTicket.id,\r\n        qrCode: updatedTicket.qrCode,\r\n        isUsed: updatedTicket.isUsed,\r\n        usedAt: updatedTicket.usedAt?.toISOString(),\r\n        attendeeName,\r\n        attendeeEmail: updatedTicket.user.email,\r\n        eventTitle: ticket.event.title,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error using ticket:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Error interno del servidor\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nasync function checkScanPermission(\r\n  userId: string,\r\n  userRole: string,\r\n  eventId: string,\r\n  eventOrganizerId: string\r\n): Promise<boolean> {\r\n  if (userRole === \"ADMIN\") {\r\n    return true;\r\n  }\r\n\r\n  if (userRole === \"ORGANIZER\" && eventOrganizerId === userId) {\r\n    return true;\r\n  }\r\n\r\n  if (userRole === \"SCANNER\") {\r\n    const assignment = await prisma.eventScanner.findFirst({\r\n      where: {\r\n        eventId: eventId,\r\n        scannerId: userId,\r\n        isActive: true,\r\n      },\r\n    });\r\n\r\n    return !!assignment;\r\n  }\r\n\r\n  return false;\r\n}\r\n"],"version":3}