4443226210d8a4331c295aeeacb557c7
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
jest.mock('next/server', () => ({ NextResponse: { json: (body, opts) => ({ status: (opts === null || opts === void 0 ? void 0 : opts.status) || 200, body }), } }));
jest.mock('@/lib/prisma', () => ({ prisma: mockPrisma }));
jest.mock('@/lib/auth', () => ({ requireAuth: () => mockRequireAuth() }));
// Shared mock prisma with required methods
const mockPrisma = {
    ticket: {
        findUnique: jest.fn(),
        update: jest.fn(),
    },
    eventScanner: {
        findFirst: jest.fn(),
    }
};
// Mock auth helper requireAuth used in POST
const mockRequireAuth = jest.fn();
describe('GET/POST /api/verify/[qrCode]', () => {
    beforeEach(() => jest.clearAllMocks());
    it('GET returns 404 when ticket not found', async () => {
        mockPrisma.ticket.findUnique.mockResolvedValueOnce(null);
        const { GET } = await Promise.resolve().then(() => __importStar(require('../../../src/app/api/verify/[qrCode]/route')));
        const res = await GET(undefined, { params: Promise.resolve({ qrCode: 'EVENT-USER-0-ABC-0' }) });
        expect(res.status).toBe(404);
        expect(res.body).toBeDefined();
        expect(res.body.error).toBe('Ticket no encontrado');
    });
    it('GET returns ticket info when found', async () => {
        const fakeTicket = {
            id: 't1',
            qrCode: 'EVENT-USER-0-ABC-0',
            isUsed: false,
            usedAt: null,
            status: 'ACTIVE',
            user: { firstName: 'A', lastName: 'B', email: 'a@a.com' },
            event: { id: 'e1', title: 'E', startDate: new Date(), endDate: null, location: 'L', organizer: { id: 'org1' } },
            order: { orderNumber: 'ORD1', totalAmount: 1000, currency: 'CLP' },
            createdAt: new Date(),
        }(mockPrisma.ticket.findUnique).mockResolvedValueOnce(fakeTicket);
        const { GET } = await Promise.resolve().then(() => __importStar(require('../../../src/app/api/verify/[qrCode]/route')));
        const res = await GET(undefined, { params: Promise.resolve({ qrCode: fakeTicket.qrCode }) });
        expect(res.status).toBe(200);
        expect(res.body.ticket).toBeDefined();
        expect(res.body.canUse).toBe(true);
    });
    it('POST forbids when user lacks scanner permissions', async () => {
        mockRequireAuth.mockResolvedValueOnce({ id: 'u1', role: 'USER' })(mockPrisma.ticket.findUnique).mockResolvedValueOnce({ id: 't1', event: { id: 'e1', organizerId: 'org1' }, isUsed: false, status: 'ACTIVE' });
        const { POST } = await Promise.resolve().then(() => __importStar(require('../../../src/app/api/verify/[qrCode]/route')));
        const res = await POST(undefined, { params: Promise.resolve({ qrCode: 'EVENT-USER-0-ABC-0' }) });
        expect(res.status).toBe(403);
        expect(res.body.error).toBe('No tienes permisos para validar tickets');
    });
    it('POST marks ticket as used when permitted', async () => {
        mockRequireAuth.mockResolvedValueOnce({ id: 'scanner_1', role: 'SCANNER' })(mockPrisma.ticket.findUnique).mockResolvedValueOnce({ id: 't1', qrCode: 'EVENT-USER-0-ABC-0', isUsed: false, status: 'ACTIVE', event: { id: 'e1', organizerId: 'org1', title: 'E', startDate: new Date() } })(mockPrisma.eventScanner.findFirst).mockResolvedValueOnce({ id: 'assign1' })(mockPrisma.ticket.update).mockResolvedValueOnce({ id: 't1', qrCode: 'EVENT-USER-0-ABC-0', isUsed: true, usedAt: new Date(), user: { firstName: 'X', lastName: 'Y', email: 'x@y.com' } });
        const { POST } = await Promise.resolve().then(() => __importStar(require('../../../src/app/api/verify/[qrCode]/route')));
        const res = await POST(undefined, { params: Promise.resolve({ qrCode: 'EVENT-USER-0-ABC-0' }) });
        expect(res.status).toBe(200);
        expect(res.body.ticket).toBeDefined();
        expect(res.body.ticket.isUsed).toBe(true);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,