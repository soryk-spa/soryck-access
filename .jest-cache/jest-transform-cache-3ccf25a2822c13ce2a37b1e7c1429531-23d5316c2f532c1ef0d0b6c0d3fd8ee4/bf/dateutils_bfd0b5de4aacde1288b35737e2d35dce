4651f676ecb20a9fdef691a021270946
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTimeUntil = exports.getRelativeDateDescription = exports.isTomorrow = exports.isToday = exports.formatShortDate = exports.formatTime = exports.formatDate = exports.formatFullDateTime = void 0;
exports.parseChileDatetime = parseChileDatetime;
exports.formatToChileDatetimeLocal = formatToChileDatetimeLocal;
exports.toChileISOString = toChileISOString;
exports.isFutureDate = isFutureDate;
exports.isValidDateRange = isValidDateRange;
exports.formatDisplayDate = formatDisplayDate;
exports.formatDisplayDateTime = formatDisplayDateTime;
exports.formatDisplayTime = formatDisplayTime;
exports.getCurrentChileDate = getCurrentChileDate;
exports.fromTimestamp = fromTimestamp;
function parseChileDatetime(datetimeLocal) {
    if (!datetimeLocal) {
        throw new Error('Fecha requerida');
    }
    const date = new Date(datetimeLocal);
    if (isNaN(date.getTime())) {
        throw new Error('Fecha inválida');
    }
    return date;
}
function formatToChileDatetimeLocal(date) {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    if (isNaN(dateObj.getTime())) {
        return '';
    }
    const chileDate = new Date(dateObj.toLocaleString("en-US", { timeZone: "America/Santiago" }));
    const year = chileDate.getFullYear();
    const month = String(chileDate.getMonth() + 1).padStart(2, '0');
    const day = String(chileDate.getDate()).padStart(2, '0');
    const hours = String(chileDate.getHours()).padStart(2, '0');
    const minutes = String(chileDate.getMinutes()).padStart(2, '0');
    return `${year}-${month}-${day}T${hours}:${minutes}`;
}
function toChileISOString(date) {
    return date.toISOString();
}
function isFutureDate(date) {
    const now = new Date();
    return date > now;
}
function isValidDateRange(startDate, endDate) {
    return endDate > startDate;
}
function formatDisplayDate(date) {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    return dateObj.toLocaleDateString("es-CL", {
        weekday: "long",
        year: "numeric",
        month: "long",
        day: "numeric",
        timeZone: "America/Santiago",
    });
}
function formatDisplayDateTime(date) {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    return dateObj.toLocaleString("es-CL", {
        weekday: "long",
        year: "numeric",
        month: "long",
        day: "numeric",
        hour: "2-digit",
        minute: "2-digit",
        timeZone: "America/Santiago",
    });
}
function formatDisplayTime(date) {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    return dateObj.toLocaleTimeString("es-CL", {
        hour: "2-digit",
        minute: "2-digit",
        timeZone: "America/Santiago",
    });
}
function getCurrentChileDate() {
    return new Date(new Date().toLocaleString("en-US", { timeZone: "America/Santiago" }));
}
function fromTimestamp(timestamp) {
    const ms = timestamp.toString().length === 10 ? timestamp * 1000 : timestamp;
    return new Date(ms);
}
const formatFullDateTime = (date) => {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    return dateObj.toLocaleString("es-CL", {
        weekday: "long",
        year: "numeric",
        month: "long",
        day: "numeric",
        hour: "2-digit",
        minute: "2-digit",
        timeZone: "America/Santiago",
    });
};
exports.formatFullDateTime = formatFullDateTime;
const formatDate = (date) => {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    return dateObj.toLocaleDateString("es-CL", {
        weekday: "long",
        year: "numeric",
        month: "long",
        day: "numeric",
        timeZone: "America/Santiago",
    });
};
exports.formatDate = formatDate;
const formatTime = (date) => {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    return dateObj.toLocaleTimeString("es-CL", {
        hour: "2-digit",
        minute: "2-digit",
        timeZone: "America/Santiago",
    });
};
exports.formatTime = formatTime;
const formatShortDate = (date) => {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    return dateObj.toLocaleDateString("es-CL", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
        timeZone: "America/Santiago",
    });
};
exports.formatShortDate = formatShortDate;
const isToday = (date) => {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    const today = new Date();
    return dateObj.toDateString() === today.toDateString();
};
exports.isToday = isToday;
const isTomorrow = (date) => {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    return dateObj.toDateString() === tomorrow.toDateString();
};
exports.isTomorrow = isTomorrow;
const getRelativeDateDescription = (date) => {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    if ((0, exports.isToday)(dateObj))
        return "Hoy";
    if ((0, exports.isTomorrow)(dateObj))
        return "Mañana";
    const now = new Date();
    const diffTime = dateObj.getTime() - now.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    if (diffDays < 0) {
        return diffDays === -1 ? "Ayer" : `Hace ${Math.abs(diffDays)} días`;
    }
    else if (diffDays <= 7) {
        return `En ${diffDays} días`;
    }
    else {
        return (0, exports.formatDate)(dateObj);
    }
};
exports.getRelativeDateDescription = getRelativeDateDescription;
const getTimeUntil = (date) => {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    const now = new Date();
    const diffTime = dateObj.getTime() - now.getTime();
    if (diffTime <= 0) {
        return { days: 0, hours: 0, minutes: 0, isExpired: true };
    }
    const days = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    const hours = Math.floor((diffTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((diffTime % (1000 * 60 * 60)) / (1000 * 60));
    return { days, hours, minutes, isExpired: false };
};
exports.getTimeUntil = getTimeUntil;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,