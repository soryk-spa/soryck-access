{"file":"C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\__tests__\\api\\user.profile.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\__tests__\\api\\user.profile.test.ts"],"sourcesContent":["jest.mock('@clerk/nextjs/server', () => ({ auth: jest.fn() }))\r\njest.mock('../../lib/auth', () => ({ getCurrentUser: jest.fn() }))\r\njest.mock('../../lib/redis', () => ({\r\n  CacheService: {\r\n    getInstance: () => ({ getUserFullData: jest.fn(), setUserBatch: jest.fn() })\r\n  }\r\n}))\r\n\r\nimport { GET } from '../../../src/app/api/user/profile/route'\r\nimport { auth } from '@clerk/nextjs/server'\r\nimport { getCurrentUser } from '../../lib/auth'\r\n\r\ndescribe('GET /api/user/profile', () => {\r\n  beforeEach(() => jest.clearAllMocks())\r\n\r\n  it('returns 401 when not authenticated', async () => {\r\n    ;(auth as unknown as jest.Mock).mockResolvedValue({ userId: null })\r\n    const res = await GET()\r\n    expect(res.status).toBe(401)\r\n  })\r\n\r\n  it('returns cached user when present', async () => {\r\n    ;(auth as unknown as jest.Mock).mockResolvedValue({ userId: 'clerk_1' })\r\n    const cache = (await import('../../lib/redis')).CacheService.getInstance()\r\n    ;(cache.getUserFullData as jest.Mock).mockResolvedValue({ id: 'u1', email: 'a@a.com', role: 'USER' })\r\n\r\n    const res = await GET()\r\n    const json = await res.json()\r\n    expect(json.user).toBeDefined()\r\n    expect(json.user.email).toBe('a@a.com')\r\n  })\r\n\r\n  it('falls back to getCurrentUser and caches result', async () => {\r\n    ;(auth as unknown as jest.Mock).mockResolvedValue({ userId: 'clerk_2' })\r\n    const cache = (await import('../../lib/redis')).CacheService.getInstance()\r\n    ;(cache.getUserFullData as jest.Mock).mockResolvedValue(null)\r\n    ;(getCurrentUser as unknown as jest.Mock).mockResolvedValue({ id: 'u2', email: 'b@b.com', clerkId: 'clerk_2', role: 'USER' })\r\n\r\n    const res = await GET()\r\n    const json = await res.json()\r\n    expect(json.user).toBeDefined()\r\n    expect(cache.setUserBatch).toHaveBeenCalled()\r\n  })\r\n})\r\n"],"version":3}