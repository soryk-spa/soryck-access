{"file":"C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\lib\\sync-user.ts","mappings":"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","names":[],"sources":["C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\lib\\sync-user.ts"],"sourcesContent":["import { clerkClient } from '@clerk/nextjs/server'\r\nimport { prisma } from '@/lib/prisma'\r\nimport { UserRole } from '@prisma/client'\r\n\r\nexport async function syncUserFromClerk(clerkId: string) {\r\n  try {\r\n    const client = await clerkClient()\r\n    const clerkUser = await client.users.getUser(clerkId)\r\n    \r\n    if (!clerkUser) {\r\n      throw new Error('Usuario no encontrado en Clerk')\r\n    }\r\n\r\n    \r\n    const existingUser = await prisma.user.findUnique({\r\n      where: { clerkId }\r\n    })\r\n\r\n    if (existingUser) {\r\n      return existingUser\r\n    }\r\n\r\n    \r\n    const userEmail = clerkUser.emailAddresses[0]?.emailAddress || ''\r\n    \r\n    \r\n    const existingUserByEmail = await prisma.user.findUnique({\r\n      where: { email: userEmail }\r\n    })\r\n\r\n    \r\n    if (existingUserByEmail && existingUserByEmail.clerkId !== clerkId) {\r\n      console.log(`Actualizando clerkId para usuario existente: ${userEmail}`)\r\n      const updatedUser = await prisma.user.update({\r\n        where: { email: userEmail },\r\n        data: {\r\n          clerkId,\r\n          firstName: clerkUser.firstName || existingUserByEmail.firstName,\r\n          lastName: clerkUser.lastName || existingUserByEmail.lastName,\r\n          imageUrl: clerkUser.imageUrl || existingUserByEmail.imageUrl,\r\n        }\r\n      })\r\n      return updatedUser\r\n    }\r\n\r\n    let userRole: UserRole = UserRole.CLIENT\r\n    \r\n    if (clerkUser.publicMetadata && typeof clerkUser.publicMetadata === 'object' && 'role' in clerkUser.publicMetadata) {\r\n      const metadataRole = clerkUser.publicMetadata.role as string\r\n      if (Object.values(UserRole).includes(metadataRole as UserRole)) {\r\n        userRole = metadataRole as UserRole\r\n      }\r\n    }\r\n\r\n    const userCount = await prisma.user.count()\r\n    if (userCount === 0) {\r\n      userRole = UserRole.ADMIN\r\n    }\r\n\r\n    const organizerEmails = process.env.ORGANIZER_EMAILS?.split(',') || []\r\n    const adminEmails = process.env.ADMIN_EMAILS?.split(',') || []\r\n    \r\n    if (adminEmails.includes(userEmail)) {\r\n      userRole = UserRole.ADMIN\r\n    } else if (organizerEmails.includes(userEmail)) {\r\n      userRole = UserRole.ORGANIZER\r\n    }\r\n\r\n    \r\n    const newUser = await prisma.user.create({\r\n      data: {\r\n        clerkId,\r\n        email: userEmail,\r\n        firstName: clerkUser.firstName || '',\r\n        lastName: clerkUser.lastName || '',\r\n        imageUrl: clerkUser.imageUrl || '',\r\n        role: userRole,\r\n      },\r\n    })\r\n\r\n    console.log(`Usuario sincronizado: ${clerkId} con rol: ${userRole}`)\r\n    return newUser\r\n\r\n  } catch (error) {\r\n    console.error('Error sincronizando usuario:', error)\r\n    throw error\r\n  }\r\n}"],"version":3}