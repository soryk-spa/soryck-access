b98dc4471dcb8fcdc36e2879baeb883d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.syncUserFromClerk = syncUserFromClerk;
const server_1 = require("@clerk/nextjs/server");
const prisma_1 = require("@/lib/prisma");
const client_1 = require("@prisma/client");
async function syncUserFromClerk(clerkId) {
    var _a, _b, _c;
    try {
        const client = await (0, server_1.clerkClient)();
        const clerkUser = await client.users.getUser(clerkId);
        if (!clerkUser) {
            throw new Error('Usuario no encontrado en Clerk');
        }
        const existingUser = await prisma_1.prisma.user.findUnique({
            where: { clerkId }
        });
        if (existingUser) {
            return existingUser;
        }
        const userEmail = ((_a = clerkUser.emailAddresses[0]) === null || _a === void 0 ? void 0 : _a.emailAddress) || '';
        const existingUserByEmail = await prisma_1.prisma.user.findUnique({
            where: { email: userEmail }
        });
        if (existingUserByEmail && existingUserByEmail.clerkId !== clerkId) {
            console.log(`Actualizando clerkId para usuario existente: ${userEmail}`);
            const updatedUser = await prisma_1.prisma.user.update({
                where: { email: userEmail },
                data: {
                    clerkId,
                    firstName: clerkUser.firstName || existingUserByEmail.firstName,
                    lastName: clerkUser.lastName || existingUserByEmail.lastName,
                    imageUrl: clerkUser.imageUrl || existingUserByEmail.imageUrl,
                }
            });
            return updatedUser;
        }
        let userRole = client_1.UserRole.CLIENT;
        if (clerkUser.publicMetadata && typeof clerkUser.publicMetadata === 'object' && 'role' in clerkUser.publicMetadata) {
            const metadataRole = clerkUser.publicMetadata.role;
            if (Object.values(client_1.UserRole).includes(metadataRole)) {
                userRole = metadataRole;
            }
        }
        const userCount = await prisma_1.prisma.user.count();
        if (userCount === 0) {
            userRole = client_1.UserRole.ADMIN;
        }
        const organizerEmails = ((_b = process.env.ORGANIZER_EMAILS) === null || _b === void 0 ? void 0 : _b.split(',')) || [];
        const adminEmails = ((_c = process.env.ADMIN_EMAILS) === null || _c === void 0 ? void 0 : _c.split(',')) || [];
        if (adminEmails.includes(userEmail)) {
            userRole = client_1.UserRole.ADMIN;
        }
        else if (organizerEmails.includes(userEmail)) {
            userRole = client_1.UserRole.ORGANIZER;
        }
        const newUser = await prisma_1.prisma.user.create({
            data: {
                clerkId,
                email: userEmail,
                firstName: clerkUser.firstName || '',
                lastName: clerkUser.lastName || '',
                imageUrl: clerkUser.imageUrl || '',
                role: userRole,
            },
        });
        console.log(`Usuario sincronizado: ${clerkId} con rol: ${userRole}`);
        return newUser;
    }
    catch (error) {
        console.error('Error sincronizando usuario:', error);
        throw error;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxCaWx1clxcRG9jdW1lbnRzXFxEZXZlbG9wbWVudFxcTmV4dFxcc29yeWNrLWFjY2Vzc1xcc3JjXFxsaWJcXHN5bmMtdXNlci50cyIsIm1hcHBpbmdzIjoiOztBQUlBLDhDQW1GQztBQXZGRCxpREFBa0Q7QUFDbEQseUNBQXFDO0FBQ3JDLDJDQUF5QztBQUVsQyxLQUFLLFVBQVUsaUJBQWlCLENBQUMsT0FBZTs7SUFDckQsSUFBSSxDQUFDO1FBQ0gsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFBLG9CQUFXLEdBQUUsQ0FBQTtRQUNsQyxNQUFNLFNBQVMsR0FBRyxNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRXJELElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQTtRQUNuRCxDQUFDO1FBR0QsTUFBTSxZQUFZLEdBQUcsTUFBTSxlQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUNoRCxLQUFLLEVBQUUsRUFBRSxPQUFPLEVBQUU7U0FDbkIsQ0FBQyxDQUFBO1FBRUYsSUFBSSxZQUFZLEVBQUUsQ0FBQztZQUNqQixPQUFPLFlBQVksQ0FBQTtRQUNyQixDQUFDO1FBR0QsTUFBTSxTQUFTLEdBQUcsQ0FBQSxNQUFBLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLDBDQUFFLFlBQVksS0FBSSxFQUFFLENBQUE7UUFHakUsTUFBTSxtQkFBbUIsR0FBRyxNQUFNLGVBQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQ3ZELEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUU7U0FDNUIsQ0FBQyxDQUFBO1FBR0YsSUFBSSxtQkFBbUIsSUFBSSxtQkFBbUIsQ0FBQyxPQUFPLEtBQUssT0FBTyxFQUFFLENBQUM7WUFDbkUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnREFBZ0QsU0FBUyxFQUFFLENBQUMsQ0FBQTtZQUN4RSxNQUFNLFdBQVcsR0FBRyxNQUFNLGVBQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO2dCQUMzQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFO2dCQUMzQixJQUFJLEVBQUU7b0JBQ0osT0FBTztvQkFDUCxTQUFTLEVBQUUsU0FBUyxDQUFDLFNBQVMsSUFBSSxtQkFBbUIsQ0FBQyxTQUFTO29CQUMvRCxRQUFRLEVBQUUsU0FBUyxDQUFDLFFBQVEsSUFBSSxtQkFBbUIsQ0FBQyxRQUFRO29CQUM1RCxRQUFRLEVBQUUsU0FBUyxDQUFDLFFBQVEsSUFBSSxtQkFBbUIsQ0FBQyxRQUFRO2lCQUM3RDthQUNGLENBQUMsQ0FBQTtZQUNGLE9BQU8sV0FBVyxDQUFBO1FBQ3BCLENBQUM7UUFFRCxJQUFJLFFBQVEsR0FBYSxpQkFBUSxDQUFDLE1BQU0sQ0FBQTtRQUV4QyxJQUFJLFNBQVMsQ0FBQyxjQUFjLElBQUksT0FBTyxTQUFTLENBQUMsY0FBYyxLQUFLLFFBQVEsSUFBSSxNQUFNLElBQUksU0FBUyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ25ILE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBYyxDQUFBO1lBQzVELElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxpQkFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLFlBQXdCLENBQUMsRUFBRSxDQUFDO2dCQUMvRCxRQUFRLEdBQUcsWUFBd0IsQ0FBQTtZQUNyQyxDQUFDO1FBQ0gsQ0FBQztRQUVELE1BQU0sU0FBUyxHQUFHLE1BQU0sZUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUMzQyxJQUFJLFNBQVMsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUNwQixRQUFRLEdBQUcsaUJBQVEsQ0FBQyxLQUFLLENBQUE7UUFDM0IsQ0FBQztRQUVELE1BQU0sZUFBZSxHQUFHLENBQUEsTUFBQSxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQiwwQ0FBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUksRUFBRSxDQUFBO1FBQ3RFLE1BQU0sV0FBVyxHQUFHLENBQUEsTUFBQSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksMENBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFJLEVBQUUsQ0FBQTtRQUU5RCxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztZQUNwQyxRQUFRLEdBQUcsaUJBQVEsQ0FBQyxLQUFLLENBQUE7UUFDM0IsQ0FBQzthQUFNLElBQUksZUFBZSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO1lBQy9DLFFBQVEsR0FBRyxpQkFBUSxDQUFDLFNBQVMsQ0FBQTtRQUMvQixDQUFDO1FBR0QsTUFBTSxPQUFPLEdBQUcsTUFBTSxlQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUN2QyxJQUFJLEVBQUU7Z0JBQ0osT0FBTztnQkFDUCxLQUFLLEVBQUUsU0FBUztnQkFDaEIsU0FBUyxFQUFFLFNBQVMsQ0FBQyxTQUFTLElBQUksRUFBRTtnQkFDcEMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxRQUFRLElBQUksRUFBRTtnQkFDbEMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxRQUFRLElBQUksRUFBRTtnQkFDbEMsSUFBSSxFQUFFLFFBQVE7YUFDZjtTQUNGLENBQUMsQ0FBQTtRQUVGLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLE9BQU8sYUFBYSxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBQ3BFLE9BQU8sT0FBTyxDQUFBO0lBRWhCLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUNwRCxNQUFNLEtBQUssQ0FBQTtJQUNiLENBQUM7QUFDSCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQmlsdXJcXERvY3VtZW50c1xcRGV2ZWxvcG1lbnRcXE5leHRcXHNvcnljay1hY2Nlc3NcXHNyY1xcbGliXFxzeW5jLXVzZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xlcmtDbGllbnQgfSBmcm9tICdAY2xlcmsvbmV4dGpzL3NlcnZlcidcclxuaW1wb3J0IHsgcHJpc21hIH0gZnJvbSAnQC9saWIvcHJpc21hJ1xyXG5pbXBvcnQgeyBVc2VyUm9sZSB9IGZyb20gJ0BwcmlzbWEvY2xpZW50J1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN5bmNVc2VyRnJvbUNsZXJrKGNsZXJrSWQ6IHN0cmluZykge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBjbGllbnQgPSBhd2FpdCBjbGVya0NsaWVudCgpXHJcbiAgICBjb25zdCBjbGVya1VzZXIgPSBhd2FpdCBjbGllbnQudXNlcnMuZ2V0VXNlcihjbGVya0lkKVxyXG4gICAgXHJcbiAgICBpZiAoIWNsZXJrVXNlcikge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VzdWFyaW8gbm8gZW5jb250cmFkbyBlbiBDbGVyaycpXHJcbiAgICB9XHJcblxyXG4gICAgXHJcbiAgICBjb25zdCBleGlzdGluZ1VzZXIgPSBhd2FpdCBwcmlzbWEudXNlci5maW5kVW5pcXVlKHtcclxuICAgICAgd2hlcmU6IHsgY2xlcmtJZCB9XHJcbiAgICB9KVxyXG5cclxuICAgIGlmIChleGlzdGluZ1VzZXIpIHtcclxuICAgICAgcmV0dXJuIGV4aXN0aW5nVXNlclxyXG4gICAgfVxyXG5cclxuICAgIFxyXG4gICAgY29uc3QgdXNlckVtYWlsID0gY2xlcmtVc2VyLmVtYWlsQWRkcmVzc2VzWzBdPy5lbWFpbEFkZHJlc3MgfHwgJydcclxuICAgIFxyXG4gICAgXHJcbiAgICBjb25zdCBleGlzdGluZ1VzZXJCeUVtYWlsID0gYXdhaXQgcHJpc21hLnVzZXIuZmluZFVuaXF1ZSh7XHJcbiAgICAgIHdoZXJlOiB7IGVtYWlsOiB1c2VyRW1haWwgfVxyXG4gICAgfSlcclxuXHJcbiAgICBcclxuICAgIGlmIChleGlzdGluZ1VzZXJCeUVtYWlsICYmIGV4aXN0aW5nVXNlckJ5RW1haWwuY2xlcmtJZCAhPT0gY2xlcmtJZCkge1xyXG4gICAgICBjb25zb2xlLmxvZyhgQWN0dWFsaXphbmRvIGNsZXJrSWQgcGFyYSB1c3VhcmlvIGV4aXN0ZW50ZTogJHt1c2VyRW1haWx9YClcclxuICAgICAgY29uc3QgdXBkYXRlZFVzZXIgPSBhd2FpdCBwcmlzbWEudXNlci51cGRhdGUoe1xyXG4gICAgICAgIHdoZXJlOiB7IGVtYWlsOiB1c2VyRW1haWwgfSxcclxuICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICBjbGVya0lkLFxyXG4gICAgICAgICAgZmlyc3ROYW1lOiBjbGVya1VzZXIuZmlyc3ROYW1lIHx8IGV4aXN0aW5nVXNlckJ5RW1haWwuZmlyc3ROYW1lLFxyXG4gICAgICAgICAgbGFzdE5hbWU6IGNsZXJrVXNlci5sYXN0TmFtZSB8fCBleGlzdGluZ1VzZXJCeUVtYWlsLmxhc3ROYW1lLFxyXG4gICAgICAgICAgaW1hZ2VVcmw6IGNsZXJrVXNlci5pbWFnZVVybCB8fCBleGlzdGluZ1VzZXJCeUVtYWlsLmltYWdlVXJsLFxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICAgcmV0dXJuIHVwZGF0ZWRVc2VyXHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHVzZXJSb2xlOiBVc2VyUm9sZSA9IFVzZXJSb2xlLkNMSUVOVFxyXG4gICAgXHJcbiAgICBpZiAoY2xlcmtVc2VyLnB1YmxpY01ldGFkYXRhICYmIHR5cGVvZiBjbGVya1VzZXIucHVibGljTWV0YWRhdGEgPT09ICdvYmplY3QnICYmICdyb2xlJyBpbiBjbGVya1VzZXIucHVibGljTWV0YWRhdGEpIHtcclxuICAgICAgY29uc3QgbWV0YWRhdGFSb2xlID0gY2xlcmtVc2VyLnB1YmxpY01ldGFkYXRhLnJvbGUgYXMgc3RyaW5nXHJcbiAgICAgIGlmIChPYmplY3QudmFsdWVzKFVzZXJSb2xlKS5pbmNsdWRlcyhtZXRhZGF0YVJvbGUgYXMgVXNlclJvbGUpKSB7XHJcbiAgICAgICAgdXNlclJvbGUgPSBtZXRhZGF0YVJvbGUgYXMgVXNlclJvbGVcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHVzZXJDb3VudCA9IGF3YWl0IHByaXNtYS51c2VyLmNvdW50KClcclxuICAgIGlmICh1c2VyQ291bnQgPT09IDApIHtcclxuICAgICAgdXNlclJvbGUgPSBVc2VyUm9sZS5BRE1JTlxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG9yZ2FuaXplckVtYWlscyA9IHByb2Nlc3MuZW52Lk9SR0FOSVpFUl9FTUFJTFM/LnNwbGl0KCcsJykgfHwgW11cclxuICAgIGNvbnN0IGFkbWluRW1haWxzID0gcHJvY2Vzcy5lbnYuQURNSU5fRU1BSUxTPy5zcGxpdCgnLCcpIHx8IFtdXHJcbiAgICBcclxuICAgIGlmIChhZG1pbkVtYWlscy5pbmNsdWRlcyh1c2VyRW1haWwpKSB7XHJcbiAgICAgIHVzZXJSb2xlID0gVXNlclJvbGUuQURNSU5cclxuICAgIH0gZWxzZSBpZiAob3JnYW5pemVyRW1haWxzLmluY2x1ZGVzKHVzZXJFbWFpbCkpIHtcclxuICAgICAgdXNlclJvbGUgPSBVc2VyUm9sZS5PUkdBTklaRVJcclxuICAgIH1cclxuXHJcbiAgICBcclxuICAgIGNvbnN0IG5ld1VzZXIgPSBhd2FpdCBwcmlzbWEudXNlci5jcmVhdGUoe1xyXG4gICAgICBkYXRhOiB7XHJcbiAgICAgICAgY2xlcmtJZCxcclxuICAgICAgICBlbWFpbDogdXNlckVtYWlsLFxyXG4gICAgICAgIGZpcnN0TmFtZTogY2xlcmtVc2VyLmZpcnN0TmFtZSB8fCAnJyxcclxuICAgICAgICBsYXN0TmFtZTogY2xlcmtVc2VyLmxhc3ROYW1lIHx8ICcnLFxyXG4gICAgICAgIGltYWdlVXJsOiBjbGVya1VzZXIuaW1hZ2VVcmwgfHwgJycsXHJcbiAgICAgICAgcm9sZTogdXNlclJvbGUsXHJcbiAgICAgIH0sXHJcbiAgICB9KVxyXG5cclxuICAgIGNvbnNvbGUubG9nKGBVc3VhcmlvIHNpbmNyb25pemFkbzogJHtjbGVya0lkfSBjb24gcm9sOiAke3VzZXJSb2xlfWApXHJcbiAgICByZXR1cm4gbmV3VXNlclxyXG5cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3Igc2luY3Jvbml6YW5kbyB1c3VhcmlvOicsIGVycm9yKVxyXG4gICAgdGhyb3cgZXJyb3JcclxuICB9XHJcbn0iXSwidmVyc2lvbiI6M30=