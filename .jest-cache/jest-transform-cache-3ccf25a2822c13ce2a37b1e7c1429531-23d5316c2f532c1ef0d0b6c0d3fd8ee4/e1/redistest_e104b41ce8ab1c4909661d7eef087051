a7c3ca77b103b49939d8b1faa7479695
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('ioredis', () => {
    return {
        Redis: jest.fn().mockImplementation(() => ({
            pipeline: () => ({ setex: jest.fn(), exec: jest.fn() }),
            setex: jest.fn(),
            get: jest.fn(),
            del: jest.fn(),
            keys: jest.fn().mockResolvedValue([]),
            ping: jest.fn().mockResolvedValue('PONG'),
            quit: jest.fn().mockResolvedValue(undefined),
            on: jest.fn(),
        })),
    };
});
const redis_1 = require("../../lib/redis");
describe('CacheService basic operations', () => {
    it('setUserBatch uses pipeline and exec', async () => {
        const cache = redis_1.CacheService.getInstance();
        // Should not throw
        const user = { id: '1', clerkId: 'clerk_1', email: 'a@a.com', role: 'USER' };
        await expect(cache.setUserBatch('clerk_1', user)).resolves.toBeUndefined();
    });
    it('ping returns true when redis PONG', async () => {
        const cache = redis_1.CacheService.getInstance();
        const ok = await cache.ping();
        expect(ok).toBe(true);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxCaWx1clxcRG9jdW1lbnRzXFxEZXZlbG9wbWVudFxcTmV4dFxcc29yeWNrLWFjY2Vzc1xcc3JjXFxfX3Rlc3RzX19cXGxpYlxccmVkaXMudGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQUVBLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtJQUN4QixPQUFPO1FBQ0wsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ3pDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDdkQsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDaEIsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDZCxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNkLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDO1lBQ3JDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDO1lBQ3pDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDO1lBQzVDLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1NBQ2QsQ0FBQyxDQUFDO0tBQ0osQ0FBQTtBQUNILENBQUMsQ0FBQyxDQUFBO0FBZkYsMkNBQTJEO0FBaUIzRCxRQUFRLENBQUMsK0JBQStCLEVBQUUsR0FBRyxFQUFFO0lBQzdDLEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNuRCxNQUFNLEtBQUssR0FBRyxvQkFBWSxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBRXhDLG1CQUFtQjtRQUNyQixNQUFNLElBQUksR0FBeUIsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUE7UUFDbEcsTUFBTSxNQUFNLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsSUFBbUIsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxDQUFBO0lBQ3pGLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLG1DQUFtQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ2pELE1BQU0sS0FBSyxHQUFHLG9CQUFZLENBQUMsV0FBVyxFQUFFLENBQUE7UUFDeEMsTUFBTSxFQUFFLEdBQUcsTUFBTSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDN0IsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUN2QixDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQyxDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQmlsdXJcXERvY3VtZW50c1xcRGV2ZWxvcG1lbnRcXE5leHRcXHNvcnljay1hY2Nlc3NcXHNyY1xcX190ZXN0c19fXFxsaWJcXHJlZGlzLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FjaGVTZXJ2aWNlLCBVc2VyUHJvZmlsZSB9IGZyb20gJy4uLy4uL2xpYi9yZWRpcydcclxuXHJcbmplc3QubW9jaygnaW9yZWRpcycsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgUmVkaXM6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcclxuICAgICAgcGlwZWxpbmU6ICgpID0+ICh7IHNldGV4OiBqZXN0LmZuKCksIGV4ZWM6IGplc3QuZm4oKSB9KSxcclxuICAgICAgc2V0ZXg6IGplc3QuZm4oKSxcclxuICAgICAgZ2V0OiBqZXN0LmZuKCksXHJcbiAgICAgIGRlbDogamVzdC5mbigpLFxyXG4gICAgICBrZXlzOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoW10pLFxyXG4gICAgICBwaW5nOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoJ1BPTkcnKSxcclxuICAgICAgcXVpdDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCksXHJcbiAgICAgIG9uOiBqZXN0LmZuKCksXHJcbiAgICB9KSksXHJcbiAgfVxyXG59KVxyXG5cclxuZGVzY3JpYmUoJ0NhY2hlU2VydmljZSBiYXNpYyBvcGVyYXRpb25zJywgKCkgPT4ge1xyXG4gIGl0KCdzZXRVc2VyQmF0Y2ggdXNlcyBwaXBlbGluZSBhbmQgZXhlYycsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IGNhY2hlID0gQ2FjaGVTZXJ2aWNlLmdldEluc3RhbmNlKClcclxuXHJcbiAgICAvLyBTaG91bGQgbm90IHRocm93XHJcbiAgY29uc3QgdXNlcjogUGFydGlhbDxVc2VyUHJvZmlsZT4gPSB7IGlkOiAnMScsIGNsZXJrSWQ6ICdjbGVya18xJywgZW1haWw6ICdhQGEuY29tJywgcm9sZTogJ1VTRVInIH1cclxuICBhd2FpdCBleHBlY3QoY2FjaGUuc2V0VXNlckJhdGNoKCdjbGVya18xJywgdXNlciBhcyBVc2VyUHJvZmlsZSkpLnJlc29sdmVzLnRvQmVVbmRlZmluZWQoKVxyXG4gIH0pXHJcblxyXG4gIGl0KCdwaW5nIHJldHVybnMgdHJ1ZSB3aGVuIHJlZGlzIFBPTkcnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBjYWNoZSA9IENhY2hlU2VydmljZS5nZXRJbnN0YW5jZSgpXHJcbiAgICBjb25zdCBvayA9IGF3YWl0IGNhY2hlLnBpbmcoKVxyXG4gICAgZXhwZWN0KG9rKS50b0JlKHRydWUpXHJcbiAgfSlcclxufSlcclxuIl0sInZlcnNpb24iOjN9