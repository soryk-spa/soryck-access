cceba1bfa483125dfb5eb2aedcf48427
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@/lib/utils");
describe('Utilidades de formateo', () => {
    describe('formatCurrency', () => {
        it('formatea montos correctamente en CLP', () => {
            expect((0, utils_1.formatCurrency)(1000)).toBe('$1.000');
            expect((0, utils_1.formatCurrency)(1500, 'CLP')).toBe('$1.500');
            expect((0, utils_1.formatCurrency)(0)).toBe('Gratis');
        });
        it('formatea montos con decimales', () => {
            expect((0, utils_1.formatCurrency)(1500.50)).toBe('$1.501');
            expect((0, utils_1.formatCurrency)(999.99)).toBe('$1.000');
        });
        it('maneja montos negativos', () => {
            expect((0, utils_1.formatCurrency)(-1000)).toBe('$-1.000');
        });
        it('formatea en diferentes monedas', () => {
            expect((0, utils_1.formatCurrency)(1000, 'USD')).toBe('US$1.000');
            expect((0, utils_1.formatCurrency)(1000, 'EUR')).toContain('EUR');
            expect((0, utils_1.formatCurrency)(1000, 'EUR')).toContain('1.000');
        });
    });
    describe('formatPriceRange', () => {
        it('formatea rangos de precios correctamente', () => {
            expect((0, utils_1.formatPriceRange)(1000, 5000)).toBe('Desde $1.000');
            expect((0, utils_1.formatPriceRange)(0, 1000)).toBe('Desde Gratis');
        });
        it('maneja precios iguales', () => {
            expect((0, utils_1.formatPriceRange)(1000, 1000)).toBe('$1.000');
        });
        it('maneja ambos precios en cero', () => {
            expect((0, utils_1.formatPriceRange)(0, 0)).toBe('Gratis');
        });
    });
    describe('formatNumber', () => {
        it('formatea números grandes con sufijos', () => {
            expect((0, utils_1.formatNumber)(999)).toBe('999');
            expect((0, utils_1.formatNumber)(1000)).toBe('1.0K');
            expect((0, utils_1.formatNumber)(1500)).toBe('1.5K');
            expect((0, utils_1.formatNumber)(1000000)).toBe('1.0M');
            expect((0, utils_1.formatNumber)(1500000)).toBe('1.5M');
            expect((0, utils_1.formatNumber)(1000000000)).toBe('1.0B');
        });
        it('maneja números pequeños', () => {
            expect((0, utils_1.formatNumber)(500)).toBe('500');
            expect((0, utils_1.formatNumber)(0)).toBe('0');
        });
    });
    describe('formatPercentage', () => {
        it('formatea porcentajes correctamente', () => {
            expect((0, utils_1.formatPercentage)(50)).toBe('50.0%');
            expect((0, utils_1.formatPercentage)(100)).toBe('100.0%');
            expect((0, utils_1.formatPercentage)(33.3)).toBe('33.3%');
        });
        it('maneja decimales específicos', () => {
            expect((0, utils_1.formatPercentage)(12.34, 1)).toBe('12.3%');
            expect((0, utils_1.formatPercentage)(12.34, 2)).toBe('12.34%');
            expect((0, utils_1.formatPercentage)(12.34, 0)).toBe('12%');
        });
    });
});
describe('Utilidades de validación', () => {
    describe('isValidEmail', () => {
        it('valida emails correctos', () => {
            expect((0, utils_1.isValidEmail)('test@example.com')).toBe(true);
            expect((0, utils_1.isValidEmail)('user.name+tag@domain.co.uk')).toBe(true);
            expect((0, utils_1.isValidEmail)('test123@test-domain.com')).toBe(true);
        });
        it('rechaza emails inválidos', () => {
            expect((0, utils_1.isValidEmail)('invalid-email')).toBe(false);
            expect((0, utils_1.isValidEmail)('test@')).toBe(false);
            expect((0, utils_1.isValidEmail)('@domain.com')).toBe(false);
            expect((0, utils_1.isValidEmail)('')).toBe(false);
        });
    });
    describe('isValidUrl', () => {
        it('valida URLs correctas', () => {
            expect((0, utils_1.isValidUrl)('https://example.com')).toBe(true);
            expect((0, utils_1.isValidUrl)('http://test.co')).toBe(true);
            expect((0, utils_1.isValidUrl)('https://sub.domain.com/path')).toBe(true);
            expect((0, utils_1.isValidUrl)('ftp://example.com')).toBe(true); // URL constructor acepta FTP
        });
        it('rechaza URLs inválidas', () => {
            expect((0, utils_1.isValidUrl)('not-a-url')).toBe(false);
            expect((0, utils_1.isValidUrl)('')).toBe(false);
            expect((0, utils_1.isValidUrl)('just-text')).toBe(false);
        });
    });
});
describe('Utilidades de texto', () => {
    describe('capitalize', () => {
        it('capitaliza correctamente', () => {
            expect((0, utils_1.capitalize)('hello')).toBe('Hello');
            expect((0, utils_1.capitalize)('WORLD')).toBe('World');
            expect((0, utils_1.capitalize)('mIxEd CaSe')).toBe('Mixed case');
        });
        it('maneja strings vacíos', () => {
            expect((0, utils_1.capitalize)('')).toBe('');
        });
    });
    describe('slugify', () => {
        it('crea slugs correctos', () => {
            expect((0, utils_1.slugify)('Hello World')).toBe('hello-world');
            expect((0, utils_1.slugify)('Evento Increíble 2024')).toBe('evento-increible-2024');
            expect((0, utils_1.slugify)('Test@#$%')).toBe('test');
        });
        it('maneja acentos y caracteres especiales', () => {
            expect((0, utils_1.slugify)('Café & Música')).toBe('cafe-musica');
            expect((0, utils_1.slugify)('Niño pequeño')).toBe('nino-pequeno');
        });
    });
    describe('truncate', () => {
        it('trunca texto largo', () => {
            const longText = 'Este es un texto muy largo que necesita ser truncado';
            expect((0, utils_1.truncate)(longText, 20)).toBe('Este es un texto muy...');
        });
        it('no trunca texto corto', () => {
            expect((0, utils_1.truncate)('Corto', 20)).toBe('Corto');
        });
        it('maneja longitud exacta', () => {
            expect((0, utils_1.truncate)('Exacto', 6)).toBe('Exacto');
        });
    });
    describe('getInitials', () => {
        it('obtiene iniciales correctamente', () => {
            expect((0, utils_1.getInitials)('Juan', 'Pérez')).toBe('JP');
            expect((0, utils_1.getInitials)('María José', 'González')).toBe('MG');
            expect((0, utils_1.getInitials)('SingleName', undefined)).toBe('S');
        });
        it('maneja valores nulos y vacíos', () => {
            expect((0, utils_1.getInitials)(null, null)).toBe('?');
            expect((0, utils_1.getInitials)('', '')).toBe('?');
            expect((0, utils_1.getInitials)('Juan', null)).toBe('J');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxCaWx1clxcRG9jdW1lbnRzXFxEZXZlbG9wbWVudFxcTmV4dFxcc29yeWNrLWFjY2Vzc1xcc3JjXFxfX3Rlc3RzX19cXGxpYlxcdXRpbHMudGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQUFBLHVDQVdxQjtBQUVyQixRQUFRLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO0lBQ3RDLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7UUFDOUIsRUFBRSxDQUFDLHNDQUFzQyxFQUFFLEdBQUcsRUFBRTtZQUM5QyxNQUFNLENBQUMsSUFBQSxzQkFBYyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxJQUFBLHNCQUFjLEVBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ25ELE1BQU0sQ0FBQyxJQUFBLHNCQUFjLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsK0JBQStCLEVBQUUsR0FBRyxFQUFFO1lBQ3ZDLE1BQU0sQ0FBQyxJQUFBLHNCQUFjLEVBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDL0MsTUFBTSxDQUFDLElBQUEsc0JBQWMsRUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNoRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx5QkFBeUIsRUFBRSxHQUFHLEVBQUU7WUFDakMsTUFBTSxDQUFDLElBQUEsc0JBQWMsRUFBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2hELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLGdDQUFnQyxFQUFFLEdBQUcsRUFBRTtZQUN4QyxNQUFNLENBQUMsSUFBQSxzQkFBYyxFQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNyRCxNQUFNLENBQUMsSUFBQSxzQkFBYyxFQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNyRCxNQUFNLENBQUMsSUFBQSxzQkFBYyxFQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6RCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtRQUNoQyxFQUFFLENBQUMsMENBQTBDLEVBQUUsR0FBRyxFQUFFO1lBQ2xELE1BQU0sQ0FBQyxJQUFBLHdCQUFnQixFQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUMxRCxNQUFNLENBQUMsSUFBQSx3QkFBZ0IsRUFBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDekQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO1lBQ2hDLE1BQU0sQ0FBQyxJQUFBLHdCQUFnQixFQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0RCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUU7WUFDdEMsTUFBTSxDQUFDLElBQUEsd0JBQWdCLEVBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRTtRQUM1QixFQUFFLENBQUMsc0NBQXNDLEVBQUUsR0FBRyxFQUFFO1lBQzlDLE1BQU0sQ0FBQyxJQUFBLG9CQUFZLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdEMsTUFBTSxDQUFDLElBQUEsb0JBQVksRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN4QyxNQUFNLENBQUMsSUFBQSxvQkFBWSxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sQ0FBQyxJQUFBLG9CQUFZLEVBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDM0MsTUFBTSxDQUFDLElBQUEsb0JBQVksRUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMzQyxNQUFNLENBQUMsSUFBQSxvQkFBWSxFQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtZQUNqQyxNQUFNLENBQUMsSUFBQSxvQkFBWSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3RDLE1BQU0sQ0FBQyxJQUFBLG9CQUFZLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7UUFDaEMsRUFBRSxDQUFDLG9DQUFvQyxFQUFFLEdBQUcsRUFBRTtZQUM1QyxNQUFNLENBQUMsSUFBQSx3QkFBZ0IsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMzQyxNQUFNLENBQUMsSUFBQSx3QkFBZ0IsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM3QyxNQUFNLENBQUMsSUFBQSx3QkFBZ0IsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvQyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUU7WUFDdEMsTUFBTSxDQUFDLElBQUEsd0JBQWdCLEVBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2pELE1BQU0sQ0FBQyxJQUFBLHdCQUFnQixFQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNsRCxNQUFNLENBQUMsSUFBQSx3QkFBZ0IsRUFBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRTtJQUN4QyxRQUFRLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRTtRQUM1QixFQUFFLENBQUMseUJBQXlCLEVBQUUsR0FBRyxFQUFFO1lBQ2pDLE1BQU0sQ0FBQyxJQUFBLG9CQUFZLEVBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNwRCxNQUFNLENBQUMsSUFBQSxvQkFBWSxFQUFDLDRCQUE0QixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDOUQsTUFBTSxDQUFDLElBQUEsb0JBQVksRUFBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRTtZQUNsQyxNQUFNLENBQUMsSUFBQSxvQkFBWSxFQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2xELE1BQU0sQ0FBQyxJQUFBLG9CQUFZLEVBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDMUMsTUFBTSxDQUFDLElBQUEsb0JBQVksRUFBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNoRCxNQUFNLENBQUMsSUFBQSxvQkFBWSxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtRQUMxQixFQUFFLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO1lBQy9CLE1BQU0sQ0FBQyxJQUFBLGtCQUFVLEVBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNyRCxNQUFNLENBQUMsSUFBQSxrQkFBVSxFQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDaEQsTUFBTSxDQUFDLElBQUEsa0JBQVUsRUFBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzdELE1BQU0sQ0FBQyxJQUFBLGtCQUFVLEVBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLDZCQUE2QjtRQUNuRixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSxHQUFHLEVBQUU7WUFDaEMsTUFBTSxDQUFDLElBQUEsa0JBQVUsRUFBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM1QyxNQUFNLENBQUMsSUFBQSxrQkFBVSxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ25DLE1BQU0sQ0FBQyxJQUFBLGtCQUFVLEVBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtJQUNuQyxRQUFRLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtRQUMxQixFQUFFLENBQUMsMEJBQTBCLEVBQUUsR0FBRyxFQUFFO1lBQ2xDLE1BQU0sQ0FBQyxJQUFBLGtCQUFVLEVBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDMUMsTUFBTSxDQUFDLElBQUEsa0JBQVUsRUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMxQyxNQUFNLENBQUMsSUFBQSxrQkFBVSxFQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3RELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRTtZQUMvQixNQUFNLENBQUMsSUFBQSxrQkFBVSxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtRQUN2QixFQUFFLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO1lBQzlCLE1BQU0sQ0FBQyxJQUFBLGVBQU8sRUFBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUNuRCxNQUFNLENBQUMsSUFBQSxlQUFPLEVBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1lBQ3ZFLE1BQU0sQ0FBQyxJQUFBLGVBQU8sRUFBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMzQyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx3Q0FBd0MsRUFBRSxHQUFHLEVBQUU7WUFDaEQsTUFBTSxDQUFDLElBQUEsZUFBTyxFQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ3JELE1BQU0sQ0FBQyxJQUFBLGVBQU8sRUFBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUN2RCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUU7UUFDeEIsRUFBRSxDQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRTtZQUM1QixNQUFNLFFBQVEsR0FBRyxzREFBc0QsQ0FBQztZQUN4RSxNQUFNLENBQUMsSUFBQSxnQkFBUSxFQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQ2pFLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRTtZQUMvQixNQUFNLENBQUMsSUFBQSxnQkFBUSxFQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5QyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSxHQUFHLEVBQUU7WUFDaEMsTUFBTSxDQUFDLElBQUEsZ0JBQVEsRUFBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0MsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFO1FBQzNCLEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRSxHQUFHLEVBQUU7WUFDekMsTUFBTSxDQUFDLElBQUEsbUJBQVcsRUFBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDaEQsTUFBTSxDQUFDLElBQUEsbUJBQVcsRUFBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekQsTUFBTSxDQUFDLElBQUEsbUJBQVcsRUFBQyxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsK0JBQStCLEVBQUUsR0FBRyxFQUFFO1lBQ3ZDLE1BQU0sQ0FBQyxJQUFBLG1CQUFXLEVBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzFDLE1BQU0sQ0FBQyxJQUFBLG1CQUFXLEVBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3RDLE1BQU0sQ0FBQyxJQUFBLG1CQUFXLEVBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXEJpbHVyXFxEb2N1bWVudHNcXERldmVsb3BtZW50XFxOZXh0XFxzb3J5Y2stYWNjZXNzXFxzcmNcXF9fdGVzdHNfX1xcbGliXFx1dGlscy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgZm9ybWF0Q3VycmVuY3ksXHJcbiAgZm9ybWF0UHJpY2VSYW5nZSxcclxuICBmb3JtYXROdW1iZXIsXHJcbiAgZm9ybWF0UGVyY2VudGFnZSxcclxuICBpc1ZhbGlkRW1haWwsXHJcbiAgaXNWYWxpZFVybCxcclxuICBjYXBpdGFsaXplLFxyXG4gIHNsdWdpZnksXHJcbiAgdHJ1bmNhdGUsXHJcbiAgZ2V0SW5pdGlhbHMsXHJcbn0gZnJvbSAnQC9saWIvdXRpbHMnO1xyXG5cclxuZGVzY3JpYmUoJ1V0aWxpZGFkZXMgZGUgZm9ybWF0ZW8nLCAoKSA9PiB7XHJcbiAgZGVzY3JpYmUoJ2Zvcm1hdEN1cnJlbmN5JywgKCkgPT4ge1xyXG4gICAgaXQoJ2Zvcm1hdGVhIG1vbnRvcyBjb3JyZWN0YW1lbnRlIGVuIENMUCcsICgpID0+IHtcclxuICAgICAgZXhwZWN0KGZvcm1hdEN1cnJlbmN5KDEwMDApKS50b0JlKCckMS4wMDAnKTtcclxuICAgICAgZXhwZWN0KGZvcm1hdEN1cnJlbmN5KDE1MDAsICdDTFAnKSkudG9CZSgnJDEuNTAwJyk7XHJcbiAgICAgIGV4cGVjdChmb3JtYXRDdXJyZW5jeSgwKSkudG9CZSgnR3JhdGlzJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnZm9ybWF0ZWEgbW9udG9zIGNvbiBkZWNpbWFsZXMnLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChmb3JtYXRDdXJyZW5jeSgxNTAwLjUwKSkudG9CZSgnJDEuNTAxJyk7XHJcbiAgICAgIGV4cGVjdChmb3JtYXRDdXJyZW5jeSg5OTkuOTkpKS50b0JlKCckMS4wMDAnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdtYW5lamEgbW9udG9zIG5lZ2F0aXZvcycsICgpID0+IHtcclxuICAgICAgZXhwZWN0KGZvcm1hdEN1cnJlbmN5KC0xMDAwKSkudG9CZSgnJC0xLjAwMCcpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ2Zvcm1hdGVhIGVuIGRpZmVyZW50ZXMgbW9uZWRhcycsICgpID0+IHtcclxuICAgICAgZXhwZWN0KGZvcm1hdEN1cnJlbmN5KDEwMDAsICdVU0QnKSkudG9CZSgnVVMkMS4wMDAnKTtcclxuICAgICAgZXhwZWN0KGZvcm1hdEN1cnJlbmN5KDEwMDAsICdFVVInKSkudG9Db250YWluKCdFVVInKTtcclxuICAgICAgZXhwZWN0KGZvcm1hdEN1cnJlbmN5KDEwMDAsICdFVVInKSkudG9Db250YWluKCcxLjAwMCcpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdmb3JtYXRQcmljZVJhbmdlJywgKCkgPT4ge1xyXG4gICAgaXQoJ2Zvcm1hdGVhIHJhbmdvcyBkZSBwcmVjaW9zIGNvcnJlY3RhbWVudGUnLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChmb3JtYXRQcmljZVJhbmdlKDEwMDAsIDUwMDApKS50b0JlKCdEZXNkZSAkMS4wMDAnKTtcclxuICAgICAgZXhwZWN0KGZvcm1hdFByaWNlUmFuZ2UoMCwgMTAwMCkpLnRvQmUoJ0Rlc2RlIEdyYXRpcycpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ21hbmVqYSBwcmVjaW9zIGlndWFsZXMnLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChmb3JtYXRQcmljZVJhbmdlKDEwMDAsIDEwMDApKS50b0JlKCckMS4wMDAnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdtYW5lamEgYW1ib3MgcHJlY2lvcyBlbiBjZXJvJywgKCkgPT4ge1xyXG4gICAgICBleHBlY3QoZm9ybWF0UHJpY2VSYW5nZSgwLCAwKSkudG9CZSgnR3JhdGlzJyk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ2Zvcm1hdE51bWJlcicsICgpID0+IHtcclxuICAgIGl0KCdmb3JtYXRlYSBuw7ptZXJvcyBncmFuZGVzIGNvbiBzdWZpam9zJywgKCkgPT4ge1xyXG4gICAgICBleHBlY3QoZm9ybWF0TnVtYmVyKDk5OSkpLnRvQmUoJzk5OScpO1xyXG4gICAgICBleHBlY3QoZm9ybWF0TnVtYmVyKDEwMDApKS50b0JlKCcxLjBLJyk7XHJcbiAgICAgIGV4cGVjdChmb3JtYXROdW1iZXIoMTUwMCkpLnRvQmUoJzEuNUsnKTtcclxuICAgICAgZXhwZWN0KGZvcm1hdE51bWJlcigxMDAwMDAwKSkudG9CZSgnMS4wTScpO1xyXG4gICAgICBleHBlY3QoZm9ybWF0TnVtYmVyKDE1MDAwMDApKS50b0JlKCcxLjVNJyk7XHJcbiAgICAgIGV4cGVjdChmb3JtYXROdW1iZXIoMTAwMDAwMDAwMCkpLnRvQmUoJzEuMEInKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdtYW5lamEgbsO6bWVyb3MgcGVxdWXDsW9zJywgKCkgPT4ge1xyXG4gICAgICBleHBlY3QoZm9ybWF0TnVtYmVyKDUwMCkpLnRvQmUoJzUwMCcpO1xyXG4gICAgICBleHBlY3QoZm9ybWF0TnVtYmVyKDApKS50b0JlKCcwJyk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ2Zvcm1hdFBlcmNlbnRhZ2UnLCAoKSA9PiB7XHJcbiAgICBpdCgnZm9ybWF0ZWEgcG9yY2VudGFqZXMgY29ycmVjdGFtZW50ZScsICgpID0+IHtcclxuICAgICAgZXhwZWN0KGZvcm1hdFBlcmNlbnRhZ2UoNTApKS50b0JlKCc1MC4wJScpO1xyXG4gICAgICBleHBlY3QoZm9ybWF0UGVyY2VudGFnZSgxMDApKS50b0JlKCcxMDAuMCUnKTtcclxuICAgICAgZXhwZWN0KGZvcm1hdFBlcmNlbnRhZ2UoMzMuMykpLnRvQmUoJzMzLjMlJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnbWFuZWphIGRlY2ltYWxlcyBlc3BlY8OtZmljb3MnLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChmb3JtYXRQZXJjZW50YWdlKDEyLjM0LCAxKSkudG9CZSgnMTIuMyUnKTtcclxuICAgICAgZXhwZWN0KGZvcm1hdFBlcmNlbnRhZ2UoMTIuMzQsIDIpKS50b0JlKCcxMi4zNCUnKTtcclxuICAgICAgZXhwZWN0KGZvcm1hdFBlcmNlbnRhZ2UoMTIuMzQsIDApKS50b0JlKCcxMiUnKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKCdVdGlsaWRhZGVzIGRlIHZhbGlkYWNpw7NuJywgKCkgPT4ge1xyXG4gIGRlc2NyaWJlKCdpc1ZhbGlkRW1haWwnLCAoKSA9PiB7XHJcbiAgICBpdCgndmFsaWRhIGVtYWlscyBjb3JyZWN0b3MnLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChpc1ZhbGlkRW1haWwoJ3Rlc3RAZXhhbXBsZS5jb20nKSkudG9CZSh0cnVlKTtcclxuICAgICAgZXhwZWN0KGlzVmFsaWRFbWFpbCgndXNlci5uYW1lK3RhZ0Bkb21haW4uY28udWsnKSkudG9CZSh0cnVlKTtcclxuICAgICAgZXhwZWN0KGlzVmFsaWRFbWFpbCgndGVzdDEyM0B0ZXN0LWRvbWFpbi5jb20nKSkudG9CZSh0cnVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdyZWNoYXphIGVtYWlscyBpbnbDoWxpZG9zJywgKCkgPT4ge1xyXG4gICAgICBleHBlY3QoaXNWYWxpZEVtYWlsKCdpbnZhbGlkLWVtYWlsJykpLnRvQmUoZmFsc2UpO1xyXG4gICAgICBleHBlY3QoaXNWYWxpZEVtYWlsKCd0ZXN0QCcpKS50b0JlKGZhbHNlKTtcclxuICAgICAgZXhwZWN0KGlzVmFsaWRFbWFpbCgnQGRvbWFpbi5jb20nKSkudG9CZShmYWxzZSk7XHJcbiAgICAgIGV4cGVjdChpc1ZhbGlkRW1haWwoJycpKS50b0JlKGZhbHNlKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnaXNWYWxpZFVybCcsICgpID0+IHtcclxuICAgIGl0KCd2YWxpZGEgVVJMcyBjb3JyZWN0YXMnLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChpc1ZhbGlkVXJsKCdodHRwczovL2V4YW1wbGUuY29tJykpLnRvQmUodHJ1ZSk7XHJcbiAgICAgIGV4cGVjdChpc1ZhbGlkVXJsKCdodHRwOi8vdGVzdC5jbycpKS50b0JlKHRydWUpO1xyXG4gICAgICBleHBlY3QoaXNWYWxpZFVybCgnaHR0cHM6Ly9zdWIuZG9tYWluLmNvbS9wYXRoJykpLnRvQmUodHJ1ZSk7XHJcbiAgICAgIGV4cGVjdChpc1ZhbGlkVXJsKCdmdHA6Ly9leGFtcGxlLmNvbScpKS50b0JlKHRydWUpOyAvLyBVUkwgY29uc3RydWN0b3IgYWNlcHRhIEZUUFxyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3JlY2hhemEgVVJMcyBpbnbDoWxpZGFzJywgKCkgPT4ge1xyXG4gICAgICBleHBlY3QoaXNWYWxpZFVybCgnbm90LWEtdXJsJykpLnRvQmUoZmFsc2UpO1xyXG4gICAgICBleHBlY3QoaXNWYWxpZFVybCgnJykpLnRvQmUoZmFsc2UpO1xyXG4gICAgICBleHBlY3QoaXNWYWxpZFVybCgnanVzdC10ZXh0JykpLnRvQmUoZmFsc2UpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuZGVzY3JpYmUoJ1V0aWxpZGFkZXMgZGUgdGV4dG8nLCAoKSA9PiB7XHJcbiAgZGVzY3JpYmUoJ2NhcGl0YWxpemUnLCAoKSA9PiB7XHJcbiAgICBpdCgnY2FwaXRhbGl6YSBjb3JyZWN0YW1lbnRlJywgKCkgPT4ge1xyXG4gICAgICBleHBlY3QoY2FwaXRhbGl6ZSgnaGVsbG8nKSkudG9CZSgnSGVsbG8nKTtcclxuICAgICAgZXhwZWN0KGNhcGl0YWxpemUoJ1dPUkxEJykpLnRvQmUoJ1dvcmxkJyk7XHJcbiAgICAgIGV4cGVjdChjYXBpdGFsaXplKCdtSXhFZCBDYVNlJykpLnRvQmUoJ01peGVkIGNhc2UnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdtYW5lamEgc3RyaW5ncyB2YWPDrW9zJywgKCkgPT4ge1xyXG4gICAgICBleHBlY3QoY2FwaXRhbGl6ZSgnJykpLnRvQmUoJycpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdzbHVnaWZ5JywgKCkgPT4ge1xyXG4gICAgaXQoJ2NyZWEgc2x1Z3MgY29ycmVjdG9zJywgKCkgPT4ge1xyXG4gICAgICBleHBlY3Qoc2x1Z2lmeSgnSGVsbG8gV29ybGQnKSkudG9CZSgnaGVsbG8td29ybGQnKTtcclxuICAgICAgZXhwZWN0KHNsdWdpZnkoJ0V2ZW50byBJbmNyZcOtYmxlIDIwMjQnKSkudG9CZSgnZXZlbnRvLWluY3JlaWJsZS0yMDI0Jyk7XHJcbiAgICAgIGV4cGVjdChzbHVnaWZ5KCdUZXN0QCMkJScpKS50b0JlKCd0ZXN0Jyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnbWFuZWphIGFjZW50b3MgeSBjYXJhY3RlcmVzIGVzcGVjaWFsZXMnLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChzbHVnaWZ5KCdDYWbDqSAmIE3DunNpY2EnKSkudG9CZSgnY2FmZS1tdXNpY2EnKTtcclxuICAgICAgZXhwZWN0KHNsdWdpZnkoJ05pw7FvIHBlcXVlw7FvJykpLnRvQmUoJ25pbm8tcGVxdWVubycpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCd0cnVuY2F0ZScsICgpID0+IHtcclxuICAgIGl0KCd0cnVuY2EgdGV4dG8gbGFyZ28nLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGxvbmdUZXh0ID0gJ0VzdGUgZXMgdW4gdGV4dG8gbXV5IGxhcmdvIHF1ZSBuZWNlc2l0YSBzZXIgdHJ1bmNhZG8nO1xyXG4gICAgICBleHBlY3QodHJ1bmNhdGUobG9uZ1RleHQsIDIwKSkudG9CZSgnRXN0ZSBlcyB1biB0ZXh0byBtdXkuLi4nKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdubyB0cnVuY2EgdGV4dG8gY29ydG8nLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdCh0cnVuY2F0ZSgnQ29ydG8nLCAyMCkpLnRvQmUoJ0NvcnRvJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnbWFuZWphIGxvbmdpdHVkIGV4YWN0YScsICgpID0+IHtcclxuICAgICAgZXhwZWN0KHRydW5jYXRlKCdFeGFjdG8nLCA2KSkudG9CZSgnRXhhY3RvJyk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ2dldEluaXRpYWxzJywgKCkgPT4ge1xyXG4gICAgaXQoJ29idGllbmUgaW5pY2lhbGVzIGNvcnJlY3RhbWVudGUnLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChnZXRJbml0aWFscygnSnVhbicsICdQw6lyZXonKSkudG9CZSgnSlAnKTtcclxuICAgICAgZXhwZWN0KGdldEluaXRpYWxzKCdNYXLDrWEgSm9zw6knLCAnR29uesOhbGV6JykpLnRvQmUoJ01HJyk7XHJcbiAgICAgIGV4cGVjdChnZXRJbml0aWFscygnU2luZ2xlTmFtZScsIHVuZGVmaW5lZCkpLnRvQmUoJ1MnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdtYW5lamEgdmFsb3JlcyBudWxvcyB5IHZhY8Otb3MnLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChnZXRJbml0aWFscyhudWxsLCBudWxsKSkudG9CZSgnPycpO1xyXG4gICAgICBleHBlY3QoZ2V0SW5pdGlhbHMoJycsICcnKSkudG9CZSgnPycpO1xyXG4gICAgICBleHBlY3QoZ2V0SW5pdGlhbHMoJ0p1YW4nLCBudWxsKSkudG9CZSgnSicpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwidmVyc2lvbiI6M30=