060430e97061455f8380f8a99adb580b
/**
 * Tests simples para el sistema de invitaciones de cortesía
 * Tests básicos sin sintaxis TypeScript avanzada
 */

// Mock básico de fetch
global.fetch = jest.fn();
describe('Sistema de Invitaciones de Cortesía', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    fetch.mockClear();
  });
  describe('API de Invitaciones - GET', () => {
    it('debería obtener lista de invitaciones exitosamente', async () => {
      const mockInvitations = [{
        id: 'inv-1',
        invitedEmail: 'test@example.com',
        invitedName: 'Test User',
        status: 'PENDING',
        invitationCode: 'ABC123',
        expiresAt: '2025-12-31T23:59:59Z',
        createdAt: '2025-09-01T10:00:00Z'
      }];
      fetch.mockResolvedValueOnce({
        ok: true,
        json: async () => ({
          event: {
            id: 'event-1',
            title: 'Test Event'
          },
          invitations: mockInvitations
        })
      });
      const response = await fetch('/api/events/event-1/invitations');
      const data = await response.json();
      expect(response.ok).toBe(true);
      expect(data.invitations).toHaveLength(1);
      expect(data.invitations[0].invitedEmail).toBe('test@example.com');
      expect(data.invitations[0].status).toBe('PENDING');
    });
    it('debería manejar errores al obtener invitaciones', async () => {
      fetch.mockRejectedValueOnce(new Error('Network error'));
      try {
        await fetch('/api/events/event-1/invitations');
      } catch (error) {
        expect(error.message).toBe('Network error');
      }
    });
  });
  describe('API de Invitaciones - POST Individual', () => {
    it('debería crear una invitación individual exitosamente', async () => {
      const newInvitation = {
        invitedEmail: 'new@example.com',
        invitedName: 'New User'
      };
      const mockResponse = {
        message: '1 invitación(es) creada(s) exitosamente',
        invitations: [{
          id: 'inv-new',
          ...newInvitation,
          status: 'PENDING',
          invitationCode: 'XYZ789'
        }]
      };
      fetch.mockResolvedValueOnce({
        ok: true,
        json: async () => mockResponse
      });
      const response = await fetch('/api/events/event-1/invitations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(newInvitation)
      });
      const data = await response.json();
      expect(response.ok).toBe(true);
      expect(data.message).toContain('1 invitación(es) creada(s)');
      expect(data.invitations[0].invitedEmail).toBe('new@example.com');
    });
    it('debería validar email requerido', async () => {
      const invalidData = {
        invitedName: 'User Without Email'
      };
      fetch.mockResolvedValueOnce({
        ok: false,
        status: 400,
        json: async () => ({
          error: 'Email es requerido'
        })
      });
      const response = await fetch('/api/events/event-1/invitations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(invalidData)
      });
      const data = await response.json();
      expect(response.ok).toBe(false);
      expect(response.status).toBe(400);
      expect(data.error).toContain('Email es requerido');
    });
  });
  describe('API de Invitaciones - POST Masivo', () => {
    it('debería crear múltiples invitaciones exitosamente', async () => {
      const bulkInvitations = {
        invitations: [{
          email: 'user1@test.com',
          name: 'User 1'
        }, {
          email: 'user2@test.com',
          name: 'User 2'
        }, {
          email: 'user3@test.com',
          name: 'User 3'
        }]
      };
      const mockResponse = {
        created: [{
          id: 'inv-1',
          invitedEmail: 'user1@test.com',
          status: 'PENDING'
        }, {
          id: 'inv-2',
          invitedEmail: 'user2@test.com',
          status: 'PENDING'
        }, {
          id: 'inv-3',
          invitedEmail: 'user3@test.com',
          status: 'PENDING'
        }],
        errors: []
      };
      fetch.mockResolvedValueOnce({
        ok: true,
        json: async () => mockResponse
      });
      const response = await fetch('/api/events/event-1/invitations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(bulkInvitations)
      });
      const data = await response.json();
      expect(response.ok).toBe(true);
      expect(data.created).toHaveLength(3);
      expect(data.errors).toHaveLength(0);
      expect(data.created[0].invitedEmail).toBe('user1@test.com');
    });
    it('debería manejar errores parciales en invitaciones masivas', async () => {
      const bulkInvitations = {
        invitations: [{
          email: 'valid@test.com',
          name: 'Valid User'
        }, {
          email: 'duplicate@test.com',
          name: 'Duplicate User'
        }]
      };
      const mockResponse = {
        created: [{
          id: 'inv-1',
          invitedEmail: 'valid@test.com',
          status: 'PENDING'
        }],
        errors: ['Email duplicate@test.com ya existe']
      };
      fetch.mockResolvedValueOnce({
        ok: true,
        json: async () => mockResponse
      });
      const response = await fetch('/api/events/event-1/invitations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(bulkInvitations)
      });
      const data = await response.json();
      expect(response.ok).toBe(true);
      expect(data.created).toHaveLength(1);
      expect(data.errors).toHaveLength(1);
      expect(data.errors[0]).toContain('duplicate@test.com ya existe');
    });
    it('debería validar límite de 50 invitaciones', async () => {
      const tooManyInvitations = {
        invitations: Array.from({
          length: 51
        }, (_, i) => ({
          email: `user${i + 1}@test.com`,
          name: `User ${i + 1}`
        }))
      };
      fetch.mockResolvedValueOnce({
        ok: false,
        status: 400,
        json: async () => ({
          error: 'Máximo 50 invitaciones por lote'
        })
      });
      const response = await fetch('/api/events/event-1/invitations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(tooManyInvitations)
      });
      const data = await response.json();
      expect(response.ok).toBe(false);
      expect(response.status).toBe(400);
      expect(data.error).toContain('Máximo 50 invitaciones');
    });
  });
  describe('Validaciones de Email', () => {
    it('debería validar formato de email', () => {
      const validEmails = ['test@example.com', 'user.name@domain.co.uk', 'user+tag@example.org'];
      const invalidEmails = ['not-an-email', '@example.com', 'user@', 'user space@example.com'];
      validEmails.forEach(email => {
        const isValid = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
        expect(isValid).toBe(true);
      });
      invalidEmails.forEach(email => {
        const isValid = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
        expect(isValid).toBe(false);
      });
    });
  });
  describe('Procesamiento de Texto para Invitaciones Masivas', () => {
    it('debería extraer emails de texto', () => {
      const textInput = `
        user1@test.com, User One
        user2@test.com, User Two
        user3@test.com
        invalid-email-here
        user4@example.org, User Four
      `;

      // Simulamos el procesamiento que haría el componente
      const lines = textInput.split('\n').filter(line => line.trim());
      const validEmails = [];
      lines.forEach(line => {
        const emailMatch = line.match(/([^\s@]+@[^\s@]+\.[^\s@]+)/);
        if (emailMatch) {
          const email = emailMatch[1];
          const name = line.replace(email, '').replace(',', '').trim() || undefined;
          validEmails.push({
            email,
            name
          });
        }
      });
      expect(validEmails).toHaveLength(4);
      expect(validEmails[0]).toEqual({
        email: 'user1@test.com',
        name: 'User One'
      });
      expect(validEmails[1]).toEqual({
        email: 'user2@test.com',
        name: 'User Two'
      });
      expect(validEmails[2]).toEqual({
        email: 'user3@test.com',
        name: undefined
      });
      expect(validEmails[3]).toEqual({
        email: 'user4@example.org',
        name: 'User Four'
      });
    });
    it('debería manejar diferentes formatos de entrada', () => {
      const formats = ['user1@test.com', 'user2@test.com, User Two', 'User Three <user3@test.com>', 'user4@test.com; User Four'];
      formats.forEach(format => {
        const emailMatch = format.match(/([^\s@]+@[^\s@]+\.[^\s@]+)/);
        expect(emailMatch).toBeTruthy();
        expect(emailMatch[1]).toMatch(/^[^\s@]+@[^\s@]+\.[^\s@]+$/);
      });
    });
  });
  describe('Estados de Invitación', () => {
    it('debería manejar diferentes estados de invitación', () => {
      const validStatuses = ['PENDING', 'SENT', 'ACCEPTED', 'EXPIRED'];
      validStatuses.forEach(status => {
        expect(['PENDING', 'SENT', 'ACCEPTED', 'EXPIRED']).toContain(status);
      });
    });
    it('debería calcular si una invitación está expirada', () => {
      const now = new Date();
      const futureDate = new Date(now.getTime() + 24 * 60 * 60 * 1000); // +1 día
      const pastDate = new Date(now.getTime() - 24 * 60 * 60 * 1000); // -1 día

      const activInvitation = {
        expiresAt: futureDate.toISOString(),
        status: 'PENDING'
      };
      const expiredInvitation = {
        expiresAt: pastDate.toISOString(),
        status: 'PENDING'
      };
      expect(new Date(activInvitation.expiresAt) > now).toBe(true);
      expect(new Date(expiredInvitation.expiresAt) < now).toBe(true);
    });
  });
  describe('Generación de Códigos de Invitación', () => {
    it('debería generar códigos únicos', () => {
      // Simulamos la generación de códigos como lo haría el backend
      const generateCode = () => {
        return Math.random().toString(36).substring(2, 10).toUpperCase();
      };
      const codes = new Set();
      for (let i = 0; i < 100; i++) {
        const code = generateCode();
        expect(code).toMatch(/^[A-Z0-9]{8}$/);
        codes.add(code);
      }

      // La mayoría deberían ser únicos (permite algunas colisiones raras)
      expect(codes.size).toBeGreaterThan(90);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,