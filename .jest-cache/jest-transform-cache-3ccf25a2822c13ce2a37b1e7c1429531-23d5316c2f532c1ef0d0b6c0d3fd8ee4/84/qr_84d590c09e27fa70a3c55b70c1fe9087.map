{"file":"C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\lib\\qr.ts","mappings":";;;;;AAeA,4CAoBC;AAED,4DAoBC;AAED,oDAOC;AAED,wCAGC;AAvED,oDAA2B;AAepB,KAAK,UAAU,gBAAgB,CAAC,UAAwB;IAC7D,IAAI,CAAC;QACH,MAAM,eAAe,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,mBAAmB,WAAW,UAAU,CAAC,MAAM,EAAE,CAAA;QAExF,MAAM,aAAa,GAAG,MAAM,gBAAM,CAAC,SAAS,CAAC,eAAe,EAAE;YAC5D,oBAAoB,EAAE,GAAG;YACzB,IAAI,EAAE,WAAW;YACjB,MAAM,EAAE,CAAC;YACT,KAAK,EAAE;gBACL,IAAI,EAAE,SAAS;gBACf,KAAK,EAAE,SAAS;aACjB;YACD,KAAK,EAAE,GAAG;SACX,CAAC,CAAA;QAEF,OAAO,aAAa,CAAA;IACtB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAA;QACjD,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAA;IAClD,CAAC;AACH,CAAC;AAEM,KAAK,UAAU,wBAAwB,CAAC,UAAwB;IACrE,IAAI,CAAC;QACH,MAAM,eAAe,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,mBAAmB,WAAW,UAAU,CAAC,MAAM,EAAE,CAAA;QAExF,MAAM,QAAQ,GAAG,MAAM,gBAAM,CAAC,QAAQ,CAAC,eAAe,EAAE;YACtD,oBAAoB,EAAE,GAAG;YACzB,IAAI,EAAE,KAAK;YACX,MAAM,EAAE,CAAC;YACT,KAAK,EAAE;gBACL,IAAI,EAAE,SAAS;gBACf,KAAK,EAAE,SAAS;aACjB;YACD,KAAK,EAAE,GAAG;SACX,CAAC,CAAA;QAEF,OAAO,QAAQ,CAAA;IACjB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAA;QACnD,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAA;IAC9D,CAAC;AACH,CAAC;AAED,SAAgB,oBAAoB,CAAC,OAAe,EAAE,MAAc,EAAE,SAAiB,EAAE,QAAgB,CAAC;IACxG,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;IAChE,MAAM,UAAU,GAAG,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAA;IACzC,MAAM,WAAW,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;IAC3C,MAAM,UAAU,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;IAEzC,OAAO,GAAG,WAAW,IAAI,UAAU,IAAI,UAAU,IAAI,YAAY,IAAI,KAAK,EAAE,CAAC,WAAW,EAAE,CAAA;AAC5F,CAAC;AAED,SAAgB,cAAc,CAAC,MAAc;IAC3C,MAAM,OAAO,GAAG,mDAAmD,CAAA;IACnE,OAAO,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AAC7B,CAAC","names":[],"sources":["C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\lib\\qr.ts"],"sourcesContent":["import QRCode from \"qrcode\"\r\n\r\nexport interface TicketQRData {\r\n  ticketId: string\r\n  eventId: string\r\n  userId: string\r\n  eventTitle: string\r\n  attendeeName: string\r\n  attendeeEmail: string\r\n  eventDate: string\r\n  eventLocation: string\r\n  qrCode: string\r\n  timestamp: string\r\n}\r\n\r\nexport async function generateTicketQR(ticketData: TicketQRData): Promise<string> {\r\n  try {\r\n    const verificationUrl = `${process.env.NEXT_PUBLIC_APP_URL}/verify/${ticketData.qrCode}`\r\n    \r\n    const qrCodeDataUrl = await QRCode.toDataURL(verificationUrl, {\r\n      errorCorrectionLevel: 'M',\r\n      type: 'image/png',\r\n      margin: 1,\r\n      color: {\r\n        dark: '#000000',\r\n        light: '#FFFFFF'\r\n      },\r\n      width: 300\r\n    })\r\n    \r\n    return qrCodeDataUrl\r\n  } catch (error) {\r\n    console.error('Error generating QR code:', error)\r\n    throw new Error('Error al generar el código QR')\r\n  }\r\n}\r\n\r\nexport async function generateTicketQRAsBuffer(ticketData: TicketQRData): Promise<Buffer> {\r\n  try {\r\n    const verificationUrl = `${process.env.NEXT_PUBLIC_APP_URL}/verify/${ticketData.qrCode}`\r\n    \r\n    const qrBuffer = await QRCode.toBuffer(verificationUrl, {\r\n      errorCorrectionLevel: 'M',\r\n      type: 'png',\r\n      margin: 1,\r\n      color: {\r\n        dark: '#000000',\r\n        light: '#FFFFFF'\r\n      },\r\n      width: 300\r\n    })\r\n    \r\n    return qrBuffer\r\n  } catch (error) {\r\n    console.error('Error generating QR buffer:', error)\r\n    throw new Error('Error al generar el código QR como buffer')\r\n  }\r\n}\r\n\r\nexport function generateUniqueQRCode(eventId: string, userId: string, timestamp: number, index: number = 0): string {\r\n  const randomString = Math.random().toString(36).substring(2, 15)\r\n  const timeString = timestamp.toString(36)\r\n  const eventString = eventId.substring(0, 8)\r\n  const userString = userId.substring(0, 8)\r\n  \r\n  return `${eventString}-${userString}-${timeString}-${randomString}-${index}`.toUpperCase()\r\n}\r\n\r\nexport function validateQRCode(qrCode: string): boolean {\r\n  const qrRegex = /^[A-Z0-9]{8}-[A-Z0-9]{8}-[A-Z0-9]+-[A-Z0-9]+-\\d+$/\r\n  return qrRegex.test(qrCode)\r\n}"],"version":3}