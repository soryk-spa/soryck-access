{"file":"C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\__tests__\\api\\verify.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\__tests__\\api\\verify.test.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\njest.mock('next/server', () => {\r\n  class NextResponse {\r\n    status: number\r\n    body: any\r\n    headers: any\r\n    constructor(body?: any, opts?: any) {\r\n      this.status = opts?.status || 200\r\n      this.body = body\r\n      this.headers = opts?.headers || {}\r\n    }\r\n    static json(body: any, opts?: any) {\r\n      return { status: opts?.status || 200, body }\r\n    }\r\n  }\r\n  return { NextResponse }\r\n})\r\n\r\n// Shared mock prisma with required methods\r\nconst mockPrisma = {\r\n  ticket: {\r\n    findUnique: jest.fn(),\r\n    update: jest.fn(),\r\n  },\r\n  eventScanner: {\r\n    findFirst: jest.fn(),\r\n  }\r\n}\r\njest.mock('@/lib/prisma', () => ({ prisma: mockPrisma }))\r\n\r\n// Mock auth helper requireAuth used in POST\r\nconst mockRequireAuth = jest.fn()\r\njest.mock('@/lib/auth', () => ({ requireAuth: mockRequireAuth }))\r\n\r\ndescribe('GET/POST /api/verify/[qrCode]', () => {\r\n  beforeEach(() => jest.clearAllMocks())\r\n\r\n  it('GET returns 404 when ticket not found', async () => {\r\n    mockPrisma.ticket.findUnique.mockResolvedValueOnce(null)\r\n    const { GET } = await import('../../../src/app/api/verify/[qrCode]/route')\r\n    const res = await GET(undefined as any, { params: Promise.resolve({ qrCode: 'EVENT123-USER5678-ABC-DEF-0' }) } as any)\r\n    expect(res.status).toBe(404)\r\n    expect(res.body).toBeDefined()\r\n    expect((res.body as any).error).toBe('Ticket no encontrado')\r\n  })\r\n\r\n  it('GET returns ticket info when found', async () => {\r\n    const fakeTicket = {\r\n      id: 't1',\r\n      qrCode: 'EVENT-USER-0-ABC-0',\r\n      isUsed: false,\r\n      usedAt: null,\r\n      status: 'ACTIVE',\r\n      user: { firstName: 'A', lastName: 'B', email: 'a@a.com' },\r\n      event: { id: 'e1', title: 'E', startDate: new Date(), endDate: null, location: 'L', organizer: { id: 'org1' } },\r\n      order: { orderNumber: 'ORD1', totalAmount: 1000, currency: 'CLP' },\r\n      createdAt: new Date(),\r\n    }\r\n  mockPrisma.ticket.findUnique.mockResolvedValueOnce(fakeTicket)\r\n\r\n    const { GET } = await import('../../../src/app/api/verify/[qrCode]/route')\r\n    const res = await GET(undefined as any, { params: Promise.resolve({ qrCode: 'EVENT123-USER5678-ABC-DEF-0' }) } as any)\r\n\r\n    expect(res.status).toBe(200)\r\n    expect(res.body.ticket).toBeDefined()\r\n    expect(res.body.canUse).toBe(true)\r\n  })\r\n\r\n  it('POST forbids when user lacks scanner permissions', async () => {\r\n  mockRequireAuth.mockResolvedValueOnce({ id: 'u1', role: 'USER' })\r\n  mockPrisma.ticket.findUnique.mockResolvedValueOnce({ id: 't1', event: { id: 'e1', organizerId: 'org1' }, isUsed: false, status: 'ACTIVE' })\r\n\r\n    const { POST } = await import('../../../src/app/api/verify/[qrCode]/route')\r\n    const res = await POST(undefined as any, { params: Promise.resolve({ qrCode: 'EVENT123-USER5678-ABC-DEF-0' }) } as any)\r\n\r\n    expect(res.status).toBe(403)\r\n    expect(res.body.error).toBe('No tienes permisos para validar tickets')\r\n  })\r\n\r\n  it('POST marks ticket as used when permitted', async () => {\r\n  mockRequireAuth.mockResolvedValueOnce({ id: 'scanner_1', role: 'SCANNER' })\r\n  mockPrisma.ticket.findUnique.mockResolvedValueOnce({ id: 't1', qrCode: 'EVENT-USER-0-ABC-0', isUsed: false, status: 'ACTIVE', event: { id: 'e1', organizerId: 'org1', title: 'E', startDate: new Date() } })\r\n  mockPrisma.eventScanner.findFirst.mockResolvedValueOnce({ id: 'assign1' })\r\n  mockPrisma.ticket.update.mockResolvedValueOnce({ id: 't1', qrCode: 'EVENT-USER-0-ABC-0', isUsed: true, usedAt: new Date(), user: { firstName: 'X', lastName: 'Y', email: 'x@y.com' } })\r\n\r\n    const { POST } = await import('../../../src/app/api/verify/[qrCode]/route')\r\n    const res = await POST(undefined as any, { params: Promise.resolve({ qrCode: 'EVENT123-USER5678-ABC-DEF-0' }) } as any)\r\n\r\n    expect(res.status).toBe(200)\r\n    expect(res.body.ticket).toBeDefined()\r\n    expect(res.body.ticket.isUsed).toBe(true)\r\n  })\r\n})\r\n"],"version":3}