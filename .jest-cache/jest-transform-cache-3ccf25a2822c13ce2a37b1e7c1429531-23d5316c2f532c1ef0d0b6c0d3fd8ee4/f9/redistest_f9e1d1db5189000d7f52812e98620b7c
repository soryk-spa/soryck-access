82f3e729d9feec629e1debd129d24915
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('ioredis', () => {
    return {
        default: jest.fn().mockImplementation(() => ({
            pipeline: () => ({ setex: jest.fn(), exec: jest.fn() }),
            setex: jest.fn(),
            get: jest.fn(),
            del: jest.fn(),
            keys: jest.fn().mockResolvedValue([]),
            ping: jest.fn().mockResolvedValue('PONG'),
            quit: jest.fn().mockResolvedValue(undefined),
        })),
    };
});
const redis_1 = require("../../lib/redis");
describe('CacheService basic operations', () => {
    it('setUserBatch uses pipeline and exec', async () => {
        const cache = redis_1.CacheService.getInstance();
        // Should not throw
        const user = { id: '1', clerkId: 'clerk_1', email: 'a@a.com', role: 'USER' };
        await expect(cache.setUserBatch('clerk_1', user)).resolves.toBeUndefined();
    });
    it('ping returns true when redis PONG', async () => {
        const cache = redis_1.CacheService.getInstance();
        const ok = await cache.ping();
        expect(ok).toBe(true);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxCaWx1clxcRG9jdW1lbnRzXFxEZXZlbG9wbWVudFxcTmV4dFxcc29yeWNrLWFjY2Vzc1xcc3JjXFxfX3Rlc3RzX19cXGxpYlxccmVkaXMudGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQUVBLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtJQUN4QixPQUFPO1FBQ0wsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQzNDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDdkQsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDaEIsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDZCxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNkLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDO1lBQ3JDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDO1lBQ3pDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDO1NBQzdDLENBQUMsQ0FBQztLQUNKLENBQUE7QUFDSCxDQUFDLENBQUMsQ0FBQTtBQWRGLDJDQUE4QztBQWdCOUMsUUFBUSxDQUFDLCtCQUErQixFQUFFLEdBQUcsRUFBRTtJQUM3QyxFQUFFLENBQUMscUNBQXFDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDbkQsTUFBTSxLQUFLLEdBQUcsb0JBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtRQUV4QyxtQkFBbUI7UUFDckIsTUFBTSxJQUFJLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFrQixDQUFBO1FBQzVGLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLElBQVcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxDQUFBO0lBQ2pGLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLG1DQUFtQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ2pELE1BQU0sS0FBSyxHQUFHLG9CQUFZLENBQUMsV0FBVyxFQUFFLENBQUE7UUFDeEMsTUFBTSxFQUFFLEdBQUcsTUFBTSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDN0IsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUN2QixDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQyxDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQmlsdXJcXERvY3VtZW50c1xcRGV2ZWxvcG1lbnRcXE5leHRcXHNvcnljay1hY2Nlc3NcXHNyY1xcX190ZXN0c19fXFxsaWJcXHJlZGlzLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FjaGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vbGliL3JlZGlzJ1xyXG5cclxuamVzdC5tb2NrKCdpb3JlZGlzJywgKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICBkZWZhdWx0OiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XHJcbiAgICAgIHBpcGVsaW5lOiAoKSA9PiAoeyBzZXRleDogamVzdC5mbigpLCBleGVjOiBqZXN0LmZuKCkgfSksXHJcbiAgICAgIHNldGV4OiBqZXN0LmZuKCksXHJcbiAgICAgIGdldDogamVzdC5mbigpLFxyXG4gICAgICBkZWw6IGplc3QuZm4oKSxcclxuICAgICAga2V5czogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKFtdKSxcclxuICAgICAgcGluZzogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKCdQT05HJyksXHJcbiAgICAgIHF1aXQ6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpLFxyXG4gICAgfSkpLFxyXG4gIH1cclxufSlcclxuXHJcbmRlc2NyaWJlKCdDYWNoZVNlcnZpY2UgYmFzaWMgb3BlcmF0aW9ucycsICgpID0+IHtcclxuICBpdCgnc2V0VXNlckJhdGNoIHVzZXMgcGlwZWxpbmUgYW5kIGV4ZWMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBjYWNoZSA9IENhY2hlU2VydmljZS5nZXRJbnN0YW5jZSgpXHJcblxyXG4gICAgLy8gU2hvdWxkIG5vdCB0aHJvd1xyXG4gIGNvbnN0IHVzZXIgPSB7IGlkOiAnMScsIGNsZXJrSWQ6ICdjbGVya18xJywgZW1haWw6ICdhQGEuY29tJywgcm9sZTogJ1VTRVInIH0gYXMgUGFydGlhbDxhbnk+XHJcbiAgYXdhaXQgZXhwZWN0KGNhY2hlLnNldFVzZXJCYXRjaCgnY2xlcmtfMScsIHVzZXIgYXMgYW55KSkucmVzb2x2ZXMudG9CZVVuZGVmaW5lZCgpXHJcbiAgfSlcclxuXHJcbiAgaXQoJ3BpbmcgcmV0dXJucyB0cnVlIHdoZW4gcmVkaXMgUE9ORycsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IGNhY2hlID0gQ2FjaGVTZXJ2aWNlLmdldEluc3RhbmNlKClcclxuICAgIGNvbnN0IG9rID0gYXdhaXQgY2FjaGUucGluZygpXHJcbiAgICBleHBlY3Qob2spLnRvQmUodHJ1ZSlcclxuICB9KVxyXG59KVxyXG4iXSwidmVyc2lvbiI6M30=