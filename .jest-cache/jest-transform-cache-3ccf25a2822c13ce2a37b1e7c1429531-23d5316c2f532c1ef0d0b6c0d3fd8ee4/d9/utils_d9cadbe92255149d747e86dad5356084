dc0d497dca4e0105840dd89362040ca3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cn = cn;
exports.formatCurrency = formatCurrency;
exports.formatPriceRange = formatPriceRange;
exports.formatNumber = formatNumber;
exports.formatPercentage = formatPercentage;
exports.formatDisplayDate = formatDisplayDate;
exports.formatDisplayDateTime = formatDisplayDateTime;
exports.formatTime = formatTime;
exports.formatShortDate = formatShortDate;
exports.getRelativeDateDescription = getRelativeDateDescription;
exports.isFutureDate = isFutureDate;
exports.isValidEmail = isValidEmail;
exports.isValidUrl = isValidUrl;
exports.capitalize = capitalize;
exports.slugify = slugify;
exports.truncate = truncate;
exports.getInitials = getInitials;
exports.formatFullName = formatFullName;
exports.groupBy = groupBy;
exports.sortBy = sortBy;
exports.unique = unique;
exports.formatDiscount = formatDiscount;
exports.calculateUsagePercentage = calculateUsagePercentage;
exports.getStatusConfig = getStatusConfig;
exports.debounce = debounce;
exports.formatFileSize = formatFileSize;
exports.isValidImageFile = isValidImageFile;
const clsx_1 = require("clsx");
const tailwind_merge_1 = require("tailwind-merge");
function cn(...inputs) {
    return (0, tailwind_merge_1.twMerge)((0, clsx_1.clsx)(inputs));
}
function formatCurrency(amount, currency = 'CLP') {
    if (amount === 0)
        return 'Gratis';
    return new Intl.NumberFormat('es-CL', {
        style: 'currency',
        currency: currency,
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
    }).format(amount);
}
function formatPriceRange(min, max, currency = 'CLP') {
    if (min === 0 && max === 0)
        return "Gratis";
    if (min === max)
        return formatCurrency(min, currency);
    return `Desde ${formatCurrency(min, currency)}`;
}
function formatNumber(num) {
    if (num >= 1000000000) {
        return (num / 1000000000).toFixed(1) + 'B';
    }
    if (num >= 1000000) {
        return (num / 1000000).toFixed(1) + 'M';
    }
    if (num >= 1000) {
        return (num / 1000).toFixed(1) + 'K';
    }
    return num.toString();
}
function formatPercentage(value, decimals = 1) {
    return `${value.toFixed(decimals)}%`;
}
function formatDisplayDate(date) {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    return dateObj.toLocaleDateString("es-CL", {
        weekday: "long",
        year: "numeric",
        month: "long",
        day: "numeric",
        timeZone: "America/Santiago",
    });
}
function formatDisplayDateTime(date) {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    return dateObj.toLocaleString("es-CL", {
        weekday: "long",
        year: "numeric",
        month: "long",
        day: "numeric",
        hour: "2-digit",
        minute: "2-digit",
        timeZone: "America/Santiago",
    });
}
function formatTime(date) {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    return dateObj.toLocaleTimeString("es-CL", {
        hour: "2-digit",
        minute: "2-digit",
        timeZone: "America/Santiago",
    });
}
function formatShortDate(date) {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    return dateObj.toLocaleDateString("es-CL", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
        timeZone: "America/Santiago",
    });
}
function getRelativeDateDescription(date) {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    const now = new Date();
    if (dateObj.toDateString() === now.toDateString())
        return "Hoy";
    const tomorrow = new Date(now);
    tomorrow.setDate(tomorrow.getDate() + 1);
    if (dateObj.toDateString() === tomorrow.toDateString())
        return "Mañana";
    const diffTime = dateObj.getTime() - now.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    if (diffDays < 0) {
        return diffDays === -1 ? "Ayer" : `Hace ${Math.abs(diffDays)} días`;
    }
    else if (diffDays <= 7) {
        return `En ${diffDays} días`;
    }
    else {
        return formatDisplayDate(dateObj);
    }
}
function isFutureDate(date) {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    return dateObj > new Date();
}
function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}
function isValidUrl(url) {
    try {
        new URL(url);
        return true;
    }
    catch (_a) {
        return false;
    }
}
function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
}
function slugify(text) {
    return text
        .toLowerCase()
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '')
        .replace(/[^a-z0-9\s-]/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-')
        .trim();
}
function truncate(text, length) {
    if (text.length <= length)
        return text;
    return text.slice(0, length) + '...';
}
function getInitials(firstName, lastName) {
    const first = (firstName === null || firstName === void 0 ? void 0 : firstName.charAt(0).toUpperCase()) || '';
    const last = (lastName === null || lastName === void 0 ? void 0 : lastName.charAt(0).toUpperCase()) || '';
    return (first + last) || '?';
}
function formatFullName(firstName, lastName) {
    const parts = [firstName, lastName].filter(Boolean);
    return parts.length > 0 ? parts.join(' ') : 'Usuario';
}
function groupBy(array, key) {
    return array.reduce((groups, item) => {
        const group = String(item[key]);
        return Object.assign(Object.assign({}, groups), { [group]: [...(groups[group] || []), item] });
    }, {});
}
function sortBy(array, key, direction = 'asc') {
    return [...array].sort((a, b) => {
        const aValue = a[key];
        const bValue = b[key];
        if (aValue < bValue)
            return direction === 'asc' ? -1 : 1;
        if (aValue > bValue)
            return direction === 'asc' ? 1 : -1;
        return 0;
    });
}
function unique(array) {
    return [...new Set(array)];
}
function formatDiscount(type, value) {
    switch (type) {
        case "PERCENTAGE":
            return `${value}%`;
        case "FIXED_AMOUNT":
            return formatCurrency(value);
        case "FREE":
            return "Gratis";
        default:
            return value.toString();
    }
}
function calculateUsagePercentage(used, limit) {
    if (!limit)
        return 0;
    return Math.min((used / limit) * 100, 100);
}
function getStatusConfig(status) {
    const configs = {
        ACTIVE: { label: "Activo", color: "bg-green-100 text-green-800", variant: "default" },
        INACTIVE: { label: "Inactivo", color: "bg-gray-100 text-gray-800", variant: "secondary" },
        EXPIRED: { label: "Expirado", color: "bg-red-100 text-red-800", variant: "destructive" },
        USED_UP: { label: "Agotado", color: "bg-orange-100 text-orange-800", variant: "outline" },
        PENDING: { label: "Pendiente", color: "bg-yellow-100 text-yellow-800", variant: "outline" },
        PAID: { label: "Pagado", color: "bg-green-100 text-green-800", variant: "default" },
        FAILED: { label: "Fallido", color: "bg-red-100 text-red-800", variant: "destructive" },
        CANCELLED: { label: "Cancelado", color: "bg-gray-100 text-gray-800", variant: "secondary" },
        REFUNDED: { label: "Reembolsado", color: "bg-blue-100 text-blue-800", variant: "outline" },
    };
    return configs[status] || {
        label: status,
        color: "bg-gray-100 text-gray-800",
        variant: "secondary"
    };
}
function debounce(func, wait) {
    let timeout;
    return (...args) => {
        clearTimeout(timeout);
        timeout = setTimeout(() => func(...args), wait);
    };
}
function formatFileSize(bytes) {
    if (bytes === 0)
        return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}
function isValidImageFile(filename) {
    const validExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp'];
    const extension = filename.toLowerCase().substring(filename.lastIndexOf('.'));
    return validExtensions.includes(extension);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,