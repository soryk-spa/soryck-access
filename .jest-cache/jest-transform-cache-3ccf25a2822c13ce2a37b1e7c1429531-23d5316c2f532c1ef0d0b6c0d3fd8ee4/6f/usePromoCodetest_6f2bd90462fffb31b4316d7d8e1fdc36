3ace0060b19264cd28004e99759bf8f8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Mock toast
jest.mock('sonner');
const react_1 = require("@testing-library/react");
const sonner_1 = require("sonner");
const usePromoCode_1 = require("@/hooks/usePromoCode");
const mockToast = sonner_1.toast;
// Mock fetch globally
global.fetch = jest.fn();
const mockFetch = global.fetch;
// Mock navigator clipboard
Object.assign(navigator, {
    clipboard: {
        writeText: jest.fn().mockImplementation(() => Promise.resolve()),
    },
});
// Mock PromoCode data
const mockPromoCodes = [
    {
        id: '1',
        code: 'SUMMER2024',
        name: 'Descuento de Verano',
        description: 'Descuento especial para eventos de verano',
        type: 'PERCENTAGE',
        value: 20,
        status: 'ACTIVE',
        validFrom: '2024-01-01',
        validUntil: '2024-12-31',
        usageLimit: 100,
        usedCount: 25,
        usageLimitPerUser: 1,
        minOrderAmount: 10000,
        maxDiscountAmount: 50000,
        currency: 'CLP',
        createdAt: '2024-01-01',
        updatedAt: '2024-01-01',
        createdBy: 'user1',
        eventId: null,
        categoryId: null,
        ticketTypeId: null,
        _count: { usages: 25 },
    },
    {
        id: '2',
        code: 'FIXED10K',
        name: 'Descuento Fijo',
        description: 'Descuento de monto fijo',
        type: 'FIXED_AMOUNT',
        value: 10000,
        status: 'INACTIVE',
        validFrom: '2024-01-01',
        validUntil: '2024-06-30',
        usageLimit: 50,
        usedCount: 50,
        usageLimitPerUser: 2,
        minOrderAmount: 20000,
        maxDiscountAmount: 30000,
        currency: 'CLP',
        createdAt: '2024-01-01',
        updatedAt: '2024-01-01',
        createdBy: 'user1',
        eventId: 'event1',
        categoryId: null,
        ticketTypeId: null,
        _count: { usages: 50 },
    },
];
describe('usePromoCodeManagement', () => {
    beforeEach(() => {
        jest.clearAllMocks();
        mockFetch.mockClear();
    });
    it('inicializa con códigos promocionales', () => {
        const { result } = (0, react_1.renderHook)(() => (0, usePromoCode_1.usePromoCodeManagement)(mockPromoCodes));
        expect(result.current.promoCodes).toEqual(mockPromoCodes);
        expect(result.current.loadingStates).toEqual({});
    });
    it('activa un código promocional exitosamente', async () => {
        mockFetch.mockResolvedValueOnce({
            ok: true,
            json: async () => ({ success: true }),
        });
        const { result } = (0, react_1.renderHook)(() => (0, usePromoCode_1.usePromoCodeManagement)(mockPromoCodes));
        await (0, react_1.act)(async () => {
            await result.current.togglePromoCodeStatus(mockPromoCodes[1]);
        });
        expect(mockFetch).toHaveBeenCalledWith('/api/promo-codes/2/toggle-status', {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ status: 'ACTIVE' }),
        });
        expect(mockToast.success).toHaveBeenCalledWith('Código promocional activado exitosamente');
        // Verificar que el estado local se actualizó
        const updatedPromoCode = result.current.promoCodes.find(p => p.id === '2');
        expect(updatedPromoCode === null || updatedPromoCode === void 0 ? void 0 : updatedPromoCode.status).toBe('ACTIVE');
    });
    it('maneja errores al cambiar estado', async () => {
        mockFetch.mockResolvedValueOnce({
            ok: false,
            json: async () => ({ error: 'Error de servidor' }),
        });
        const { result } = (0, react_1.renderHook)(() => (0, usePromoCode_1.usePromoCodeManagement)(mockPromoCodes));
        await (0, react_1.act)(async () => {
            await result.current.togglePromoCodeStatus(mockPromoCodes[0]);
        });
        expect(mockToast.error).toHaveBeenCalledWith('Error de servidor');
    });
    it('copia código al portapapeles', async () => {
        const { result } = (0, react_1.renderHook)(() => (0, usePromoCode_1.usePromoCodeManagement)(mockPromoCodes));
        await (0, react_1.act)(async () => {
            result.current.copyToClipboard('SUMMER2024');
        });
        expect(navigator.clipboard.writeText).toHaveBeenCalledWith('SUMMER2024');
        expect(mockToast.success).toHaveBeenCalledWith('Código copiado al portapapeles');
    });
});
describe('usePromoCodeFilters', () => {
    it('filtra códigos por búsqueda', () => {
        const { result } = (0, react_1.renderHook)(() => (0, usePromoCode_1.usePromoCodeFilters)(mockPromoCodes));
        (0, react_1.act)(() => {
            result.current.updateFilter('search', 'SUMMER');
        });
        expect(result.current.filteredPromoCodes).toHaveLength(1);
        expect(result.current.filteredPromoCodes[0].code).toBe('SUMMER2024');
    });
    it('filtra códigos por estado', () => {
        const { result } = (0, react_1.renderHook)(() => (0, usePromoCode_1.usePromoCodeFilters)(mockPromoCodes));
        (0, react_1.act)(() => {
            result.current.updateFilter('status', 'ACTIVE');
        });
        expect(result.current.filteredPromoCodes).toHaveLength(1);
        expect(result.current.filteredPromoCodes[0].status).toBe('ACTIVE');
    });
    it('combina múltiples filtros', () => {
        const { result } = (0, react_1.renderHook)(() => (0, usePromoCode_1.usePromoCodeFilters)(mockPromoCodes));
        (0, react_1.act)(() => {
            result.current.updateFilter('status', 'INACTIVE');
        });
        expect(result.current.filteredPromoCodes).toHaveLength(1);
        expect(result.current.filteredPromoCodes[0].code).toBe('FIXED10K');
    });
    it('limpia filtros correctamente', () => {
        const { result } = (0, react_1.renderHook)(() => (0, usePromoCode_1.usePromoCodeFilters)(mockPromoCodes));
        (0, react_1.act)(() => {
            result.current.updateFilter('status', 'ACTIVE');
        });
        expect(result.current.filteredPromoCodes).toHaveLength(1);
        (0, react_1.act)(() => {
            result.current.clearFilters();
        });
        expect(result.current.filteredPromoCodes).toHaveLength(2);
        expect(result.current.filters).toEqual({ search: '', status: 'all' });
    });
});
describe('usePromoCodeStats', () => {
    it('calcula estadísticas correctamente', () => {
        const { result } = (0, react_1.renderHook)(() => (0, usePromoCode_1.usePromoCodeStats)(mockPromoCodes));
        expect(result.current.total).toBe(2);
        expect(result.current.active).toBe(1);
        expect(result.current.inactive).toBe(1);
        expect(result.current.expired).toBe(0);
        expect(result.current.usedUp).toBe(0);
        expect(result.current.totalUsages).toBe(75);
        expect(result.current.activePercentage).toBe(50);
        expect(result.current.usageRate).toBe(37.5);
    });
    it('calcula estadísticas con códigos expirados', () => {
        const expiredPromoCodes = [
            ...mockPromoCodes,
            Object.assign(Object.assign({}, mockPromoCodes[0]), { id: '3', code: 'EXPIRED', status: 'EXPIRED', validUntil: '2023-12-31' }),
        ];
        const { result } = (0, react_1.renderHook)(() => (0, usePromoCode_1.usePromoCodeStats)(expiredPromoCodes));
        expect(result.current.total).toBe(3);
        expect(result.current.active).toBe(1);
        expect(result.current.inactive).toBe(1);
        expect(result.current.expired).toBe(1);
    });
    it('maneja códigos sin límite de uso', () => {
        const codesWithoutLimit = [
            Object.assign(Object.assign({}, mockPromoCodes[0]), { usageLimit: undefined, usedCount: 10 }),
        ];
        const { result } = (0, react_1.renderHook)(() => (0, usePromoCode_1.usePromoCodeStats)(codesWithoutLimit));
        expect(result.current.total).toBe(1);
        expect(result.current.totalUsages).toBe(10);
    });
});
describe('usePromoCodeSharing', () => {
    beforeEach(() => {
        jest.clearAllMocks();
        // Mock navigator.share
        Object.assign(navigator, {
            share: jest.fn().mockImplementation(() => Promise.resolve()),
        });
    });
    it('comparte código promocional con Web Share API', async () => {
        const { result } = (0, react_1.renderHook)(() => (0, usePromoCode_1.usePromoCodeSharing)());
        const formatDiscount = (type, value) => type === 'PERCENTAGE' ? `${value}%` : `$${value}`;
        await (0, react_1.act)(async () => {
            result.current.sharePromoCode(mockPromoCodes[0], formatDiscount);
        });
        expect(navigator.share).toHaveBeenCalledWith({
            title: 'Código promocional: Descuento de Verano',
            text: '🎫 ¡Descuento especial! Usa el código SUMMER2024 y obtén 20% en tu próxima compra.',
        });
    });
    it('copia al portapapeles cuando no hay Web Share API', async () => {
        // Simular que no hay Web Share API
        Object.assign(navigator, { share: undefined });
        const { result } = (0, react_1.renderHook)(() => (0, usePromoCode_1.usePromoCodeSharing)());
        const formatDiscount = (type, value) => type === 'PERCENTAGE' ? `${value}%` : `$${value}`;
        await (0, react_1.act)(async () => {
            result.current.sharePromoCode(mockPromoCodes[0], formatDiscount);
        });
        expect(navigator.clipboard.writeText).toHaveBeenCalledWith('🎫 ¡Descuento especial! Usa el código SUMMER2024 y obtén 20% en tu próxima compra.');
        expect(mockToast.success).toHaveBeenCalledWith('Texto de promoción copiado al portapapeles');
    });
    it('exporta códigos promocionales a CSV', () => {
        const { result } = (0, react_1.renderHook)(() => (0, usePromoCode_1.usePromoCodeSharing)());
        // Mock para crear y hacer click en link de descarga
        const mockLink = {
            setAttribute: jest.fn(),
            click: jest.fn(),
            style: { visibility: '' },
        };
        const mockCreateElement = jest.spyOn(document, 'createElement').mockReturnValue(mockLink);
        const mockAppendChild = jest.spyOn(document.body, 'appendChild').mockImplementation();
        const mockRemoveChild = jest.spyOn(document.body, 'removeChild').mockImplementation();
        const mockCreateObjectURL = jest.spyOn(URL, 'createObjectURL').mockReturnValue('blob:mock-url');
        (0, react_1.act)(() => {
            result.current.exportPromoCodes(mockPromoCodes);
        });
        expect(mockCreateElement).toHaveBeenCalledWith('a');
        expect(mockToast.success).toHaveBeenCalledWith('Códigos promocionales exportados exitosamente');
        // Limpiar mocks
        mockCreateElement.mockRestore();
        mockAppendChild.mockRestore();
        mockRemoveChild.mockRestore();
        mockCreateObjectURL.mockRestore();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxCaWx1clxcRG9jdW1lbnRzXFxEZXZlbG9wbWVudFxcTmV4dFxcc29yeWNrLWFjY2Vzc1xcc3JjXFxfX3Rlc3RzX19cXGhvb2tzXFx1c2VQcm9tb0NvZGUudGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQVVBLGFBQWE7QUFDYixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBWHBCLGtEQUF5RDtBQUN6RCxtQ0FBK0I7QUFDL0IsdURBSzhCO0FBSzlCLE1BQU0sU0FBUyxHQUFHLGNBQWtDLENBQUM7QUFFckQsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBQ3pCLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxLQUEwQyxDQUFDO0FBRXBFLDJCQUEyQjtBQUMzQixNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtJQUN2QixTQUFTLEVBQUU7UUFDVCxTQUFTLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUNqRTtDQUNGLENBQUMsQ0FBQztBQUVILHNCQUFzQjtBQUN0QixNQUFNLGNBQWMsR0FBZ0I7SUFDbEM7UUFDRSxFQUFFLEVBQUUsR0FBRztRQUNQLElBQUksRUFBRSxZQUFZO1FBQ2xCLElBQUksRUFBRSxxQkFBcUI7UUFDM0IsV0FBVyxFQUFFLDJDQUEyQztRQUN4RCxJQUFJLEVBQUUsWUFBWTtRQUNsQixLQUFLLEVBQUUsRUFBRTtRQUNULE1BQU0sRUFBRSxRQUFRO1FBQ2hCLFNBQVMsRUFBRSxZQUFZO1FBQ3ZCLFVBQVUsRUFBRSxZQUFZO1FBQ3hCLFVBQVUsRUFBRSxHQUFHO1FBQ2YsU0FBUyxFQUFFLEVBQUU7UUFDYixpQkFBaUIsRUFBRSxDQUFDO1FBQ3BCLGNBQWMsRUFBRSxLQUFLO1FBQ3JCLGlCQUFpQixFQUFFLEtBQUs7UUFDeEIsUUFBUSxFQUFFLEtBQUs7UUFDZixT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Q0FBQyxlQUFlLENBQUMsQ0FBQztRQUVoRyxJQUFBLFdBQUcsRUFBQyxHQUFHLEVBQUU7WUFDUCxNQUFNLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2xELENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxvQkFBb0IsQ0FDNUMsK0NBQStDLENBQ2hELENBQUM7UUFFRixnQkFBZ0I7UUFDaEIsaUJBQWlCLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDaEMsZUFBZSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzlCLGVBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM5QixtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQmlsdXJcXERvY3VtZW50c1xcRGV2ZWxvcG1lbnRcXE5leHRcXHNvcnljay1hY2Nlc3NcXHNyY1xcX190ZXN0c19fXFxob29rc1xcdXNlUHJvbW9Db2RlLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVySG9vaywgYWN0IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XHJcbmltcG9ydCB7IHRvYXN0IH0gZnJvbSAnc29ubmVyJztcclxuaW1wb3J0IHtcclxuICB1c2VQcm9tb0NvZGVNYW5hZ2VtZW50LFxyXG4gIHVzZVByb21vQ29kZUZpbHRlcnMsXHJcbiAgdXNlUHJvbW9Db2RlU3RhdHMsXHJcbiAgdXNlUHJvbW9Db2RlU2hhcmluZyxcclxufSBmcm9tICdAL2hvb2tzL3VzZVByb21vQ29kZSc7XHJcbmltcG9ydCB0eXBlIHsgUHJvbW9Db2RlIH0gZnJvbSAnQC90eXBlcyc7XHJcblxyXG4vLyBNb2NrIHRvYXN0XHJcbmplc3QubW9jaygnc29ubmVyJyk7XHJcbmNvbnN0IG1vY2tUb2FzdCA9IHRvYXN0IGFzIGplc3QuTW9ja2VkPHR5cGVvZiB0b2FzdD47XHJcblxyXG4vLyBNb2NrIGZldGNoIGdsb2JhbGx5XHJcbmdsb2JhbC5mZXRjaCA9IGplc3QuZm4oKTtcclxuY29uc3QgbW9ja0ZldGNoID0gZ2xvYmFsLmZldGNoIGFzIGplc3QuTW9ja2VkRnVuY3Rpb248dHlwZW9mIGZldGNoPjtcclxuXHJcbi8vIE1vY2sgbmF2aWdhdG9yIGNsaXBib2FyZFxyXG5PYmplY3QuYXNzaWduKG5hdmlnYXRvciwge1xyXG4gIGNsaXBib2FyZDoge1xyXG4gICAgd3JpdGVUZXh0OiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKSxcclxuICB9LFxyXG59KTtcclxuXHJcbi8vIE1vY2sgUHJvbW9Db2RlIGRhdGFcclxuY29uc3QgbW9ja1Byb21vQ29kZXM6IFByb21vQ29kZVtdID0gW1xyXG4gIHtcclxuICAgIGlkOiAnMScsXHJcbiAgICBjb2RlOiAnU1VNTUVSMjAyNCcsXHJcbiAgICBuYW1lOiAnRGVzY3VlbnRvIGRlIFZlcmFubycsXHJcbiAgICBkZXNjcmlwdGlvbjogJ0Rlc2N1ZW50byBlc3BlY2lhbCBwYXJhIGV2ZW50b3MgZGUgdmVyYW5vJyxcclxuICAgIHR5cGU6ICdQRVJDRU5UQUdFJyxcclxuICAgIHZhbHVlOiAyMCxcclxuICAgIHN0YXR1czogJ0FDVElWRScsXHJcbiAgICB2YWxpZEZyb206ICcyMDI0LTAxLTAxJyxcclxuICAgIHZhbGlkVW50aWw6ICcyMDI0LTEyLTMxJyxcclxuICAgIHVzYWdlTGltaXQ6IDEwMCxcclxuICAgIHVzZWRDb3VudDogMjUsXHJcbiAgICB1c2FnZUxpbWl0UGVyVXNlcjogMSxcclxuICAgIG1pbk9yZGVyQW1vdW50OiAxMDAwMCxcclxuICAgIG1heERpc2NvdW50QW1vdW50OiA1MDAwMCxcclxuICAgIGN1cnJlbmN5OiAnQ0xQJyxcclxuICAgIGNyZWF0ZWRBdDogJzIwMjQtMDEtMDEnLFxyXG4gICAgdXBkYXRlZEF0OiAnMjAyNC0wMS0wMScsXHJcbiAgICBjcmVhdGVkQnk6ICd1c2VyMScsXHJcbiAgICBldmVudElkOiBudWxsLFxyXG4gICAgY2F0ZWdvcnlJZDogbnVsbCxcclxuICAgIHRpY2tldFR5cGVJZDogbnVsbCxcclxuICAgIF9jb3VudDogeyB1c2FnZXM6IDI1IH0sXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJzInLFxyXG4gICAgY29kZTogJ0ZJWEVEMTBLJyxcclxuICAgIG5hbWU6ICdEZXNjdWVudG8gRmlqbycsXHJcbiAgICBkZXNjcmlwdGlvbjogJ0Rlc2N1ZW50byBkZSBtb250byBmaWpvJyxcclxuICAgIHR5cGU6ICdGSVhFRF9BTU9VTlQnLFxyXG4gICAgdmFsdWU6IDEwMDAwLFxyXG4gICAgc3RhdHVzOiAnSU5BQ1RJVkUnLFxyXG4gICAgdmFsaWRGcm9tOiAnMjAyNC0wMS0wMScsXHJcbiAgICB2YWxpZFVudGlsOiAnMjAyNC0wNi0zMCcsXHJcbiAgICB1c2FnZUxpbWl0OiA1MCxcclxuICAgIHVzZWRDb3VudDogNTAsXHJcbiAgICB1c2FnZUxpbWl0UGVyVXNlcjogMixcclxuICAgIG1pbk9yZGVyQW1vdW50OiAyMDAwMCxcclxuICAgIG1heERpc2NvdW50QW1vdW50OiAzMDAwMCxcclxuICAgIGN1cnJlbmN5OiAnQ0xQJyxcclxuICAgIGNyZWF0ZWRBdDogJzIwMjQtMDEtMDEnLFxyXG4gICAgdXBkYXRlZEF0OiAnMjAyNC0wMS0wMScsXHJcbiAgICBjcmVhdGVkQnk6ICd1c2VyMScsXHJcbiAgICBldmVudElkOiAnZXZlbnQxJyxcclxuICAgIGNhdGVnb3J5SWQ6IG51bGwsXHJcbiAgICB0aWNrZXRUeXBlSWQ6IG51bGwsXHJcbiAgICBfY291bnQ6IHsgdXNhZ2VzOiA1MCB9LFxyXG4gIH0sXHJcbl07XHJcblxyXG5kZXNjcmliZSgndXNlUHJvbW9Db2RlTWFuYWdlbWVudCcsICgpID0+IHtcclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xyXG4gICAgbW9ja0ZldGNoLm1vY2tDbGVhcigpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnaW5pY2lhbGl6YSBjb24gY8OzZGlnb3MgcHJvbW9jaW9uYWxlcycsICgpID0+IHtcclxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVByb21vQ29kZU1hbmFnZW1lbnQobW9ja1Byb21vQ29kZXMpKTtcclxuXHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQucHJvbW9Db2RlcykudG9FcXVhbChtb2NrUHJvbW9Db2Rlcyk7XHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQubG9hZGluZ1N0YXRlcykudG9FcXVhbCh7fSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdhY3RpdmEgdW4gY8OzZGlnbyBwcm9tb2Npb25hbCBleGl0b3NhbWVudGUnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcclxuICAgICAgb2s6IHRydWUsXHJcbiAgICAgIGpzb246IGFzeW5jICgpID0+ICh7IHN1Y2Nlc3M6IHRydWUgfSksXHJcbiAgICB9IGFzIFJlc3BvbnNlKTtcclxuXHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VQcm9tb0NvZGVNYW5hZ2VtZW50KG1vY2tQcm9tb0NvZGVzKSk7XHJcblxyXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcclxuICAgICAgYXdhaXQgcmVzdWx0LmN1cnJlbnQudG9nZ2xlUHJvbW9Db2RlU3RhdHVzKG1vY2tQcm9tb0NvZGVzWzFdKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGV4cGVjdChtb2NrRmV0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvYXBpL3Byb21vLWNvZGVzLzIvdG9nZ2xlLXN0YXR1cycsIHtcclxuICAgICAgbWV0aG9kOiAnUEFUQ0gnLFxyXG4gICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBzdGF0dXM6ICdBQ1RJVkUnIH0pLFxyXG4gICAgfSk7XHJcblxyXG4gICAgZXhwZWN0KG1vY2tUb2FzdC5zdWNjZXNzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcclxuICAgICAgJ0PDs2RpZ28gcHJvbW9jaW9uYWwgYWN0aXZhZG8gZXhpdG9zYW1lbnRlJ1xyXG4gICAgKTtcclxuXHJcbiAgICAvLyBWZXJpZmljYXIgcXVlIGVsIGVzdGFkbyBsb2NhbCBzZSBhY3R1YWxpesOzXHJcbiAgICBjb25zdCB1cGRhdGVkUHJvbW9Db2RlID0gcmVzdWx0LmN1cnJlbnQucHJvbW9Db2Rlcy5maW5kKHAgPT4gcC5pZCA9PT0gJzInKTtcclxuICAgIGV4cGVjdCh1cGRhdGVkUHJvbW9Db2RlPy5zdGF0dXMpLnRvQmUoJ0FDVElWRScpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnbWFuZWphIGVycm9yZXMgYWwgY2FtYmlhciBlc3RhZG8nLCBhc3luYyAoKSA9PiB7XHJcbiAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcclxuICAgICAgb2s6IGZhbHNlLFxyXG4gICAgICBqc29uOiBhc3luYyAoKSA9PiAoeyBlcnJvcjogJ0Vycm9yIGRlIHNlcnZpZG9yJyB9KSxcclxuICAgIH0gYXMgUmVzcG9uc2UpO1xyXG5cclxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVByb21vQ29kZU1hbmFnZW1lbnQobW9ja1Byb21vQ29kZXMpKTtcclxuXHJcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xyXG4gICAgICBhd2FpdCByZXN1bHQuY3VycmVudC50b2dnbGVQcm9tb0NvZGVTdGF0dXMobW9ja1Byb21vQ29kZXNbMF0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZXhwZWN0KG1vY2tUb2FzdC5lcnJvcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ0Vycm9yIGRlIHNlcnZpZG9yJyk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdjb3BpYSBjw7NkaWdvIGFsIHBvcnRhcGFwZWxlcycsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVByb21vQ29kZU1hbmFnZW1lbnQobW9ja1Byb21vQ29kZXMpKTtcclxuXHJcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xyXG4gICAgICByZXN1bHQuY3VycmVudC5jb3B5VG9DbGlwYm9hcmQoJ1NVTU1FUjIwMjQnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGV4cGVjdChuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ1NVTU1FUjIwMjQnKTtcclxuICAgIGV4cGVjdChtb2NrVG9hc3Quc3VjY2VzcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ0PDs2RpZ28gY29waWFkbyBhbCBwb3J0YXBhcGVsZXMnKTtcclxuICB9KTtcclxufSk7XHJcblxyXG5kZXNjcmliZSgndXNlUHJvbW9Db2RlRmlsdGVycycsICgpID0+IHtcclxuICBpdCgnZmlsdHJhIGPDs2RpZ29zIHBvciBiw7pzcXVlZGEnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VQcm9tb0NvZGVGaWx0ZXJzKG1vY2tQcm9tb0NvZGVzKSk7XHJcblxyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgcmVzdWx0LmN1cnJlbnQudXBkYXRlRmlsdGVyKCdzZWFyY2gnLCAnU1VNTUVSJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZmlsdGVyZWRQcm9tb0NvZGVzKS50b0hhdmVMZW5ndGgoMSk7XHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZmlsdGVyZWRQcm9tb0NvZGVzWzBdLmNvZGUpLnRvQmUoJ1NVTU1FUjIwMjQnKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ2ZpbHRyYSBjw7NkaWdvcyBwb3IgZXN0YWRvJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlUHJvbW9Db2RlRmlsdGVycyhtb2NrUHJvbW9Db2RlcykpO1xyXG5cclxuICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgIHJlc3VsdC5jdXJyZW50LnVwZGF0ZUZpbHRlcignc3RhdHVzJywgJ0FDVElWRScpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmZpbHRlcmVkUHJvbW9Db2RlcykudG9IYXZlTGVuZ3RoKDEpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmZpbHRlcmVkUHJvbW9Db2Rlc1swXS5zdGF0dXMpLnRvQmUoJ0FDVElWRScpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnY29tYmluYSBtw7psdGlwbGVzIGZpbHRyb3MnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VQcm9tb0NvZGVGaWx0ZXJzKG1vY2tQcm9tb0NvZGVzKSk7XHJcblxyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgcmVzdWx0LmN1cnJlbnQudXBkYXRlRmlsdGVyKCdzdGF0dXMnLCAnSU5BQ1RJVkUnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5maWx0ZXJlZFByb21vQ29kZXMpLnRvSGF2ZUxlbmd0aCgxKTtcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5maWx0ZXJlZFByb21vQ29kZXNbMF0uY29kZSkudG9CZSgnRklYRUQxMEsnKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ2xpbXBpYSBmaWx0cm9zIGNvcnJlY3RhbWVudGUnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VQcm9tb0NvZGVGaWx0ZXJzKG1vY2tQcm9tb0NvZGVzKSk7XHJcblxyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgcmVzdWx0LmN1cnJlbnQudXBkYXRlRmlsdGVyKCdzdGF0dXMnLCAnQUNUSVZFJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZmlsdGVyZWRQcm9tb0NvZGVzKS50b0hhdmVMZW5ndGgoMSk7XHJcblxyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgcmVzdWx0LmN1cnJlbnQuY2xlYXJGaWx0ZXJzKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZmlsdGVyZWRQcm9tb0NvZGVzKS50b0hhdmVMZW5ndGgoMik7XHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZmlsdGVycykudG9FcXVhbCh7IHNlYXJjaDogJycsIHN0YXR1czogJ2FsbCcgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuZGVzY3JpYmUoJ3VzZVByb21vQ29kZVN0YXRzJywgKCkgPT4ge1xyXG4gIGl0KCdjYWxjdWxhIGVzdGFkw61zdGljYXMgY29ycmVjdGFtZW50ZScsICgpID0+IHtcclxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVByb21vQ29kZVN0YXRzKG1vY2tQcm9tb0NvZGVzKSk7XHJcblxyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnRvdGFsKS50b0JlKDIpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmFjdGl2ZSkudG9CZSgxKTtcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pbmFjdGl2ZSkudG9CZSgxKTtcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5leHBpcmVkKS50b0JlKDApO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnVzZWRVcCkudG9CZSgwKTtcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50b3RhbFVzYWdlcykudG9CZSg3NSk7XHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuYWN0aXZlUGVyY2VudGFnZSkudG9CZSg1MCk7XHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudXNhZ2VSYXRlKS50b0JlKDM3LjUpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnY2FsY3VsYSBlc3RhZMOtc3RpY2FzIGNvbiBjw7NkaWdvcyBleHBpcmFkb3MnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBleHBpcmVkUHJvbW9Db2RlczogUHJvbW9Db2RlW10gPSBbXHJcbiAgICAgIC4uLm1vY2tQcm9tb0NvZGVzLFxyXG4gICAgICB7XHJcbiAgICAgICAgLi4ubW9ja1Byb21vQ29kZXNbMF0sXHJcbiAgICAgICAgaWQ6ICczJyxcclxuICAgICAgICBjb2RlOiAnRVhQSVJFRCcsXHJcbiAgICAgICAgc3RhdHVzOiAnRVhQSVJFRCcsXHJcbiAgICAgICAgdmFsaWRVbnRpbDogJzIwMjMtMTItMzEnLFxyXG4gICAgICB9LFxyXG4gICAgXTtcclxuXHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VQcm9tb0NvZGVTdGF0cyhleHBpcmVkUHJvbW9Db2RlcykpO1xyXG5cclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50b3RhbCkudG9CZSgzKTtcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5hY3RpdmUpLnRvQmUoMSk7XHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaW5hY3RpdmUpLnRvQmUoMSk7XHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZXhwaXJlZCkudG9CZSgxKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ21hbmVqYSBjw7NkaWdvcyBzaW4gbMOtbWl0ZSBkZSB1c28nLCAoKSA9PiB7XHJcbiAgICBjb25zdCBjb2Rlc1dpdGhvdXRMaW1pdDogUHJvbW9Db2RlW10gPSBbXHJcbiAgICAgIHtcclxuICAgICAgICAuLi5tb2NrUHJvbW9Db2Rlc1swXSxcclxuICAgICAgICB1c2FnZUxpbWl0OiB1bmRlZmluZWQsXHJcbiAgICAgICAgdXNlZENvdW50OiAxMCxcclxuICAgICAgfSxcclxuICAgIF07XHJcblxyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlUHJvbW9Db2RlU3RhdHMoY29kZXNXaXRob3V0TGltaXQpKTtcclxuXHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudG90YWwpLnRvQmUoMSk7XHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudG90YWxVc2FnZXMpLnRvQmUoMTApO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKCd1c2VQcm9tb0NvZGVTaGFyaW5nJywgKCkgPT4ge1xyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgICAvLyBNb2NrIG5hdmlnYXRvci5zaGFyZVxyXG4gICAgT2JqZWN0LmFzc2lnbihuYXZpZ2F0b3IsIHtcclxuICAgICAgc2hhcmU6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpLFxyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdjb21wYXJ0ZSBjw7NkaWdvIHByb21vY2lvbmFsIGNvbiBXZWIgU2hhcmUgQVBJJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlUHJvbW9Db2RlU2hhcmluZygpKTtcclxuICAgIGNvbnN0IGZvcm1hdERpc2NvdW50ID0gKHR5cGU6IHN0cmluZywgdmFsdWU6IG51bWJlcikgPT4gXHJcbiAgICAgIHR5cGUgPT09ICdQRVJDRU5UQUdFJyA/IGAke3ZhbHVlfSVgIDogYCQke3ZhbHVlfWA7XHJcblxyXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcclxuICAgICAgcmVzdWx0LmN1cnJlbnQuc2hhcmVQcm9tb0NvZGUobW9ja1Byb21vQ29kZXNbMF0sIGZvcm1hdERpc2NvdW50KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGV4cGVjdChuYXZpZ2F0b3Iuc2hhcmUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcclxuICAgICAgdGl0bGU6ICdDw7NkaWdvIHByb21vY2lvbmFsOiBEZXNjdWVudG8gZGUgVmVyYW5vJyxcclxuICAgICAgdGV4dDogJ/CfjqsgwqFEZXNjdWVudG8gZXNwZWNpYWwhIFVzYSBlbCBjw7NkaWdvIFNVTU1FUjIwMjQgeSBvYnTDqW4gMjAlIGVuIHR1IHByw7N4aW1hIGNvbXByYS4nLFxyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdjb3BpYSBhbCBwb3J0YXBhcGVsZXMgY3VhbmRvIG5vIGhheSBXZWIgU2hhcmUgQVBJJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgLy8gU2ltdWxhciBxdWUgbm8gaGF5IFdlYiBTaGFyZSBBUElcclxuICAgIE9iamVjdC5hc3NpZ24obmF2aWdhdG9yLCB7IHNoYXJlOiB1bmRlZmluZWQgfSk7XHJcblxyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlUHJvbW9Db2RlU2hhcmluZygpKTtcclxuICAgIGNvbnN0IGZvcm1hdERpc2NvdW50ID0gKHR5cGU6IHN0cmluZywgdmFsdWU6IG51bWJlcikgPT4gXHJcbiAgICAgIHR5cGUgPT09ICdQRVJDRU5UQUdFJyA/IGAke3ZhbHVlfSVgIDogYCQke3ZhbHVlfWA7XHJcblxyXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcclxuICAgICAgcmVzdWx0LmN1cnJlbnQuc2hhcmVQcm9tb0NvZGUobW9ja1Byb21vQ29kZXNbMF0sIGZvcm1hdERpc2NvdW50KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGV4cGVjdChuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXHJcbiAgICAgICfwn46rIMKhRGVzY3VlbnRvIGVzcGVjaWFsISBVc2EgZWwgY8OzZGlnbyBTVU1NRVIyMDI0IHkgb2J0w6luIDIwJSBlbiB0dSBwcsOzeGltYSBjb21wcmEuJ1xyXG4gICAgKTtcclxuICAgIGV4cGVjdChtb2NrVG9hc3Quc3VjY2VzcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXHJcbiAgICAgICdUZXh0byBkZSBwcm9tb2Npw7NuIGNvcGlhZG8gYWwgcG9ydGFwYXBlbGVzJ1xyXG4gICAgKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ2V4cG9ydGEgY8OzZGlnb3MgcHJvbW9jaW9uYWxlcyBhIENTVicsICgpID0+IHtcclxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVByb21vQ29kZVNoYXJpbmcoKSk7XHJcblxyXG4gICAgLy8gTW9jayBwYXJhIGNyZWFyIHkgaGFjZXIgY2xpY2sgZW4gbGluayBkZSBkZXNjYXJnYVxyXG4gICAgY29uc3QgbW9ja0xpbmsgPSB7XHJcbiAgICAgIHNldEF0dHJpYnV0ZTogamVzdC5mbigpLFxyXG4gICAgICBjbGljazogamVzdC5mbigpLFxyXG4gICAgICBzdHlsZTogeyB2aXNpYmlsaXR5OiAnJyB9LFxyXG4gICAgfTtcclxuICAgIGNvbnN0IG1vY2tDcmVhdGVFbGVtZW50ID0gamVzdC5zcHlPbihkb2N1bWVudCwgJ2NyZWF0ZUVsZW1lbnQnKS5tb2NrUmV0dXJuVmFsdWUobW9ja0xpbmsgYXMgdW5rbm93biBhcyBIVE1MQW5jaG9yRWxlbWVudCk7XHJcbiAgICBjb25zdCBtb2NrQXBwZW5kQ2hpbGQgPSBqZXN0LnNweU9uKGRvY3VtZW50LmJvZHksICdhcHBlbmRDaGlsZCcpLm1vY2tJbXBsZW1lbnRhdGlvbigpO1xyXG4gICAgY29uc3QgbW9ja1JlbW92ZUNoaWxkID0gamVzdC5zcHlPbihkb2N1bWVudC5ib2R5LCAncmVtb3ZlQ2hpbGQnKS5tb2NrSW1wbGVtZW50YXRpb24oKTtcclxuICAgIGNvbnN0IG1vY2tDcmVhdGVPYmplY3RVUkwgPSBqZXN0LnNweU9uKFVSTCwgJ2NyZWF0ZU9iamVjdFVSTCcpLm1vY2tSZXR1cm5WYWx1ZSgnYmxvYjptb2NrLXVybCcpO1xyXG5cclxuICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgIHJlc3VsdC5jdXJyZW50LmV4cG9ydFByb21vQ29kZXMobW9ja1Byb21vQ29kZXMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZXhwZWN0KG1vY2tDcmVhdGVFbGVtZW50KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnYScpO1xyXG4gICAgZXhwZWN0KG1vY2tUb2FzdC5zdWNjZXNzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcclxuICAgICAgJ0PDs2RpZ29zIHByb21vY2lvbmFsZXMgZXhwb3J0YWRvcyBleGl0b3NhbWVudGUnXHJcbiAgICApO1xyXG5cclxuICAgIC8vIExpbXBpYXIgbW9ja3NcclxuICAgIG1vY2tDcmVhdGVFbGVtZW50Lm1vY2tSZXN0b3JlKCk7XHJcbiAgICBtb2NrQXBwZW5kQ2hpbGQubW9ja1Jlc3RvcmUoKTtcclxuICAgIG1vY2tSZW1vdmVDaGlsZC5tb2NrUmVzdG9yZSgpO1xyXG4gICAgbW9ja0NyZWF0ZU9iamVjdFVSTC5tb2NrUmVzdG9yZSgpO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sInZlcnNpb24iOjN9