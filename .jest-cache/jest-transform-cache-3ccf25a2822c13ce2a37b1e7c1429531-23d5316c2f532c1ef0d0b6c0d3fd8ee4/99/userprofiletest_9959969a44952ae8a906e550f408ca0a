057de3409b14efcb10cfa3feb6133c5b
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('@clerk/nextjs/server', () => ({ auth: jest.fn() }));
jest.mock('../../lib/auth', () => ({ getCurrentUser: jest.fn() }));
jest.mock('../../lib/redis', () => ({
    CacheService: {
        getInstance: () => ({ getUserFullData: jest.fn(), setUserBatch: jest.fn() })
    }
}));
const route_1 = require("../../../src/app/api/user/profile/route");
const server_1 = require("@clerk/nextjs/server");
const auth_1 = require("../../lib/auth");
describe('GET /api/user/profile', () => {
    beforeEach(() => jest.clearAllMocks());
    it('returns 401 when not authenticated', async () => {
        ;
        server_1.auth.mockResolvedValue({ userId: null });
        const res = await (0, route_1.GET)();
        expect(res.status).toBe(401);
    });
    it('returns cached user when present', async () => {
        ;
        server_1.auth.mockResolvedValue({ userId: 'clerk_1' });
        const cache = (await Promise.resolve().then(() => __importStar(require('../../lib/redis')))).CacheService.getInstance();
        cache.getUserFullData.mockResolvedValue({ id: 'u1', email: 'a@a.com', role: 'USER' });
        const res = await (0, route_1.GET)();
        const json = await res.json();
        expect(json.user).toBeDefined();
        expect(json.user.email).toBe('a@a.com');
    });
    it('falls back to getCurrentUser and caches result', async () => {
        ;
        server_1.auth.mockResolvedValue({ userId: 'clerk_2' });
        const cache = (await Promise.resolve().then(() => __importStar(require('../../lib/redis')))).CacheService.getInstance();
        cache.getUserFullData.mockResolvedValue(null);
        auth_1.getCurrentUser.mockResolvedValue({ id: 'u2', email: 'b@b.com', clerkId: 'clerk_2', role: 'USER' });
        const res = await (0, route_1.GET)();
        const json = await res.json();
        expect(json.user).toBeDefined();
        expect(cache.setUserBatch).toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxCaWx1clxcRG9jdW1lbnRzXFxEZXZlbG9wbWVudFxcTmV4dFxcc29yeWNrLWFjY2Vzc1xcc3JjXFxfX3Rlc3RzX19cXGFwaVxcdXNlci5wcm9maWxlLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQzlELElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDbEUsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLFlBQVksRUFBRTtRQUNaLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsZUFBZSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7S0FDN0U7Q0FDRixDQUFDLENBQUMsQ0FBQTtBQUVILG1FQUE2RDtBQUM3RCxpREFBMkM7QUFDM0MseUNBQStDO0FBRS9DLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7SUFDckMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFBO0lBRXRDLEVBQUUsQ0FBQyxvQ0FBb0MsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNsRCxDQUFDO1FBQUMsYUFBNkIsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO1FBQ25FLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBQSxXQUFHLEdBQUUsQ0FBQTtRQUN2QixNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUM5QixDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyxrQ0FBa0MsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNoRCxDQUFDO1FBQUMsYUFBNkIsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFBO1FBQ3hFLE1BQU0sS0FBSyxHQUFHLENBQUMsd0RBQWEsaUJBQWlCLEdBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FDekU7UUFBQyxLQUFLLENBQUMsZUFBNkIsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQTtRQUVyRyxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUEsV0FBRyxHQUFFLENBQUE7UUFDdkIsTUFBTSxJQUFJLEdBQUcsTUFBTSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDN0IsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtRQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDekMsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsZ0RBQWdELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDOUQsQ0FBQztRQUFDLGFBQTZCLENBQUMsaUJBQWlCLENBQUMsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQTtRQUN4RSxNQUFNLEtBQUssR0FBRyxDQUFDLHdEQUFhLGlCQUFpQixHQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQ3pFO1FBQUMsS0FBSyxDQUFDLGVBQTZCLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQzVEO1FBQUMscUJBQXVDLENBQUMsaUJBQWlCLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQTtRQUU3SCxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUEsV0FBRyxHQUFFLENBQUE7UUFDdkIsTUFBTSxJQUFJLEdBQUcsTUFBTSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDN0IsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtRQUMvQixNQUFNLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUE7SUFDL0MsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXEJpbHVyXFxEb2N1bWVudHNcXERldmVsb3BtZW50XFxOZXh0XFxzb3J5Y2stYWNjZXNzXFxzcmNcXF9fdGVzdHNfX1xcYXBpXFx1c2VyLnByb2ZpbGUudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJqZXN0Lm1vY2soJ0BjbGVyay9uZXh0anMvc2VydmVyJywgKCkgPT4gKHsgYXV0aDogamVzdC5mbigpIH0pKVxyXG5qZXN0Lm1vY2soJy4uLy4uL2xpYi9hdXRoJywgKCkgPT4gKHsgZ2V0Q3VycmVudFVzZXI6IGplc3QuZm4oKSB9KSlcclxuamVzdC5tb2NrKCcuLi8uLi9saWIvcmVkaXMnLCAoKSA9PiAoe1xyXG4gIENhY2hlU2VydmljZToge1xyXG4gICAgZ2V0SW5zdGFuY2U6ICgpID0+ICh7IGdldFVzZXJGdWxsRGF0YTogamVzdC5mbigpLCBzZXRVc2VyQmF0Y2g6IGplc3QuZm4oKSB9KVxyXG4gIH1cclxufSkpXHJcblxyXG5pbXBvcnQgeyBHRVQgfSBmcm9tICcuLi8uLi8uLi9zcmMvYXBwL2FwaS91c2VyL3Byb2ZpbGUvcm91dGUnXHJcbmltcG9ydCB7IGF1dGggfSBmcm9tICdAY2xlcmsvbmV4dGpzL3NlcnZlcidcclxuaW1wb3J0IHsgZ2V0Q3VycmVudFVzZXIgfSBmcm9tICcuLi8uLi9saWIvYXV0aCdcclxuXHJcbmRlc2NyaWJlKCdHRVQgL2FwaS91c2VyL3Byb2ZpbGUnLCAoKSA9PiB7XHJcbiAgYmVmb3JlRWFjaCgoKSA9PiBqZXN0LmNsZWFyQWxsTW9ja3MoKSlcclxuXHJcbiAgaXQoJ3JldHVybnMgNDAxIHdoZW4gbm90IGF1dGhlbnRpY2F0ZWQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICA7KGF1dGggYXMgdW5rbm93biBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHsgdXNlcklkOiBudWxsIH0pXHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCBHRVQoKVxyXG4gICAgZXhwZWN0KHJlcy5zdGF0dXMpLnRvQmUoNDAxKVxyXG4gIH0pXHJcblxyXG4gIGl0KCdyZXR1cm5zIGNhY2hlZCB1c2VyIHdoZW4gcHJlc2VudCcsIGFzeW5jICgpID0+IHtcclxuICAgIDsoYXV0aCBhcyB1bmtub3duIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoeyB1c2VySWQ6ICdjbGVya18xJyB9KVxyXG4gICAgY29uc3QgY2FjaGUgPSAoYXdhaXQgaW1wb3J0KCcuLi8uLi9saWIvcmVkaXMnKSkuQ2FjaGVTZXJ2aWNlLmdldEluc3RhbmNlKClcclxuICAgIDsoY2FjaGUuZ2V0VXNlckZ1bGxEYXRhIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoeyBpZDogJ3UxJywgZW1haWw6ICdhQGEuY29tJywgcm9sZTogJ1VTRVInIH0pXHJcblxyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgR0VUKClcclxuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpXHJcbiAgICBleHBlY3QoanNvbi51c2VyKS50b0JlRGVmaW5lZCgpXHJcbiAgICBleHBlY3QoanNvbi51c2VyLmVtYWlsKS50b0JlKCdhQGEuY29tJylcclxuICB9KVxyXG5cclxuICBpdCgnZmFsbHMgYmFjayB0byBnZXRDdXJyZW50VXNlciBhbmQgY2FjaGVzIHJlc3VsdCcsIGFzeW5jICgpID0+IHtcclxuICAgIDsoYXV0aCBhcyB1bmtub3duIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoeyB1c2VySWQ6ICdjbGVya18yJyB9KVxyXG4gICAgY29uc3QgY2FjaGUgPSAoYXdhaXQgaW1wb3J0KCcuLi8uLi9saWIvcmVkaXMnKSkuQ2FjaGVTZXJ2aWNlLmdldEluc3RhbmNlKClcclxuICAgIDsoY2FjaGUuZ2V0VXNlckZ1bGxEYXRhIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUobnVsbClcclxuICAgIDsoZ2V0Q3VycmVudFVzZXIgYXMgdW5rbm93biBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHsgaWQ6ICd1MicsIGVtYWlsOiAnYkBiLmNvbScsIGNsZXJrSWQ6ICdjbGVya18yJywgcm9sZTogJ1VTRVInIH0pXHJcblxyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgR0VUKClcclxuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpXHJcbiAgICBleHBlY3QoanNvbi51c2VyKS50b0JlRGVmaW5lZCgpXHJcbiAgICBleHBlY3QoY2FjaGUuc2V0VXNlckJhdGNoKS50b0hhdmVCZWVuQ2FsbGVkKClcclxuICB9KVxyXG59KVxyXG4iXSwidmVyc2lvbiI6M30=