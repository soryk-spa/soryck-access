7405a82063d38280fc06937198820d89
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Mock de Sonner Toast
jest.mock('sonner', () => ({
    toast: {
        error: jest.fn(),
        success: jest.fn(),
        warning: jest.fn(),
    },
}));
/**
 * Tests para el componente CourtesyInvitationsManagement
 * @file components/courtesy-invitations-management.tsx
 */
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const sonner_1 = require("sonner");
const courtesy_invitations_management_1 = __importDefault(require("../../components/courtesy-invitations-management"));
// Mock de fetch global
const mockFetch = jest.fn();
global.fetch = mockFetch;
// Mock de window.URL.createObjectURL para exportar
Object.defineProperty(window, 'URL', {
    value: {
        createObjectURL: jest.fn(() => 'mock-url'),
        revokeObjectURL: jest.fn(),
    },
});
// Mock de createElement para link de descarga
const mockCreateElement = jest.fn();
const mockClick = jest.fn();
const mockRemove = jest.fn();
Object.defineProperty(document, 'createElement', {
    value: mockCreateElement.mockReturnValue({
        href: '',
        download: '',
        style: { display: '' },
        click: mockClick,
        remove: mockRemove,
    }),
});
Object.defineProperty(document.body, 'appendChild', {
    value: jest.fn(),
});
describe('CourtesyInvitationsManagement', () => {
    const mockProps = {
        eventId: 'event-123',
        eventTitle: 'Test Event',
    };
    const mockInvitations = [
        {
            id: 'inv-1',
            invitedEmail: 'test1@example.com',
            invitedName: 'Test User 1',
            status: 'PENDING',
            invitationCode: 'code123',
            expiresAt: '2025-12-31T23:59:59Z',
            createdAt: '2025-09-01T10:00:00Z',
            ticket: null,
            creator: {
                firstName: 'John',
                lastName: 'Doe',
                email: 'john@test.com',
            },
        },
        {
            id: 'inv-2',
            invitedEmail: 'test2@example.com',
            invitedName: 'Test User 2',
            status: 'SENT',
            invitationCode: 'code456',
            expiresAt: '2025-12-31T23:59:59Z',
            createdAt: '2025-09-01T11:00:00Z',
            ticket: {
                id: 'ticket-1',
                qrCode: 'QR123',
                isUsed: false,
                usedAt: null,
            },
            creator: {
                firstName: 'John',
                lastName: 'Doe',
                email: 'john@test.com',
            },
        },
    ];
    beforeEach(() => {
        jest.clearAllMocks();
        mockFetch.mockClear();
    });
    describe('Renderizado inicial', () => {
        it('debería renderizar el título y elementos principales', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({
                    event: { id: 'event-123', title: 'Test Event' },
                    invitations: [],
                }),
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(courtesy_invitations_management_1.default, Object.assign({}, mockProps)));
            expect(react_2.screen.getByText('Invitaciones de Cortesía')).toBeInTheDocument();
            expect(react_2.screen.getByText('Agregar Invitación Individual')).toBeInTheDocument();
            expect(react_2.screen.getByText('Invitación Masiva')).toBeInTheDocument();
            await (0, react_2.waitFor)(() => {
                expect(mockFetch).toHaveBeenCalledWith(`/api/events/${mockProps.eventId}/invitations`);
            });
        });
        it('debería mostrar la tabla de invitaciones cuando hay datos', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({
                    event: { id: 'event-123', title: 'Test Event' },
                    invitations: mockInvitations,
                }),
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(courtesy_invitations_management_1.default, Object.assign({}, mockProps)));
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.getByText('test1@example.com')).toBeInTheDocument();
                expect(react_2.screen.getByText('Test User 1')).toBeInTheDocument();
                expect(react_2.screen.getByText('test2@example.com')).toBeInTheDocument();
                expect(react_2.screen.getByText('Test User 2')).toBeInTheDocument();
            });
            expect(react_2.screen.getByText('PENDING')).toBeInTheDocument();
            expect(react_2.screen.getByText('SENT')).toBeInTheDocument();
        });
        it('debería manejar errores al cargar invitaciones', async () => {
            mockFetch.mockRejectedValueOnce(new Error('Network error'));
            (0, react_2.render)((0, jsx_runtime_1.jsx)(courtesy_invitations_management_1.default, Object.assign({}, mockProps)));
            await (0, react_2.waitFor)(() => {
                expect(sonner_1.toast.error).toHaveBeenCalledWith('Error al cargar las invitaciones');
            });
        });
    });
    describe('Invitación individual', () => {
        beforeEach(() => {
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({
                    event: { id: 'event-123', title: 'Test Event' },
                    invitations: [],
                }),
            });
        });
        it('debería agregar una invitación individual exitosamente', async () => {
            // Mock respuesta exitosa para crear invitación
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({
                    message: '1 invitación(es) creada(s) exitosamente',
                    invitations: [mockInvitations[0]],
                }),
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(courtesy_invitations_management_1.default, Object.assign({}, mockProps)));
            // Esperar a que cargue
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.getByLabelText('Email *')).toBeInTheDocument();
            });
            // Llenar formulario
            const emailInput = react_2.screen.getByLabelText('Email *');
            const nameInput = react_2.screen.getByLabelText('Nombre (opcional)');
            react_2.fireEvent.change(emailInput, { target: { value: 'new@example.com' } });
            react_2.fireEvent.change(nameInput, { target: { value: 'New User' } });
            // Enviar
            react_2.fireEvent.click(react_2.screen.getByRole('button', { name: 'Agregar Invitación' }));
            await (0, react_2.waitFor)(() => {
                expect(mockFetch).toHaveBeenLastCalledWith(`/api/events/${mockProps.eventId}/invitations`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        invitedEmail: 'new@example.com',
                        invitedName: 'New User',
                    }),
                });
                expect(sonner_1.toast.success).toHaveBeenCalledWith('Invitación creada exitosamente');
            });
        });
        it('debería validar email requerido', async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(courtesy_invitations_management_1.default, Object.assign({}, mockProps)));
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.getByLabelText('Email *')).toBeInTheDocument();
            });
            // Intentar enviar sin email
            react_2.fireEvent.click(react_2.screen.getByRole('button', { name: 'Agregar Invitación' }));
            expect(sonner_1.toast.error).toHaveBeenCalledWith('El email es requerido');
            expect(mockFetch).toHaveBeenCalledTimes(1); // Solo la carga inicial
        });
        it('debería manejar errores al crear invitación individual', async () => {
            // Mock error en creación
            mockFetch.mockResolvedValueOnce({
                ok: false,
                json: async () => ({ error: 'Email ya existe' }),
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(courtesy_invitations_management_1.default, Object.assign({}, mockProps)));
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.getByLabelText('Email *')).toBeInTheDocument();
            });
            const emailInput = react_2.screen.getByLabelText('Email *');
            react_2.fireEvent.change(emailInput, { target: { value: 'existing@example.com' } });
            react_2.fireEvent.click(react_2.screen.getByRole('button', { name: 'Agregar Invitación' }));
            await (0, react_2.waitFor)(() => {
                expect(sonner_1.toast.error).toHaveBeenCalledWith('Email ya existe');
            });
        });
    });
    describe('Invitaciones masivas', () => {
        beforeEach(() => {
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({
                    event: { id: 'event-123', title: 'Test Event' },
                    invitations: [],
                }),
            });
        });
        it('debería abrir el modal de invitaciones masivas', async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(courtesy_invitations_management_1.default, Object.assign({}, mockProps)));
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.getByText('Invitación Masiva')).toBeInTheDocument();
            });
            react_2.fireEvent.click(react_2.screen.getByRole('button', { name: /Invitación Masiva/i }));
            expect(react_2.screen.getByText('Agrega múltiples emails separados por líneas')).toBeInTheDocument();
            expect(react_2.screen.getByPlaceholderText(/usuario1@ejemplo.com/)).toBeInTheDocument();
        });
        it('debería validar que se agregue al menos un email', async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(courtesy_invitations_management_1.default, Object.assign({}, mockProps)));
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.getByText('Invitación Masiva')).toBeInTheDocument();
            });
            react_2.fireEvent.click(react_2.screen.getByRole('button', { name: /Invitación Masiva/i }));
            react_2.fireEvent.click(react_2.screen.getByRole('button', { name: 'Crear Invitaciones' }));
            expect(sonner_1.toast.error).toHaveBeenCalledWith('Debes agregar al menos un email');
        });
        it('debería procesar invitaciones masivas exitosamente', async () => {
            // Mock respuesta exitosa para invitaciones masivas
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({
                    created: [mockInvitations[0], mockInvitations[1]],
                    errors: [],
                }),
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(courtesy_invitations_management_1.default, Object.assign({}, mockProps)));
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.getByText('Invitación Masiva')).toBeInTheDocument();
            });
            // Abrir modal
            react_2.fireEvent.click(react_2.screen.getByRole('button', { name: /Invitación Masiva/i }));
            // Llenar textarea con múltiples emails
            const textarea = react_2.screen.getByPlaceholderText(/usuario1@ejemplo.com/);
            react_2.fireEvent.change(textarea, {
                target: { value: 'user1@test.com, User One\nuser2@test.com, User Two\nuser3@test.com' }
            });
            // Enviar
            react_2.fireEvent.click(react_2.screen.getByRole('button', { name: 'Crear Invitaciones' }));
            await (0, react_2.waitFor)(() => {
                expect(mockFetch).toHaveBeenLastCalledWith(`/api/events/${mockProps.eventId}/invitations`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        invitations: [
                            { email: 'user1@test.com', name: 'User One' },
                            { email: 'user2@test.com', name: 'User Two' },
                            { email: 'user3@test.com', name: undefined },
                        ],
                    }),
                });
                expect(sonner_1.toast.success).toHaveBeenCalledWith('2 invitaciones creadas exitosamente');
            });
        });
    });
    describe('Exportar invitaciones', () => {
        it('debería exportar invitaciones a CSV', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({
                    event: { id: 'event-123', title: 'Test Event' },
                    invitations: mockInvitations,
                }),
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(courtesy_invitations_management_1.default, Object.assign({}, mockProps)));
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.getByText('test1@example.com')).toBeInTheDocument();
            });
            react_2.fireEvent.click(react_2.screen.getByRole('button', { name: /Exportar/i }));
            expect(mockCreateElement).toHaveBeenCalledWith('a');
            expect(mockClick).toHaveBeenCalled();
            expect(mockRemove).toHaveBeenCalled();
        });
        it('debería mostrar mensaje cuando no hay invitaciones para exportar', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({
                    event: { id: 'event-123', title: 'Test Event' },
                    invitations: [],
                }),
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(courtesy_invitations_management_1.default, Object.assign({}, mockProps)));
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.getByRole('button', { name: /Exportar/i })).toBeInTheDocument();
            });
            react_2.fireEvent.click(react_2.screen.getByRole('button', { name: /Exportar/i }));
            expect(sonner_1.toast.error).toHaveBeenCalledWith('No hay invitaciones para exportar');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,