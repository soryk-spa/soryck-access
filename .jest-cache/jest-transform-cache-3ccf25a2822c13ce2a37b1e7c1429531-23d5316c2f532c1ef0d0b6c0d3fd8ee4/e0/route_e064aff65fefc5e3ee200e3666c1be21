3324efd10065eb2fe14bc76624621199
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GET = GET;
const server_1 = require("next/server");
const qr_1 = require("@/lib/qr");
const qrcode_1 = __importDefault(require("qrcode"));
async function GET(request, { params }) {
    try {
        const { code } = await params;
        console.log(`[QR API] Solicitud para código: ${code}`);
        if (!(0, qr_1.validateQRCode)(code)) {
            console.error('[QR API] Formato de código QR inválido:', code);
            return new server_1.NextResponse('Invalid QR code format', { status: 400 });
        }
        const verificationUrl = `${process.env.NEXT_PUBLIC_APP_URL}/verify/${code}`;
        console.log(`[QR API] Generando QR para: ${verificationUrl}`);
        const qrBuffer = await qrcode_1.default.toBuffer(verificationUrl, {
            errorCorrectionLevel: 'H',
            type: 'png',
            margin: 1,
            color: {
                dark: '#000000',
                light: '#FFFFFF'
            },
            width: 200,
            scale: 8
        });
        console.log(`[QR API] ✅ QR generado exitosamente, tamaño: ${qrBuffer.length} bytes`);
        const uint8Array = new Uint8Array(qrBuffer);
        return new server_1.NextResponse(uint8Array, {
            status: 200,
            headers: {
                'Content-Type': 'image/png',
                'Cache-Control': 'public, max-age=31536000, immutable',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Content-Length': qrBuffer.length.toString(),
                'X-Content-Type-Options': 'nosniff',
            },
        });
    }
    catch (error) {
        console.error('[QR API] ❌ Error generando código QR:', error);
        return new server_1.NextResponse('Error generating QR code', {
            status: 500,
            headers: {
                'Content-Type': 'text/plain',
            }
        });
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxCaWx1clxcRG9jdW1lbnRzXFxEZXZlbG9wbWVudFxcTmV4dFxcc29yeWNrLWFjY2Vzc1xcc3JjXFxhcHBcXGFwaVxccXJcXFtjb2RlXVxccm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFJQSxrQkEwREM7QUE5REQsd0NBQXVEO0FBQ3ZELGlDQUF5QztBQUN6QyxvREFBMkI7QUFFcEIsS0FBSyxVQUFVLEdBQUcsQ0FDdkIsT0FBb0IsRUFDcEIsRUFBRSxNQUFNLEVBQXlDO0lBRWpELElBQUksQ0FBQztRQUNILE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLE1BQU0sQ0FBQTtRQUU3QixPQUFPLENBQUMsR0FBRyxDQUFDLG1DQUFtQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO1FBR3RELElBQUksQ0FBQyxJQUFBLG1CQUFjLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUMxQixPQUFPLENBQUMsS0FBSyxDQUFDLHlDQUF5QyxFQUFFLElBQUksQ0FBQyxDQUFBO1lBQzlELE9BQU8sSUFBSSxxQkFBWSxDQUFDLHdCQUF3QixFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUE7UUFDcEUsQ0FBQztRQUdELE1BQU0sZUFBZSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsV0FBVyxJQUFJLEVBQUUsQ0FBQTtRQUUzRSxPQUFPLENBQUMsR0FBRyxDQUFDLCtCQUErQixlQUFlLEVBQUUsQ0FBQyxDQUFBO1FBRzdELE1BQU0sUUFBUSxHQUFHLE1BQU0sZ0JBQU0sQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFO1lBQ3RELG9CQUFvQixFQUFFLEdBQUc7WUFDekIsSUFBSSxFQUFFLEtBQUs7WUFDWCxNQUFNLEVBQUUsQ0FBQztZQUNULEtBQUssRUFBRTtnQkFDTCxJQUFJLEVBQUUsU0FBUztnQkFDZixLQUFLLEVBQUUsU0FBUzthQUNqQjtZQUNELEtBQUssRUFBRSxHQUFHO1lBQ1YsS0FBSyxFQUFFLENBQUM7U0FDVCxDQUFDLENBQUE7UUFFRixPQUFPLENBQUMsR0FBRyxDQUFDLGdEQUFnRCxRQUFRLENBQUMsTUFBTSxRQUFRLENBQUMsQ0FBQTtRQUVwRixNQUFNLFVBQVUsR0FBRyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUUzQyxPQUFPLElBQUkscUJBQVksQ0FBQyxVQUFVLEVBQUU7WUFDbEMsTUFBTSxFQUFFLEdBQUc7WUFDWCxPQUFPLEVBQUU7Z0JBQ1AsY0FBYyxFQUFFLFdBQVc7Z0JBQzNCLGVBQWUsRUFBRSxxQ0FBcUM7Z0JBQ3RELDZCQUE2QixFQUFFLEdBQUc7Z0JBQ2xDLDhCQUE4QixFQUFFLEtBQUs7Z0JBQ3JDLDhCQUE4QixFQUFFLGNBQWM7Z0JBQzlDLGdCQUFnQixFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO2dCQUM1Qyx3QkFBd0IsRUFBRSxTQUFTO2FBQ3BDO1NBQ0YsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLHVDQUF1QyxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQzdELE9BQU8sSUFBSSxxQkFBWSxDQUFDLDBCQUEwQixFQUFFO1lBQ2xELE1BQU0sRUFBRSxHQUFHO1lBQ1gsT0FBTyxFQUFFO2dCQUNQLGNBQWMsRUFBRSxZQUFZO2FBQzdCO1NBQ0YsQ0FBQyxDQUFBO0lBQ0osQ0FBQztBQUNILENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxCaWx1clxcRG9jdW1lbnRzXFxEZXZlbG9wbWVudFxcTmV4dFxcc29yeWNrLWFjY2Vzc1xcc3JjXFxhcHBcXGFwaVxccXJcXFtjb2RlXVxccm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJ1xyXG5pbXBvcnQgeyB2YWxpZGF0ZVFSQ29kZSB9IGZyb20gJ0AvbGliL3FyJ1xyXG5pbXBvcnQgUVJDb2RlIGZyb20gJ3FyY29kZSdcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQoXHJcbiAgcmVxdWVzdDogTmV4dFJlcXVlc3QsXHJcbiAgeyBwYXJhbXMgfTogeyBwYXJhbXM6IFByb21pc2U8eyBjb2RlOiBzdHJpbmcgfT4gfVxyXG4pIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgeyBjb2RlIH0gPSBhd2FpdCBwYXJhbXNcclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coYFtRUiBBUEldIFNvbGljaXR1ZCBwYXJhIGPDs2RpZ286ICR7Y29kZX1gKVxyXG4gICAgXHJcbiAgICBcclxuICAgIGlmICghdmFsaWRhdGVRUkNvZGUoY29kZSkpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignW1FSIEFQSV0gRm9ybWF0byBkZSBjw7NkaWdvIFFSIGludsOhbGlkbzonLCBjb2RlKVxyXG4gICAgICByZXR1cm4gbmV3IE5leHRSZXNwb25zZSgnSW52YWxpZCBRUiBjb2RlIGZvcm1hdCcsIHsgc3RhdHVzOiA0MDAgfSlcclxuICAgIH1cclxuXHJcbiAgICBcclxuICAgIGNvbnN0IHZlcmlmaWNhdGlvblVybCA9IGAke3Byb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQUF9VUkx9L3ZlcmlmeS8ke2NvZGV9YFxyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZyhgW1FSIEFQSV0gR2VuZXJhbmRvIFFSIHBhcmE6ICR7dmVyaWZpY2F0aW9uVXJsfWApXHJcbiAgICBcclxuICAgIFxyXG4gICAgY29uc3QgcXJCdWZmZXIgPSBhd2FpdCBRUkNvZGUudG9CdWZmZXIodmVyaWZpY2F0aW9uVXJsLCB7XHJcbiAgICAgIGVycm9yQ29ycmVjdGlvbkxldmVsOiAnSCcsIFxyXG4gICAgICB0eXBlOiAncG5nJyxcclxuICAgICAgbWFyZ2luOiAxLCBcclxuICAgICAgY29sb3I6IHtcclxuICAgICAgICBkYXJrOiAnIzAwMDAwMCcsXHJcbiAgICAgICAgbGlnaHQ6ICcjRkZGRkZGJ1xyXG4gICAgICB9LFxyXG4gICAgICB3aWR0aDogMjAwLCBcclxuICAgICAgc2NhbGU6IDggXHJcbiAgICB9KVxyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZyhgW1FSIEFQSV0g4pyFIFFSIGdlbmVyYWRvIGV4aXRvc2FtZW50ZSwgdGFtYcOxbzogJHtxckJ1ZmZlci5sZW5ndGh9IGJ5dGVzYClcclxuICAgIFxyXG4gICAgY29uc3QgdWludDhBcnJheSA9IG5ldyBVaW50OEFycmF5KHFyQnVmZmVyKVxyXG4gICAgXHJcbiAgICByZXR1cm4gbmV3IE5leHRSZXNwb25zZSh1aW50OEFycmF5LCB7XHJcbiAgICAgIHN0YXR1czogMjAwLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdpbWFnZS9wbmcnLFxyXG4gICAgICAgICdDYWNoZS1Db250cm9sJzogJ3B1YmxpYywgbWF4LWFnZT0zMTUzNjAwMCwgaW1tdXRhYmxlJywgXHJcbiAgICAgICAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbic6ICcqJyxcclxuICAgICAgICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kcyc6ICdHRVQnLFxyXG4gICAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzJzogJ0NvbnRlbnQtVHlwZScsXHJcbiAgICAgICAgJ0NvbnRlbnQtTGVuZ3RoJzogcXJCdWZmZXIubGVuZ3RoLnRvU3RyaW5nKCksXHJcbiAgICAgICAgJ1gtQ29udGVudC1UeXBlLU9wdGlvbnMnOiAnbm9zbmlmZicsXHJcbiAgICAgIH0sXHJcbiAgICB9KVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdbUVIgQVBJXSDinYwgRXJyb3IgZ2VuZXJhbmRvIGPDs2RpZ28gUVI6JywgZXJyb3IpXHJcbiAgICByZXR1cm4gbmV3IE5leHRSZXNwb25zZSgnRXJyb3IgZ2VuZXJhdGluZyBRUiBjb2RlJywgeyBcclxuICAgICAgc3RhdHVzOiA1MDAsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ3RleHQvcGxhaW4nLFxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxufSJdLCJ2ZXJzaW9uIjozfQ==