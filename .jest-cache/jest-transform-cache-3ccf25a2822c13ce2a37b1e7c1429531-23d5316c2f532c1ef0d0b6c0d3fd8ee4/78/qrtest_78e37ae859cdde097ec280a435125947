84beb8d1b0f652d2ddf2ccb6105e3aff
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// Provide a mock NextResponse that can be constructed (used by the QR route)
jest.mock('next/server', () => {
    class NextResponse {
        constructor(body, opts) {
            this.status = (opts === null || opts === void 0 ? void 0 : opts.status) || 200;
            this.body = body;
            this.headers = (opts === null || opts === void 0 ? void 0 : opts.headers) || {};
        }
        static json(body, opts) {
            return { status: (opts === null || opts === void 0 ? void 0 : opts.status) || 200, body };
        }
    }
    return { NextResponse };
});
jest.mock('qrcode', () => ({ toBuffer: (...args) => mockToBuffer(...args) }));
// Mock QRCode.toBuffer used by the QR route
const mockToBuffer = jest.fn();
describe('GET /api/qr/[code]', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('returns 400 for invalid format', async () => {
        const { GET } = await Promise.resolve().then(() => __importStar(require('../../../src/app/api/qr/[code]/route')));
        const res = await GET(undefined, { params: Promise.resolve({ code: 'invalid-code' }) });
        expect(res.status).toBe(400);
        expect(res.body).toBe('Invalid QR code format');
    });
    it('returns png buffer for valid code', async () => {
        const fakeBuffer = Buffer.from([1, 2, 3, 4]);
        mockToBuffer.mockResolvedValueOnce(fakeBuffer);
        const { GET } = await Promise.resolve().then(() => __importStar(require('../../../src/app/api/qr/[code]/route')));
        // Use a code matching the project's QR regex: 8-8-...-...-digits
        const res = await GET(undefined, { params: Promise.resolve({ code: 'EVENT123-USER5678-ABC-DEF-0' }) });
        expect(res.status).toBe(200);
        // NextResponse in tests returns body as-is
        expect(res.body).toBeInstanceOf(Uint8Array);
        expect(res.body.length).toBe(fakeBuffer.length);
        expect(mockToBuffer).toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxCaWx1clxcRG9jdW1lbnRzXFxEZXZlbG9wbWVudFxcTmV4dFxcc29yeWNrLWFjY2Vzc1xcc3JjXFxfX3Rlc3RzX19cXGFwaVxccXIudGVzdC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsdURBQXVEO0FBQ3ZELGNBQWM7QUFDZCw2RUFBNkU7QUFDN0UsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFO0lBQzVCLE1BQU0sWUFBWTtRQUloQixZQUFZLElBQVUsRUFBRSxJQUFVO1lBQ2hDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsTUFBTSxLQUFJLEdBQUcsQ0FBQTtZQUNqQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtZQUNoQixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUEsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLE9BQU8sS0FBSSxFQUFFLENBQUE7UUFDcEMsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBUyxFQUFFLElBQVU7WUFDL0IsT0FBTyxFQUFFLE1BQU0sRUFBRSxDQUFBLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxNQUFNLEtBQUksR0FBRyxFQUFFLElBQUksRUFBRSxDQUFBO1FBQzlDLENBQUM7S0FDRjtJQUNELE9BQU8sRUFBRSxZQUFZLEVBQUUsQ0FBQTtBQUN6QixDQUFDLENBQUMsQ0FBQTtBQUdGLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxHQUFHLElBQVcsRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFGcEYsNENBQTRDO0FBQzVDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQTtBQUc5QixRQUFRLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFO0lBQ2xDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUE7SUFDdEIsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsZ0NBQWdDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDOUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLHdEQUFhLHNDQUFzQyxHQUFDLENBQUE7UUFDcEUsTUFBTSxHQUFHLEdBQUcsTUFBTSxHQUFHLENBQUMsU0FBZ0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxDQUFDLEVBQVMsQ0FBQyxDQUFBO1FBQ3JHLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQzVCLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUE7SUFDakQsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsbUNBQW1DLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDakQsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDekMsWUFBWSxDQUFDLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBRWhELE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyx3REFBYSxzQ0FBc0MsR0FBQyxDQUFBO1FBQ3BFLGlFQUFpRTtRQUNqRSxNQUFNLEdBQUcsR0FBRyxNQUFNLEdBQUcsQ0FBQyxTQUFnQixFQUFFLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsNkJBQTZCLEVBQUUsQ0FBQyxFQUFTLENBQUMsQ0FBQTtRQUVsSCxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUM1QiwyQ0FBMkM7UUFDM0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDM0MsTUFBTSxDQUFFLEdBQUcsQ0FBQyxJQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDL0QsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUE7SUFDekMsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXEJpbHVyXFxEb2N1bWVudHNcXERldmVsb3BtZW50XFxOZXh0XFxzb3J5Y2stYWNjZXNzXFxzcmNcXF9fdGVzdHNfX1xcYXBpXFxxci50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cclxuLy8gQHRzLW5vY2hlY2tcclxuLy8gUHJvdmlkZSBhIG1vY2sgTmV4dFJlc3BvbnNlIHRoYXQgY2FuIGJlIGNvbnN0cnVjdGVkICh1c2VkIGJ5IHRoZSBRUiByb3V0ZSlcclxuamVzdC5tb2NrKCduZXh0L3NlcnZlcicsICgpID0+IHtcclxuICBjbGFzcyBOZXh0UmVzcG9uc2Uge1xyXG4gICAgc3RhdHVzOiBudW1iZXJcclxuICAgIGJvZHk6IGFueVxyXG4gICAgaGVhZGVyczogYW55XHJcbiAgICBjb25zdHJ1Y3Rvcihib2R5PzogYW55LCBvcHRzPzogYW55KSB7XHJcbiAgICAgIHRoaXMuc3RhdHVzID0gb3B0cz8uc3RhdHVzIHx8IDIwMFxyXG4gICAgICB0aGlzLmJvZHkgPSBib2R5XHJcbiAgICAgIHRoaXMuaGVhZGVycyA9IG9wdHM/LmhlYWRlcnMgfHwge31cclxuICAgIH1cclxuICAgIHN0YXRpYyBqc29uKGJvZHk6IGFueSwgb3B0cz86IGFueSkge1xyXG4gICAgICByZXR1cm4geyBzdGF0dXM6IG9wdHM/LnN0YXR1cyB8fCAyMDAsIGJvZHkgfVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4geyBOZXh0UmVzcG9uc2UgfVxyXG59KVxyXG4vLyBNb2NrIFFSQ29kZS50b0J1ZmZlciB1c2VkIGJ5IHRoZSBRUiByb3V0ZVxyXG5jb25zdCBtb2NrVG9CdWZmZXIgPSBqZXN0LmZuKClcclxuamVzdC5tb2NrKCdxcmNvZGUnLCAoKSA9PiAoeyB0b0J1ZmZlcjogKC4uLmFyZ3M6IGFueVtdKSA9PiBtb2NrVG9CdWZmZXIoLi4uYXJncykgfSkpXHJcblxyXG5kZXNjcmliZSgnR0VUIC9hcGkvcXIvW2NvZGVdJywgKCkgPT4ge1xyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKClcclxuICB9KVxyXG5cclxuICBpdCgncmV0dXJucyA0MDAgZm9yIGludmFsaWQgZm9ybWF0JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBHRVQgfSA9IGF3YWl0IGltcG9ydCgnLi4vLi4vLi4vc3JjL2FwcC9hcGkvcXIvW2NvZGVdL3JvdXRlJylcclxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IEdFVCh1bmRlZmluZWQgYXMgYW55LCB7IHBhcmFtczogUHJvbWlzZS5yZXNvbHZlKHsgY29kZTogJ2ludmFsaWQtY29kZScgfSkgfSBhcyBhbnkpXHJcbiAgICBleHBlY3QocmVzLnN0YXR1cykudG9CZSg0MDApXHJcbiAgICBleHBlY3QocmVzLmJvZHkpLnRvQmUoJ0ludmFsaWQgUVIgY29kZSBmb3JtYXQnKVxyXG4gIH0pXHJcblxyXG4gIGl0KCdyZXR1cm5zIHBuZyBidWZmZXIgZm9yIHZhbGlkIGNvZGUnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBmYWtlQnVmZmVyID0gQnVmZmVyLmZyb20oWzEsMiwzLDRdKVxyXG4gICAgbW9ja1RvQnVmZmVyLm1vY2tSZXNvbHZlZFZhbHVlT25jZShmYWtlQnVmZmVyKVxyXG5cclxuICBjb25zdCB7IEdFVCB9ID0gYXdhaXQgaW1wb3J0KCcuLi8uLi8uLi9zcmMvYXBwL2FwaS9xci9bY29kZV0vcm91dGUnKVxyXG4gIC8vIFVzZSBhIGNvZGUgbWF0Y2hpbmcgdGhlIHByb2plY3QncyBRUiByZWdleDogOC04LS4uLi0uLi4tZGlnaXRzXHJcbiAgY29uc3QgcmVzID0gYXdhaXQgR0VUKHVuZGVmaW5lZCBhcyBhbnksIHsgcGFyYW1zOiBQcm9taXNlLnJlc29sdmUoeyBjb2RlOiAnRVZFTlQxMjMtVVNFUjU2NzgtQUJDLURFRi0wJyB9KSB9IGFzIGFueSlcclxuXHJcbiAgICBleHBlY3QocmVzLnN0YXR1cykudG9CZSgyMDApXHJcbiAgICAvLyBOZXh0UmVzcG9uc2UgaW4gdGVzdHMgcmV0dXJucyBib2R5IGFzLWlzXHJcbiAgICBleHBlY3QocmVzLmJvZHkpLnRvQmVJbnN0YW5jZU9mKFVpbnQ4QXJyYXkpXHJcbiAgICBleHBlY3QoKHJlcy5ib2R5IGFzIFVpbnQ4QXJyYXkpLmxlbmd0aCkudG9CZShmYWtlQnVmZmVyLmxlbmd0aClcclxuICAgIGV4cGVjdChtb2NrVG9CdWZmZXIpLnRvSGF2ZUJlZW5DYWxsZWQoKVxyXG4gIH0pXHJcbn0pXHJcbiJdLCJ2ZXJzaW9uIjozfQ==