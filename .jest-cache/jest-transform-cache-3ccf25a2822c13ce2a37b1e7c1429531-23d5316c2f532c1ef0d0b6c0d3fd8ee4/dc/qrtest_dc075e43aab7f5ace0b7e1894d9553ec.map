{"file":"C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\__tests__\\api\\qr.test.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,YAAY,EAAE,EAAE,IAAI,EAAE,CAAC,IAAS,EAAE,IAAU,EAAE,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,KAAI,GAAG,EAAE,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA;AAGjI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,GAAG,IAAW,EAAE,EAAE,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAA;AAFpF,4CAA4C;AAC5C,MAAM,YAAY,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;AAG9B,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,UAAU,CAAC,GAAG,EAAE;QACd,IAAI,CAAC,aAAa,EAAE,CAAA;IACtB,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QAC9C,MAAM,EAAE,GAAG,EAAE,GAAG,wDAAa,sCAAsC,GAAC,CAAA;QACpE,MAAM,GAAG,GAAG,MAAM,GAAG,CAAC,SAAgB,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC,EAAS,CAAC,CAAA;QACrG,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QAC5B,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAA;IACjD,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;QACjD,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAA;QACzC,YAAY,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAA;QAE9C,MAAM,EAAE,GAAG,EAAE,GAAG,wDAAa,sCAAsC,GAAC,CAAA;QACpE,MAAM,GAAG,GAAG,MAAM,GAAG,CAAC,SAAgB,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,8BAA8B,EAAE,CAAC,EAAS,CAAC,CAAA;QAErH,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QAC5B,2CAA2C;QAC3C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,CAAA;QAC3C,MAAM,CAAE,GAAG,CAAC,IAAmB,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAA;QAC/D,MAAM,CAAC,YAAY,CAAC,CAAC,gBAAgB,EAAE,CAAA;IACzC,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","names":[],"sources":["C:\\Users\\Bilur\\Documents\\Development\\Next\\soryck-access\\src\\__tests__\\api\\qr.test.ts"],"sourcesContent":["jest.mock('next/server', () => ({ NextResponse: { json: (body: any, opts?: any) => ({ status: opts?.status || 200, body }), } }))\r\n// Mock QRCode.toBuffer used by the QR route\r\nconst mockToBuffer = jest.fn()\r\njest.mock('qrcode', () => ({ toBuffer: (...args: any[]) => mockToBuffer(...args) }))\r\n\r\ndescribe('GET /api/qr/[code]', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  it('returns 400 for invalid format', async () => {\r\n    const { GET } = await import('../../../src/app/api/qr/[code]/route')\r\n    const res = await GET(undefined as any, { params: Promise.resolve({ code: 'invalid-code' }) } as any)\r\n    expect(res.status).toBe(400)\r\n    expect(res.body).toBe('Invalid QR code format')\r\n  })\r\n\r\n  it('returns png buffer for valid code', async () => {\r\n    const fakeBuffer = Buffer.from([1,2,3,4])\r\n    mockToBuffer.mockResolvedValueOnce(fakeBuffer)\r\n\r\n    const { GET } = await import('../../../src/app/api/qr/[code]/route')\r\n    const res = await GET(undefined as any, { params: Promise.resolve({ code: 'EVENT1234-USER5678-ABC-DEF-0' }) } as any)\r\n\r\n    expect(res.status).toBe(200)\r\n    // NextResponse in tests returns body as-is\r\n    expect(res.body).toBeInstanceOf(Uint8Array)\r\n    expect((res.body as Uint8Array).length).toBe(fakeBuffer.length)\r\n    expect(mockToBuffer).toHaveBeenCalled()\r\n  })\r\n})\r\n"],"version":3}