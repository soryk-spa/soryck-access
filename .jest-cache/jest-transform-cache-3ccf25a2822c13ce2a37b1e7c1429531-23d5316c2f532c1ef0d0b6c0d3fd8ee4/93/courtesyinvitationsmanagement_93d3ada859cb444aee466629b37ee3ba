ae2586b0e7b5aad75bd5b9d7b41773da
"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = CourtesyInvitationsManagement;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const button_1 = require("@/components/ui/button");
const dialog_1 = require("@/components/ui/dialog");
const table_1 = require("@/components/ui/table");
const dropdown_menu_1 = require("@/components/ui/dropdown-menu");
const input_1 = require("@/components/ui/input");
const label_1 = require("@/components/ui/label");
const textarea_1 = require("@/components/ui/textarea");
const badge_1 = require("@/components/ui/badge");
const sonner_1 = require("sonner");
const lucide_react_1 = require("lucide-react");
const date_utils_1 = require("@/lib/date-utils");
function CourtesyInvitationsManagement({ eventId, eventTitle, }) {
    const [invitations, setInvitations] = (0, react_1.useState)([]);
    const [loading, setLoading] = (0, react_1.useState)(true);
    const [isAddingInvitation, setIsAddingInvitation] = (0, react_1.useState)(false);
    const [isBulkModalOpen, setIsBulkModalOpen] = (0, react_1.useState)(false);
    const [singleEmail, setSingleEmail] = (0, react_1.useState)('');
    const [singleName, setSingleName] = (0, react_1.useState)('');
    const [bulkEmails, setBulkEmails] = (0, react_1.useState)('');
    const fetchInvitations = (0, react_1.useCallback)(async () => {
        try {
            const response = await fetch(`/api/events/${eventId}/invitations`);
            if (response.ok) {
                const data = await response.json();
                if (data.invitations && Array.isArray(data.invitations)) {
                    setInvitations(data.invitations);
                }
                else {
                    console.error('La respuesta de la API no contiene invitaciones como array:', data);
                    setInvitations([]);
                    sonner_1.toast.error('Error en el formato de datos de invitaciones');
                }
            }
            else {
                const errorData = await response.json();
                console.error('Error response:', errorData);
                throw new Error(errorData.error || 'Error al cargar invitaciones');
            }
        }
        catch (error) {
            console.error('Error fetching invitations:', error);
            sonner_1.toast.error('Error al cargar las invitaciones');
            setInvitations([]);
        }
        finally {
            setLoading(false);
        }
    }, [eventId]);
    (0, react_1.useEffect)(() => {
        fetchInvitations();
    }, [fetchInvitations]);
    const addSingleInvitation = async () => {
        if (!singleEmail.trim()) {
            sonner_1.toast.error('El email es requerido');
            return;
        }
        setIsAddingInvitation(true);
        try {
            const response = await fetch(`/api/events/${eventId}/invitations`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    invitedEmail: singleEmail.trim(),
                    invitedName: singleName.trim() || undefined,
                }),
            });
            if (response.ok) {
                const newInvitation = await response.json();
                setInvitations(prev => [newInvitation, ...prev]);
                setSingleEmail('');
                setSingleName('');
                sonner_1.toast.success('Invitación creada exitosamente');
            }
            else {
                const error = await response.json();
                sonner_1.toast.error(error.error || 'Error al crear la invitación');
            }
        }
        catch (error) {
            console.error('Error adding invitation:', error);
            sonner_1.toast.error('Error al crear la invitación');
        }
        finally {
            setIsAddingInvitation(false);
        }
    };
    const addBulkInvitations = async () => {
        var _a;
        if (!bulkEmails.trim()) {
            sonner_1.toast.error('Debes agregar al menos un email');
            return;
        }
        const emails = bulkEmails
            .split('\\n')
            .map(line => line.trim())
            .filter(line => line.includes('@'))
            .map(line => {
            var _a;
            const parts = line.split(',');
            return {
                email: parts[0].trim(),
                name: ((_a = parts[1]) === null || _a === void 0 ? void 0 : _a.trim()) || undefined,
            };
        });
        if (emails.length === 0) {
            sonner_1.toast.error('No se encontraron emails válidos');
            return;
        }
        if (emails.length > 50) {
            sonner_1.toast.error('Máximo 50 invitaciones por lote');
            return;
        }
        try {
            const response = await fetch(`/api/events/${eventId}/invitations`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ invitations: emails }),
            });
            if (response.ok) {
                const result = await response.json();
                setInvitations(prev => [...result.created, ...prev]);
                setBulkEmails('');
                setIsBulkModalOpen(false);
                sonner_1.toast.success(`${result.created.length} invitaciones creadas exitosamente`);
                if (((_a = result.errors) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                    sonner_1.toast.warning(`${result.errors.length} invitaciones fallaron`);
                }
            }
            else {
                const error = await response.json();
                sonner_1.toast.error(error.error || 'Error al crear las invitaciones');
            }
        }
        catch (error) {
            console.error('Error adding bulk invitations:', error);
            sonner_1.toast.error('Error al crear las invitaciones');
        }
    };
    const handleInvitationAction = async (invitationId, action) => {
        try {
            const response = await fetch(`/api/events/${eventId}/invitations/${invitationId}`, {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ action }),
            });
            if (response.ok) {
                const updatedInvitation = await response.json();
                setInvitations(prev => prev.map(inv => inv.id === invitationId ? updatedInvitation : inv));
                const messages = {
                    SEND: 'Invitación enviada exitosamente',
                    RESEND: 'Invitación reenviada exitosamente',
                    GENERATE_TICKET: 'Ticket generado exitosamente',
                    CANCEL: 'Invitación cancelada',
                };
                sonner_1.toast.success(messages[action] || 'Acción completada');
            }
            else {
                const error = await response.json();
                sonner_1.toast.error(error.error || 'Error al procesar la acción');
            }
        }
        catch (error) {
            console.error('Error handling invitation action:', error);
            sonner_1.toast.error('Error al procesar la acción');
        }
    };
    const deleteInvitation = async (invitationId) => {
        if (!confirm('¿Estás seguro de eliminar esta invitación?'))
            return;
        try {
            const response = await fetch(`/api/events/${eventId}/invitations/${invitationId}`, {
                method: 'DELETE',
            });
            if (response.ok) {
                setInvitations(prev => prev.filter(inv => inv.id !== invitationId));
                sonner_1.toast.success('Invitación eliminada exitosamente');
            }
            else {
                const error = await response.json();
                sonner_1.toast.error(error.error || 'Error al eliminar la invitación');
            }
        }
        catch (error) {
            console.error('Error deleting invitation:', error);
            sonner_1.toast.error('Error al eliminar la invitación');
        }
    };
    const getStatusBadge = (invitation) => {
        switch (invitation.status) {
            case 'PENDING':
                return (0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: "secondary", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Clock, { className: "w-3 h-3 mr-1" }), "Pendiente"] });
            case 'SENT':
                return (0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: "default", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Mail, { className: "w-3 h-3 mr-1" }), "Enviada"] });
            case 'ACCEPTED':
                return (0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: "default", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.CheckCircle, { className: "w-3 h-3 mr-1" }), "Aceptada"] });
            case 'EXPIRED':
                return (0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: "destructive", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.XCircle, { className: "w-3 h-3 mr-1" }), "Expirada"] });
            default:
                return (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: "secondary", children: "Desconocido" });
        }
    };
    const exportInvitations = () => {
        const csvContent = [
            ['Email', 'Nombre', 'Estado', 'Enviado', 'Aceptado', 'QR Code', 'Usado'],
            ...invitations.map(inv => {
                var _a, _b;
                return [
                    inv.invitedEmail,
                    inv.invitedName || '',
                    inv.status,
                    inv.sentAt ? (0, date_utils_1.formatFullDateTime)(inv.sentAt) : '',
                    inv.acceptedAt ? (0, date_utils_1.formatFullDateTime)(inv.acceptedAt) : '',
                    ((_a = inv.ticket) === null || _a === void 0 ? void 0 : _a.qrCode) || '',
                    ((_b = inv.ticket) === null || _b === void 0 ? void 0 : _b.isUsed) ? 'Sí' : 'No',
                ];
            })
        ].map(row => row.join(',')).join('\\n');
        const blob = new Blob([csvContent], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `invitaciones-${eventTitle.replace(/[^a-zA-Z0-9]/g, '-')}.csv`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
    };
    if (loading) {
        return ((0, jsx_runtime_1.jsx)("div", { className: "flex items-center justify-center p-8", children: (0, jsx_runtime_1.jsx)("div", { className: "animate-spin rounded-full h-8 w-8 border-b-2 border-primary" }) }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-6", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h2", { className: "text-2xl font-bold", children: "Invitaciones de Cortes\u00EDa" }), (0, jsx_runtime_1.jsxs)("p", { className: "text-muted-foreground", children: ["Gestiona las invitaciones gratuitas para ", eventTitle] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex gap-2", children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", onClick: exportInvitations, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Download, { className: "w-4 h-4 mr-2" }), "Exportar"] }), (0, jsx_runtime_1.jsxs)(dialog_1.Dialog, { open: isBulkModalOpen, onOpenChange: setIsBulkModalOpen, children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Users, { className: "w-4 h-4 mr-2" }), "Invitaci\u00F3n Masiva"] }) }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: "max-w-2xl", children: [(0, jsx_runtime_1.jsxs)(dialog_1.DialogHeader, { children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: "Invitaci\u00F3n Masiva" }), (0, jsx_runtime_1.jsx)(dialog_1.DialogDescription, { children: "Agrega m\u00FAltiples emails separados por l\u00EDneas. Formato: email@ejemplo.com, Nombre (opcional)" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-4", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "bulk-emails", children: "Emails (m\u00E1ximo 50)" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: "bulk-emails", placeholder: "usuario1@ejemplo.com, Juan P\u00E9rez\nusuario2@ejemplo.com\nusuario3@ejemplo.com, Mar\u00EDa Garc\u00EDa", value: bulkEmails, onChange: (e) => setBulkEmails(e.target.value), rows: 10 })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-end gap-2", children: [(0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", onClick: () => setIsBulkModalOpen(false), children: "Cancelar" }), (0, jsx_runtime_1.jsx)(button_1.Button, { onClick: addBulkInvitations, children: "Crear Invitaciones" })] })] })] })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "bg-card rounded-lg border p-6", children: [(0, jsx_runtime_1.jsx)("h3", { className: "text-lg font-semibold mb-4", children: "Agregar Invitaci\u00F3n Individual" }), (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "email", children: "Email *" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "email", type: "email", placeholder: "usuario@ejemplo.com", value: singleEmail, onChange: (e) => setSingleEmail(e.target.value) })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "name", children: "Nombre (opcional)" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "name", placeholder: "Nombre del invitado", value: singleName, onChange: (e) => setSingleName(e.target.value) })] }), (0, jsx_runtime_1.jsx)("div", { className: "flex items-end", children: (0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: addSingleInvitation, disabled: isAddingInvitation || !singleEmail.trim(), className: "w-full", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: "w-4 h-4 mr-2" }), isAddingInvitation ? 'Agregando...' : 'Agregar Invitación'] }) })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "bg-card rounded-lg border", children: [(0, jsx_runtime_1.jsx)("div", { className: "p-6 border-b", children: (0, jsx_runtime_1.jsxs)("h3", { className: "text-lg font-semibold", children: ["Invitaciones (", invitations.length, ")"] }) }), invitations.length === 0 ? ((0, jsx_runtime_1.jsxs)("div", { className: "p-8 text-center text-muted-foreground", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Users, { className: "w-12 h-12 mx-auto mb-4 opacity-50" }), (0, jsx_runtime_1.jsx)("p", { children: "No hay invitaciones creadas para este evento" }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm", children: "Agrega tu primera invitaci\u00F3n arriba" })] })) : ((0, jsx_runtime_1.jsxs)(table_1.Table, { children: [(0, jsx_runtime_1.jsx)(table_1.TableHeader, { children: (0, jsx_runtime_1.jsxs)(table_1.TableRow, { children: [(0, jsx_runtime_1.jsx)(table_1.TableHead, { children: "Invitado" }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { children: "Estado" }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { children: "Fechas" }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { children: "Ticket" }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { children: "Creado por" }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { className: "text-right", children: "Acciones" })] }) }), (0, jsx_runtime_1.jsx)(table_1.TableBody, { children: invitations.map((invitation) => {
                                    var _a;
                                    return ((0, jsx_runtime_1.jsxs)(table_1.TableRow, { children: [(0, jsx_runtime_1.jsx)(table_1.TableCell, { children: (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("div", { className: "font-medium", children: invitation.invitedName || 'Sin nombre' }), (0, jsx_runtime_1.jsx)("div", { className: "text-sm text-muted-foreground", children: invitation.invitedEmail })] }) }), (0, jsx_runtime_1.jsx)(table_1.TableCell, { children: getStatusBadge(invitation) }), (0, jsx_runtime_1.jsx)(table_1.TableCell, { children: (0, jsx_runtime_1.jsxs)("div", { className: "text-sm", children: [invitation.sentAt && ((0, jsx_runtime_1.jsxs)("div", { children: ["Enviado: ", (0, date_utils_1.formatFullDateTime)(invitation.sentAt)] })), invitation.acceptedAt && ((0, jsx_runtime_1.jsxs)("div", { children: ["Aceptado: ", (0, date_utils_1.formatFullDateTime)(invitation.acceptedAt)] })), invitation.expiresAt && ((0, jsx_runtime_1.jsxs)("div", { children: ["Expira: ", (0, date_utils_1.formatFullDateTime)(invitation.expiresAt)] }))] }) }), (0, jsx_runtime_1.jsx)(table_1.TableCell, { children: invitation.ticket ? ((0, jsx_runtime_1.jsxs)("div", { className: "text-sm", children: [(0, jsx_runtime_1.jsx)("div", { className: "font-mono text-xs", children: invitation.ticket.qrCode }), invitation.ticket.isUsed && ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: "secondary", className: "mt-1", children: "Usado" }))] })) : ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: "outline", children: "Sin ticket" })) }), (0, jsx_runtime_1.jsx)(table_1.TableCell, { children: (0, jsx_runtime_1.jsx)("div", { className: "text-sm", children: invitation.creator ? (`${invitation.creator.firstName} ${invitation.creator.lastName || ''}`.trim()) : ('Usuario no disponible') }) }), (0, jsx_runtime_1.jsx)(table_1.TableCell, { className: "text-right", children: (0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenu, { children: [(0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuTrigger, { asChild: true, children: (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "ghost", size: "sm", children: (0, jsx_runtime_1.jsx)(lucide_react_1.MoreHorizontal, { className: "w-4 h-4" }) }) }), (0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuContent, { align: "end", children: [invitation.status === 'PENDING' && ((0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuItem, { onClick: () => handleInvitationAction(invitation.id, 'SEND'), children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Send, { className: "w-4 h-4 mr-2" }), "Enviar Invitaci\u00F3n"] })), invitation.status === 'SENT' && ((0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuItem, { onClick: () => handleInvitationAction(invitation.id, 'RESEND'), children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Mail, { className: "w-4 h-4 mr-2" }), "Reenviar"] })), !invitation.ticket && ((0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuItem, { onClick: () => handleInvitationAction(invitation.id, 'GENERATE_TICKET'), children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: "w-4 h-4 mr-2" }), "Generar Ticket"] })), invitation.status !== 'EXPIRED' && ((0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuItem, { onClick: () => handleInvitationAction(invitation.id, 'CANCEL'), children: [(0, jsx_runtime_1.jsx)(lucide_react_1.XCircle, { className: "w-4 h-4 mr-2" }), "Cancelar"] })), (0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuItem, { onClick: () => deleteInvitation(invitation.id), className: "text-destructive", disabled: (_a = invitation.ticket) === null || _a === void 0 ? void 0 : _a.isUsed, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Trash2, { className: "w-4 h-4 mr-2" }), "Eliminar"] })] })] }) })] }, invitation.id));
                                }) })] }))] })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,