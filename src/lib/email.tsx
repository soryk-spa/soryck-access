/* eslint-disable @typescript-eslint/no-explicit-any */
import * as React from "react";
import { Resend } from "resend";
import { render } from "@react-email/render";
import { User, Event, CourtesyRequest } from "@prisma/client";

// Importaci√≥n din√°mica del template de cortes√≠a
async function loadCourtesyEmailComponent() {
  const { CourtesyEmail } = await import("@/app/api/_emails/courtesy-email");
  return CourtesyEmail;
}

// Importaci√≥n din√°mica de date-utils
async function loadDateUtils() {
  const { formatFullDateTime } = await import("@/lib/date-utils");
  return { formatFullDateTime };
}

if (!process.env.RESEND_API_KEY) {
  console.warn(
    "RESEND_API_KEY no est√° definida. El env√≠o de correos est√° deshabilitado."
  );
}

const resend = process.env.RESEND_API_KEY
  ? new Resend(process.env.RESEND_API_KEY)
  : null;

type FullEvent = Event;
type FullUser = User;

// TODO: Esta funci√≥n fue movida/refactorizada. Necesita re-implementaci√≥n si se usa.
// eslint-disable-next-line @typescript-eslint/no-unused-vars
export async function sendTicketEmail(..._args: any[]) {
  console.warn("sendTicketEmail function needs to be re-implemented");
  // Implementaci√≥n temporal vac√≠a para evitar errores de compilaci√≥n
}

// Funci√≥n para enviar correos de cortes√≠a
export async function sendCourtesyEmail({
  user,
  event,
  courtesyRequest,
}: {
  user: FullUser;
  event: FullEvent;
  courtesyRequest: CourtesyRequest;
}) {
  if (!resend || !process.env.EMAIL_FROM) {
    console.log(
      "Env√≠o de correo de cortes√≠a omitido por falta de configuraci√≥n de Resend."
    );
    return;
  }

  console.log(`[COURTESY EMAIL] üöÄ Iniciando proceso para cortes√≠a: ${courtesyRequest.id}`);
  console.log(`[COURTESY EMAIL] üë§ Usuario: ${user.email}`);
  console.log(`[COURTESY EMAIL] üé™ Evento: ${event.title}`);
  console.log(`[COURTESY EMAIL] üé´ C√≥digo: ${courtesyRequest.code}`);
  console.log(`[COURTESY EMAIL] üí∞ Tipo: ${courtesyRequest.codeType}`);

  try {
    // Cargar dependencias din√°micamente
    const CourtesyEmail = await loadCourtesyEmailComponent();
    const { formatFullDateTime } = await loadDateUtils();

    const userName = user.firstName || user.email.split("@")[0];
    const eventDate = formatFullDateTime(event.startDate);
    const expiresAt = formatFullDateTime(courtesyRequest.expiresAt!);

    const emailHtml = await render(
      React.createElement(CourtesyEmail, {
        userName,
        eventName: event.title,
        eventDate,
        eventLocation: event.location,
        courtesyCode: courtesyRequest.code!,
        codeType: courtesyRequest.codeType!,
        discountValue: courtesyRequest.discountValue,
        expiresAt,
      })
    );

    const emailData = {
      from: process.env.EMAIL_FROM,
      to: user.email,
      subject: `üéâ Cortes√≠a aprobada para ${event.title}`,
      html: emailHtml,
    };

    console.log("[COURTESY EMAIL] üì§ Enviando email...");
    console.log(`[COURTESY EMAIL]    - Para: ${user.email}`);
    console.log(`[COURTESY EMAIL]    - Asunto: ${emailData.subject}`);
    console.log(`[COURTESY EMAIL]    - C√≥digo: ${courtesyRequest.code}`);

    await resend.emails.send(emailData);

    console.log(`[COURTESY EMAIL] ‚úÖ Correo de cortes√≠a enviado exitosamente`);
    console.log(`[COURTESY EMAIL] üìã C√≥digo: ${courtesyRequest.code}`);
    console.log(`[COURTESY EMAIL] üé´ Tipo: ${courtesyRequest.codeType}`);
  } catch (error) {
    console.error("[COURTESY EMAIL] ‚ùå Error al enviar correo de cortes√≠a:", error);
    throw error;
  }
}
