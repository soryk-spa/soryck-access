generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String            @id @default(cuid())
  clerkId                  String            @unique
  email                    String            @unique
  firstName                String?
  lastName                 String?
  imageUrl                 String?
  role                     UserRole          @default(CLIENT)
  producerName             String?
  bio                      String?
  websiteUrl               String?
  twitterUrl               String?
  instagramUrl             String?
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  organizedEvents          Event[]               @relation("EventOrganizer")
  tickets                  Ticket[]
  orders                   Order[]
  createdPromoCodes        PromoCode[]           @relation("CreatedPromoCodes")
  promoCodeUsages          PromoCodeUsage[]
  roleRequests             RoleRequest[]
  assignedEvents           EventScanner[]        @relation("ScannerEvents")
  assignedScanners         EventScanner[]        @relation("AssignedBy")
  createdVenues            Venue[]               @relation("CreatedVenues")
  seatReservations         SeatReservation[]
  approvedCourtesyRequests CourtesyRequest[]     @relation("ApprovedCourtesyRequests")
  createdCourtesyInvitations CourtesyInvitation[] @relation("CreatedCourtesyInvitations")

  @@map("users")
}

model Category {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  events      Event[]
  promoCodes  PromoCode[]

  @@map("categories")
}

model EventScanner {
  id         String   @id @default(cuid())
  eventId    String
  scannerId  String
  assignedBy String
  assignedAt DateTime @default(now())
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  scanner    User     @relation("ScannerEvents", fields: [scannerId], references: [id], onDelete: Cascade)
  assigner   User     @relation("AssignedBy", fields: [assignedBy], references: [id], onDelete: Cascade)

  @@unique([eventId, scannerId])
  @@map("event_scanners")
}

model Event {
  id               String            @id @default(cuid())
  title            String
  description      String?
  imageUrl         String?
  location         String
  startDate        DateTime
  endDate          DateTime?
  price            Float             @default(0)
  currency         String            @default("CLP")
  capacity         Int
  isPublished      Boolean           @default(false)
  isFree           Boolean           @default(false)
  totalRevenue     Float?
  totalCommissions Float?
  hasSeatingPlan   Boolean           @default(false)
  allowCourtesy    Boolean           @default(false) // Permitir solicitudes de cortesía
  courtesyLimit    Int? // Límite de cortesías por evento
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  organizerId      String
  organizer        User              @relation("EventOrganizer", fields: [organizerId], references: [id], onDelete: Cascade)
  categoryId       String
  category         Category          @relation(fields: [categoryId], references: [id])
  venueId          String?
  venue              Venue?              @relation(fields: [venueId], references: [id], onDelete: SetNull)
  tickets            Ticket[]
  orders             Order[]
  ticketTypes        TicketType[]
  scanners           EventScanner[]
  promoCodes         PromoCode[]
  sections           Section[]
  seatReservations   SeatReservation[]
  courtesyRequests   CourtesyRequest[]   @relation("EventCourtesyRequests")
  courtesyInvitations CourtesyInvitation[] @relation("EventCourtesyInvitations")

  @@map("events")
}

model Ticket {
  id        String       @id @default(cuid())
  qrCode    String       @unique
  isUsed    Boolean      @default(false)
  usedAt    DateTime?
  status    TicketStatus @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  eventId      String
  event        Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderId      String
  order        Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  ticketTypeId String?
  ticketType   TicketType? @relation(fields: [ticketTypeId], references: [id], onDelete: SetNull)
  seatId       String? // Reference to specific seat
  seat         EventSeat?  @relation(fields: [seatId], references: [id], onDelete: SetNull)
  courtesyInvitation CourtesyInvitation? @relation("CourtesyInvitationTicket")

  @@map("tickets")
}

model TicketType {
  id               String           @id @default(cuid())
  name             String
  description      String?
  price            Float
  currency         String           @default("CLP")
  capacity         Int
  ticketsGenerated Int              @default(1)
  status           TicketTypeStatus @default(AVAILABLE)
  eventId          String
  event            Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tickets          Ticket[]
  promoCodes       PromoCode[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@map("ticket_types")
}

model PromoCode {
  id                String          @id @default(cuid())
  code              String          @unique
  name              String
  description       String?
  type              PromoCodeType   @default(PERCENTAGE)
  value             Float
  minOrderAmount    Float?
  maxDiscountAmount Float?
  currency          String          @default("CLP")
  status            PromoCodeStatus @default(ACTIVE)
  usageLimit        Int?
  usedCount         Int             @default(0)
  usageLimitPerUser Int?
  validFrom         DateTime
  validUntil        DateTime?

  eventId      String?
  event        Event?      @relation(fields: [eventId], references: [id], onDelete: SetNull)
  categoryId   String?
  category     Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  ticketTypeId String?
  ticketType   TicketType? @relation(fields: [ticketTypeId], references: [id], onDelete: SetNull)

  createdBy String
  creator   User     @relation("CreatedPromoCodes", fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  usages PromoCodeUsage[]

  @@index([eventId])
  @@index([categoryId])
  @@index([status])
  @@index([validFrom, validUntil])
  @@map("promo_codes")
}

model PromoCodeUsage {
  id          String    @id @default(cuid())
  promoCodeId String
  promoCode   PromoCode @relation(fields: [promoCodeId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderId     String    @unique
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)

  discountAmount Float
  originalAmount Float
  finalAmount    Float

  usedAt    DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([promoCodeId])
  @@index([userId])
  @@map("promo_code_usages")
}

enum PromoCodeType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE
}

enum PromoCodeStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  USED_UP
}

model CourtesyRequest {
  id            String            @id @default(cuid())
  eventId       String
  name          String
  rut           String
  email         String
  phone         String?
  status        CourtesyStatus    @default(PENDING)
  code          String?           @unique // Código generado al aprobar
  codeType      CourtesyCodeType? // Tipo de beneficio
  discountValue Float? // Valor del descuento si aplica
  expiresAt     DateTime? // Fecha de expiración del código
  usedAt        DateTime? // Fecha cuando se usó el código
  approvedAt    DateTime? // Fecha de aprobación
  approvedBy    String? // ID del usuario que aprobó
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  event    Event @relation("EventCourtesyRequests", fields: [eventId], references: [id], onDelete: Cascade)
  approver User? @relation("ApprovedCourtesyRequests", fields: [approvedBy], references: [id], onDelete: SetNull)

  @@unique([eventId, email]) // Un email por evento
  @@unique([eventId, rut]) // Un RUT por evento
  @@index([eventId])
  @@index([email])
  @@index([code])
  @@map("courtesy_requests")
}

enum CourtesyStatus {
  PENDING // Solicitud pendiente de aprobación
  APPROVED // Aprobada y código generado
  REJECTED // Rechazada
  USED // Código usado
  EXPIRED // Código expirado
}

enum CourtesyCodeType {
  FREE // Entrada gratuita
  DISCOUNT // Descuento porcentual o fijo
}

model CourtesyInvitation {
  id             String                     @id @default(cuid())
  eventId        String
  invitedEmail   String
  invitedName    String?
  message        String?
  status         CourtesyInvitationStatus   @default(PENDING)
  invitationCode String?                    @unique
  sentAt         DateTime?
  acceptedAt     DateTime?
  expiresAt      DateTime?
  ticketId       String?                    @unique
  createdBy      String
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt

  event   Event   @relation("EventCourtesyInvitations", fields: [eventId], references: [id], onDelete: Cascade)
  creator User    @relation("CreatedCourtesyInvitations", fields: [createdBy], references: [id], onDelete: Cascade)
  ticket  Ticket? @relation("CourtesyInvitationTicket", fields: [ticketId], references: [id], onDelete: SetNull)

  @@unique([eventId, invitedEmail])
  @@index([eventId])
  @@index([invitedEmail])
  @@index([invitationCode])
  @@index([status])
  @@map("courtesy_invitations")
}

enum CourtesyInvitationStatus {
  PENDING  // Invitación pendiente de envío
  SENT     // Invitación enviada
  ACCEPTED // Invitación aceptada (ticket generado)
  EXPIRED  // Invitación expirada
}

model Payment {
  id                String    @id @default(cuid())
  orderId           String    @unique
  transactionId     String    @unique
  token             String?
  amount            Float
  currency          String    @default("CLP")
  status            String    @default("PENDING")
  paymentMethod     String?
  authorizationCode String?
  responseCode      Int?
  transactionDate   DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Order {
  id               String          @id @default(cuid())
  orderNumber      String          @unique
  totalAmount      Float
  baseAmount       Float?
  commissionAmount Float?
  currency         String          @default("CLP")
  quantity         Int
  status           OrderStatus     @default(PENDING)
  paymentIntentId  String?         @unique
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  userId           String
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId          String
  event            Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tickets          Ticket[]
  payment          Payment?
  Commission       Commission[]
  promoCodeUsage   PromoCodeUsage?
  discountAmount   Float?
  originalAmount   Float?

  @@map("orders")
}

model RoleRequest {
  id            String            @id @default(cuid())
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  currentRole   UserRole
  requestedRole UserRole
  message       String
  status        RoleRequestStatus @default(PENDING)
  reviewedBy    String?
  reviewedAt    DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@map("role_requests")
}

model Commission {
  id         String         @id @default(cuid())
  orderId    String
  order      Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  type       CommissionType @default(PLATFORM_FEE)
  baseAmount Float
  rate       Float
  amount     Float
  currency   String         @default("CLP")
  status     String         @default("PENDING")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("commissions")
}

// Seating System Models
model Venue {
  id          String   @id @default(cuid())
  name        String
  description String?
  address     String?
  capacity    Int?
  layout      Json? // Store the venue layout configuration
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  creator     User     @relation("CreatedVenues", fields: [createdBy], references: [id], onDelete: Cascade)

  events   Event[]
  sections VenueSection[]

  @@map("venues")
}

model VenueSection {
  id         String   @id @default(cuid())
  name       String
  color      String   @default("#3B82F6") // Default blue color
  x          Float // X position in the layout
  y          Float // Y position in the layout
  width      Float // Width of the section
  height     Float // Height of the section
  rotation   Float    @default(0) // Rotation in degrees
  seatLayout Json // Seat arrangement within section
  priceZone  String? // Price zone identifier
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  venueId    String
  venue      Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)

  venueSeats VenueSeat[]

  @@map("venue_sections")
}

model VenueSeat {
  id           String       @id @default(cuid())
  row          String // Row identifier (A, B, C, 1, 2, 3, etc.)
  number       String // Seat number within the row
  x            Float // X position within the section
  y            Float // Y position within the section
  status       SeatStatus   @default(AVAILABLE)
  isAccessible Boolean      @default(false) // For accessibility seats
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  sectionId    String
  section      VenueSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  eventSeats EventSeat[]

  @@unique([sectionId, row, number])
  @@map("venue_seats")
}

model Section {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#3B82F6")
  x         Float
  y         Float
  width     Float
  height    Float
  rotation  Float    @default(0)
  priceZone String?
  basePrice Float? // Base price for this section
  capacity  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  seats EventSeat[]

  @@map("sections")
}

model EventSeat {
  id           String     @id @default(cuid())
  row          String
  number       String
  x            Float
  y            Float
  price        Float?
  status       SeatStatus @default(AVAILABLE)
  isAccessible Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  sectionId    String
  section      Section    @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  venueSeatId  String?
  venueSeat    VenueSeat? @relation(fields: [venueSeatId], references: [id], onDelete: SetNull)

  tickets      Ticket[]
  reservations SeatReservation[]

  @@unique([sectionId, row, number])
  @@map("event_seats")
}

model SeatReservation {
  id        String    @id @default(cuid())
  sessionId String // Browser session or user session ID
  userId    String? // Optional: if user is logged in
  expiresAt DateTime // When the reservation expires
  createdAt DateTime  @default(now())
  eventId   String
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  seatId    String
  seat      EventSeat @relation(fields: [seatId], references: [id], onDelete: Cascade)
  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([eventId, seatId]) // One reservation per seat per event
  @@index([expiresAt]) // For cleanup of expired reservations
  @@index([sessionId]) // For finding user's reservations
  @@map("seat_reservations")
}

enum UserRole {
  CLIENT
  ORGANIZER
  SCANNER
  ADMIN
}

enum RoleRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TicketTypeStatus {
  AVAILABLE
  SOLD_OUT
  HIDDEN
}

enum TicketStatus {
  ACTIVE
  CANCELLED
  REFUNDED
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  REFUNDED
}

enum CommissionType {
  PLATFORM_FEE
  PROCESSING_FEE
  PROMOTIONAL

  @@map("commission_types")
}

enum SeatStatus {
  AVAILABLE
  RESERVED
  SOLD
  BLOCKED
  MAINTENANCE
}
